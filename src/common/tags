!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ADDRESS_HELPER_H_	address_helper.h	16;"	d
AMPERSAND_XESCAPE	escape.c	28;"	d	file:
ANNOTATE_BENIGN_RACE_SIZED	valgrind.h	16;"	d
ANNOTATE_HAPPENS_AFTER	valgrind.h	12;"	d
ANNOTATE_HAPPENS_BEFORE	valgrind.h	14;"	d
ANNOTATE_HAPPENS_BEFORE_FORGET_ALL	valgrind.h	13;"	d
ARRAY_SIZE	cmdparse.h	17;"	d
ASYNC_RESERVER_H	AsyncReserver.h	16;"	d
AdminSocket	admin_socket.cc	/^AdminSocket::AdminSocket(CephContext *cct)$/;"	f	class:AdminSocket
AdminSocket	admin_socket.h	/^class AdminSocket : public Thread$/;"	c
AdminSocketClient	admin_socket_client.cc	/^AdminSocketClient(const std::string &path)$/;"	f	class:AdminSocketClient
AdminSocketClient	admin_socket_client.h	/^class AdminSocketClient$/;"	c
AdminSocketHook	admin_socket.h	/^class AdminSocketHook {$/;"	c
Align	TextTable.h	/^  enum Align {LEFT = 1, CENTER, RIGHT};$/;"	g	class:TextTable
AsyncOpTracker	AsyncOpTracker.cc	/^AsyncOpTracker::AsyncOpTracker()$/;"	f	class:AsyncOpTracker
AsyncOpTracker	AsyncOpTracker.h	/^class AsyncOpTracker {$/;"	c
AsyncReserver	AsyncReserver.h	/^  AsyncReserver($/;"	f	class:AsyncReserver
AsyncReserver	AsyncReserver.h	/^class AsyncReserver {$/;"	c
BACKSLASH_JESCAPE	escape.c	116;"	d	file:
BACKTRACE_SKIP	lockdep.cc	33;"	d	file:
BENCH_LASTRUN_METADATA	obj_bencher.cc	/^const std::string BENCH_LASTRUN_METADATA = "benchmark_last_metadata";$/;"	v
BENCH_PREFIX	obj_bencher.cc	/^const std::string BENCH_PREFIX = "benchmark_data";$/;"	v
BITS_PER_BYTE	bit_vector.hpp	/^  static const uint8_t BITS_PER_BYTE = 8;$/;"	m	class:ceph::BitVector
BIT_COUNT	bit_vector.hpp	/^  static const uint8_t BIT_COUNT = _bit_count;$/;"	m	class:ceph::BitVector
BIT_VECTOR_HPP	bit_vector.hpp	12;"	d
BLOCK_SIZE	bit_vector.hpp	/^  static const uint32_t BLOCK_SIZE;$/;"	m	class:ceph::BitVector
BLOCK_SIZE	bit_vector.hpp	/^const uint32_t BitVector<_b>::BLOCK_SIZE = 4096;$/;"	m	class:ceph::BitVector
BOUNDED_KEY_COUNTER_H	bounded_key_counter.h	18;"	d
BUF_SIZE	addr_parsing.c	24;"	d	file:
BYTES	perf_counters.h	/^  BYTES,$/;"	e	enum:uint8_t
BYTESWAP_DATA	crc32c_ppc_asm.S	/^#define BYTESWAP_DATA$/;"	d
BackTrace	BackTrace.h	/^  explicit BackTrace(int s) : skip(s) {$/;"	f	struct:ceph::BackTrace
BackTrace	BackTrace.h	/^struct BackTrace {$/;"	s	namespace:ceph
BackoffThrottle	Throttle.cc	/^BackoffThrottle::BackoffThrottle(CephContext *cct, const std::string& n, unsigned expected_concurrency, bool _use_perf)$/;"	f	class:BackoffThrottle
BackoffThrottle	Throttle.h	/^class BackoffThrottle {$/;"	c
BaseShardedWQ	WorkQueue.h	/^    BaseShardedWQ(time_t ti, time_t sti):timeout_interval(ti), suicide_interval(sti) {}$/;"	f	class:ShardedThreadPool::BaseShardedWQ
BaseShardedWQ	WorkQueue.h	/^  class BaseShardedWQ {$/;"	c	class:ShardedThreadPool
BatchWorkQueue	WorkQueue.h	/^    BatchWorkQueue(string n, time_t ti, time_t sti, ThreadPool* p)$/;"	f	class:ThreadPool::BatchWorkQueue
BatchWorkQueue	WorkQueue.h	/^  class BatchWorkQueue : public WorkQueue_ {$/;"	c	class:ThreadPool
BitVector	bit_vector.hpp	/^BitVector<_b>::BitVector() : m_size(0), m_crc_enabled(true), m_header_crc(0)$/;"	f	class:ceph::BitVector
BitVector	bit_vector.hpp	/^class BitVector$/;"	c	namespace:ceph
BoundedKeyCounter	bounded_key_counter.h	/^  BoundedKeyCounter(size_t bound)$/;"	f	class:BoundedKeyCounter
BoundedKeyCounter	bounded_key_counter.h	/^class BoundedKeyCounter {$/;"	c
C2H_ERRNO	freebsd_errno.cc	20;"	d	file:
CACHE_LINE_SIZE	cohort_lru.h	22;"	d
CACHE_PAD	cohort_lru.h	24;"	d
CENTER	TextTable.h	/^  enum Align {LEFT = 1, CENTER, RIGHT};$/;"	e	enum:TextTable::Align
CEPH_ADMIN_SOCK_VERSION	admin_socket.h	23;"	d
CEPH_ARCH_H	arch.h	2;"	d
CEPH_ARGPARSE_H	ceph_argparse.h	16;"	d
CEPH_ARMOR_H	armor.h	2;"	d
CEPH_ASYNC_COMPLETION_H	ContextCompletion.h	4;"	d
CEPH_ASYNC_OP_TRACKER_H	AsyncOpTracker.h	5;"	d
CEPH_AUTOVECTOR_H	autovector.h	7;"	d
CEPH_BACKTRACE_H	BackTrace.h	2;"	d
CEPH_BUFFER_ALLOC_UNIT	buffer.cc	42;"	d	file:
CEPH_BUFFER_APPEND_SIZE	buffer.cc	43;"	d	file:
CEPH_CEPHCONTEXT_H	ceph_context.h	16;"	d
CEPH_CLOCK_H	Clock.h	16;"	d
CEPH_COMMON_ADMIN_SOCKET_CLIENT_H	admin_socket_client.h	16;"	d
CEPH_COMMON_ADMIN_SOCKET_H	admin_socket.h	16;"	d
CEPH_COMMON_ALIGN_H	align.h	18;"	d
CEPH_COMMON_BACKPORT14_H	backport14.h	19;"	d
CEPH_COMMON_BIT_STR_H	bit_str.h	15;"	d
CEPH_COMMON_CMDPARSE_H	cmdparse.h	4;"	d
CEPH_COMMON_CODE_ENVIRONMENT_H	code_environment.h	16;"	d
CEPH_COMMON_CRC32C_AARCH64_H	crc32c_aarch64.h	2;"	d
CEPH_COMMON_CRC32C_INTEL_BASELINE_H	crc32c_intel_baseline.h	2;"	d
CEPH_COMMON_CRC32C_INTEL_FAST_H	crc32c_intel_fast.h	2;"	d
CEPH_COMMON_CRC32C_PPC_H	crc32c_ppc.h	10;"	d
CEPH_COMMON_DELETER_H	deleter.h	23;"	d
CEPH_COMMON_ENTITY_NAME_H	entity_name.h	16;"	d
CEPH_COMMON_ENVIRONMENT_H	environment.h	16;"	d
CEPH_COMMON_EVENT_SOCKET_H	event_socket.h	18;"	d
CEPH_COMMON_FD_H	fd.h	16;"	d
CEPH_COMMON_HEX_H	hex.h	17;"	d
CEPH_COMMON_HOSTNAME_H	hostname.h	16;"	d
CEPH_COMMON_INIT_H	common_init.h	16;"	d
CEPH_COMMON_IO_PRIORITY_H	io_priority.h	16;"	d
CEPH_COMMON_ISO_8601_H	iso_8601.h	5;"	d
CEPH_COMMON_MIME_H	mime.h	16;"	d
CEPH_COMMON_MUTEX_DEBUG_H	mutex_debug.h	16;"	d
CEPH_COMMON_OUTPUTDATASOCKET_H	OutputDataSocket.h	16;"	d
CEPH_COMMON_PERF_COUNTERS_H	perf_counters.h	18;"	d
CEPH_COMMON_PERF_HISTOGRAM_H	perf_histogram.h	16;"	d
CEPH_COMMON_PLUGINREGISTRY_H	PluginRegistry.h	19;"	d
CEPH_COMMON_PREBUFFEREDSTREAMBUF_H	PrebufferedStreambuf.h	2;"	d
CEPH_COMMON_PREFORKER_H	Preforker.h	4;"	d
CEPH_COMMON_RUN_CMD_H	run_cmd.h	16;"	d
CEPH_COMMON_SCTP_CRC32_H	sctp_crc32.h	2;"	d
CEPH_COMMON_SHUNIQUE_LOCK_H	shunique_lock.h	5;"	d
CEPH_COMMON_SIGNAL_H	signal.h	16;"	d
CEPH_COMMON_SLOPPYCRCMAP_H	SloppyCRCMap.h	5;"	d
CEPH_COMMON_STATIC_ASSERT	static_assert.h	16;"	d
CEPH_COMMON_STRTOL_H	strtol.h	16;"	d
CEPH_COMMON_TUB_H	Tub.h	17;"	d
CEPH_COMMON_UTF8_H	utf8.h	16;"	d
CEPH_COMMON_VERSION_H	version.h	16;"	d
CEPH_COMPILER_EXTENSIONS_H	compiler_extensions.h	16;"	d
CEPH_COND_H	Cond.h	17;"	d
CEPH_CONFIG_H	config.h	16;"	d
CEPH_CONFIG_OBS_H	config_obs.h	16;"	d
CEPH_CONFUTILS_H	ConfUtils.h	16;"	d
CEPH_CONF_FILE_DEFAULT	config.cc	/^const char *CEPH_CONF_FILE_DEFAULT = "$data_dir\/config, \/etc\/ceph\/$cluster.conf, ~\/.ceph\/$cluster.conf, $cluster.conf"$/;"	v
CEPH_CRYPTO_CMS_H	ceph_crypto_cms.h	2;"	d
CEPH_CRYPTO_H	ceph_crypto.h	2;"	d
CEPH_CRYPTO_HMACSHA1_DIGESTSIZE	ceph_crypto.h	7;"	d
CEPH_CRYPTO_HMACSHA256_DIGESTSIZE	ceph_crypto.h	9;"	d
CEPH_CRYPTO_MD5_DIGESTSIZE	ceph_crypto.h	6;"	d
CEPH_CRYPTO_SHA1_DIGESTSIZE	ceph_crypto.h	8;"	d
CEPH_CRYPTO_SHA256_DIGESTSIZE	ceph_crypto.h	10;"	d
CEPH_CYCLES_H	Cycles.h	33;"	d
CEPH_DEBUG_H	debug.h	16;"	d
CEPH_DECAYCOUNTER_H	DecayCounter.h	16;"	d
CEPH_DNS_RESOLVE_H	dns_resolve.h	15;"	d
CEPH_DOUT_H	dout.h	17;"	d
CEPH_ERRNO_H	errno.h	2;"	d
CEPH_EXTATTR_H	xattr.h	13;"	d
CEPH_FINISHER_H	Finisher.h	16;"	d
CEPH_FORMATTER_H	Formatter.h	4;"	d
CEPH_HEARTBEATMAP_H	HeartbeatMap.h	16;"	d
CEPH_HISTOGRAM_H	histogram.h	14;"	d
CEPH_HTML_FORMATTER_H	HTMLFormatter.h	4;"	d
CEPH_INITIALIZE_H	Initialize.h	31;"	d
CEPH_JSON_H	ceph_json.h	2;"	d
CEPH_LIKELY_DOT_H	likely.h	16;"	d
CEPH_LINUX_VERSION_H	linux_version.h	2;"	d
CEPH_LOCKDEP_H	lockdep.h	16;"	d
CEPH_LOGCLIENT_H	LogClient.h	16;"	d
CEPH_LOGENTRY_H	LogEntry.h	16;"	d
CEPH_LRU_MAP_H	lru_map.h	2;"	d
CEPH_MEMORYMODEL_H	MemoryModel.h	16;"	d
CEPH_MODULE_H	module.h	14;"	d
CEPH_MUTEX_H	Mutex.h	16;"	d
CEPH_OBJ_BENCHER_H	obj_bencher.h	16;"	d
CEPH_OS_BLUESTORE_CHECKSUMMER	Checksummer.h	5;"	d
CEPH_PICK_ADDRESS_CLUSTER	pick_address.h	10;"	d
CEPH_PICK_ADDRESS_H	pick_address.h	2;"	d
CEPH_PICK_ADDRESS_PUBLIC	pick_address.h	9;"	d
CEPH_PRIORITY_CACHE_H	PriorityCache.h	16;"	d
CEPH_RANDOMCACHE_H	random_cache.hpp	18;"	d
CEPH_READAHEAD_H	Readahead.h	5;"	d
CEPH_REFCOUNTEDOBJ_H	RefCountedObj.h	16;"	d
CEPH_RGW_ESCAPE_H	escape.h	16;"	d
CEPH_RWLock_Posix__H	RWLock.h	18;"	d
CEPH_SAFE_IO	safe_io.h	16;"	d
CEPH_SCRUB_TYPES_H	scrub_types.h	5;"	d
CEPH_SECRET_H	secret.h	2;"	d
CEPH_SHAREDCACHE_H	shared_cache.hpp	16;"	d
CEPH_SHAREDPTR_REGISTRY_H	sharedptr_registry.hpp	16;"	d
CEPH_SIMPLECACHE_H	simple_cache.hpp	16;"	d
CEPH_SIMPLE_SPIN_H	simple_spin.h	16;"	d
CEPH_SYNC_FILESYSTEM_H	sync_filesystem.h	16;"	d
CEPH_Sem_Posix__H	Semaphore.h	17;"	d
CEPH_THREAD_H	Thread.h	17;"	d
CEPH_THROTTLE_H	Throttle.h	5;"	d
CEPH_TIMER_H	Timer.h	16;"	d
CEPH_TRACEPOINT_PROVIDER_H	TracepointProvider.h	5;"	d
CEPH_TRACKEDINTPTR_H	tracked_int_ptr.hpp	16;"	d
CEPH_VALGRIND_H	valgrind.h	5;"	d
CEPH_WORKQUEUE_H	WorkQueue.h	16;"	d
CINIT_FLAG_DEFER_DROP_PRIVILEGES	common_init.h	/^  CINIT_FLAG_DEFER_DROP_PRIVILEGES = 0x10,$/;"	e	enum:common_init_flags_t
CINIT_FLAG_NO_CLOSE_STDERR	common_init.h	/^  CINIT_FLAG_NO_CLOSE_STDERR = 0x4,$/;"	e	enum:common_init_flags_t
CINIT_FLAG_NO_DAEMON_ACTIONS	common_init.h	/^  CINIT_FLAG_NO_DAEMON_ACTIONS = 0x8,$/;"	e	enum:common_init_flags_t
CINIT_FLAG_NO_DEFAULT_CONFIG_FILE	common_init.h	/^  CINIT_FLAG_NO_DEFAULT_CONFIG_FILE = 0x2,$/;"	e	enum:common_init_flags_t
CINIT_FLAG_UNPRIVILEGED_DAEMON_DEFAULTS	common_init.h	/^  CINIT_FLAG_UNPRIVILEGED_DAEMON_DEFAULTS = 0x1,$/;"	e	enum:common_init_flags_t
CLOCK_MONOTONIC	ceph_time.h	28;"	d
CLOCK_MONOTONIC_COARSE	ceph_time.h	30;"	d
CLOCK_REALTIME	ceph_time.h	27;"	d
CLOCK_REALTIME_COARSE	ceph_time.h	29;"	d
CLOG_CHANNEL_AUDIT	LogEntry.h	/^static const std::string CLOG_CHANNEL_AUDIT   = "audit";$/;"	v
CLOG_CHANNEL_CLUSTER	LogEntry.h	/^static const std::string CLOG_CHANNEL_CLUSTER = "cluster";$/;"	v
CLOG_CHANNEL_DEFAULT	LogEntry.h	/^static const std::string CLOG_CHANNEL_DEFAULT = "cluster";$/;"	v
CLOG_CHANNEL_NONE	LogEntry.h	/^static const std::string CLOG_CHANNEL_NONE    = "none";$/;"	v
CLOG_CONFIG_DEFAULT_KEY	LogEntry.h	/^static const std::string CLOG_CONFIG_DEFAULT_KEY = "default";$/;"	v
CLOG_DEBUG	LogEntry.h	/^  CLOG_DEBUG = 0,$/;"	e	enum:__anon9
CLOG_ERROR	LogEntry.h	/^  CLOG_ERROR = 4,$/;"	e	enum:__anon9
CLOG_INFO	LogEntry.h	/^  CLOG_INFO = 1,$/;"	e	enum:__anon9
CLOG_SEC	LogEntry.h	/^  CLOG_SEC = 2,$/;"	e	enum:__anon9
CLOG_UNKNOWN	LogEntry.h	/^  CLOG_UNKNOWN = -1,$/;"	e	enum:__anon9
CLOG_WARN	LogEntry.h	/^  CLOG_WARN = 3,$/;"	e	enum:__anon9
CLOSE	SubProcess.h	/^    CLOSE,$/;"	e	enum:SubProcess::std_fd_op
CODE_ENVIRONMENT_DAEMON	code_environment.h	/^  CODE_ENVIRONMENT_DAEMON = 1,$/;"	e	enum:code_environment_t
CODE_ENVIRONMENT_LIBRARY	code_environment.h	/^  CODE_ENVIRONMENT_LIBRARY = 2,$/;"	e	enum:code_environment_t
CODE_ENVIRONMENT_UTILITY	code_environment.h	/^  CODE_ENVIRONMENT_UTILITY = 0,$/;"	e	enum:code_environment_t
CODE_ENVIRONMENT_UTILITY_NODOUT	code_environment.h	/^  CODE_ENVIRONMENT_UTILITY_NODOUT = 3,$/;"	e	enum:code_environment_t
COHORT_LRU_H	cohort_lru.h	14;"	d
COMMAND_TABLE_H_	CommandTable.h	16;"	d
COMMON_BLOOM_FILTER_HPP	bloom_filter.hpp	23;"	d
COMMON_CEPH_TIMER_H	ceph_timer.h	16;"	d
COMMON_CEPH_TIME_H	ceph_time.h	16;"	d
COMMON_ZIPKIN_TRACE_H	zipkin_trace.h	4;"	d
COMPARE_COUNT	random_cache.hpp	/^  static const uint64_t COMPARE_COUNT = 3;$/;"	m	class:RandomCache
CONF_METAVARIABLES	config.cc	/^static const char *CONF_METAVARIABLES[] = {$/;"	v	file:
CRC	crc32c_ppc_constants.h	9;"	d
CRC32C3X8	crc32c_aarch64.c	20;"	d	file:
CRC32C3X8	crc32c_aarch64.c	38;"	d	file:
CRC32C3X8_ZERO	crc32c_aarch64.c	25;"	d	file:
CRC32C3X8_ZERO	crc32c_aarch64.c	43;"	d	file:
CRC32C7X3X8	crc32c_aarch64.c	48;"	d	file:
CRC32C7X3X8_ZERO	crc32c_aarch64.c	58;"	d	file:
CRC32CB	crc32c_aarch64.c	18;"	d	file:
CRC32CB	crc32c_aarch64.c	36;"	d	file:
CRC32CH	crc32c_aarch64.c	17;"	d	file:
CRC32CH	crc32c_aarch64.c	35;"	d	file:
CRC32CW	crc32c_aarch64.c	16;"	d	file:
CRC32CW	crc32c_aarch64.c	34;"	d	file:
CRC32CX	crc32c_aarch64.c	15;"	d	file:
CRC32CX	crc32c_aarch64.c	33;"	d	file:
CRC_TABLE	crc32c_ppc.c	9;"	d	file:
CRYPTOPP_ENABLE_NAMESPACE_WEAK	ceph_crypto.h	13;"	d
CSUM_CRC32C	Checksummer.h	/^    CSUM_CRC32C = 4,$/;"	e	enum:Checksummer::CSumType
CSUM_CRC32C_16	Checksummer.h	/^    CSUM_CRC32C_16 = 5, \/\/ low 16 bits of crc32c$/;"	e	enum:Checksummer::CSumType
CSUM_CRC32C_8	Checksummer.h	/^    CSUM_CRC32C_8 = 6,  \/\/ low 8 bits of crc32c$/;"	e	enum:Checksummer::CSumType
CSUM_MAX	Checksummer.h	/^    CSUM_MAX,$/;"	e	enum:Checksummer::CSumType
CSUM_NONE	Checksummer.h	/^    CSUM_NONE = 1,	\/\/intentionally set to 1 to be aligned with OSDMnitor's pool_opts_t handling - it treats 0 as unset while we need to distinguish none and unset cases$/;"	e	enum:Checksummer::CSumType
CSUM_XXHASH32	Checksummer.h	/^    CSUM_XXHASH32 = 2,$/;"	e	enum:Checksummer::CSumType
CSUM_XXHASH64	Checksummer.h	/^    CSUM_XXHASH64 = 3,$/;"	e	enum:Checksummer::CSumType
CSumType	Checksummer.h	/^  enum CSumType {$/;"	g	class:Checksummer
C_Cond	Cond.h	/^  C_Cond(Cond *c, bool *d, int *r) : cond(c), done(d), rval(r) {$/;"	f	class:C_Cond
C_Cond	Cond.h	/^class C_Cond : public Context {$/;"	c
C_ContextCompletion	ContextCompletion.h	/^  C_ContextCompletion(ContextCompletion &context_completion)$/;"	f	class:ceph::C_ContextCompletion
C_ContextCompletion	ContextCompletion.h	/^class C_ContextCompletion : public Context {$/;"	c	namespace:ceph
C_OnFinisher	Finisher.h	/^  C_OnFinisher(Context *c, Finisher *f) : con(c), fin(f) {$/;"	f	class:C_OnFinisher
C_OnFinisher	Finisher.h	/^class C_OnFinisher : public Context {$/;"	c
C_OrderedThrottle	Throttle.h	/^  C_OrderedThrottle(OrderedThrottle *ordered_throttle, uint64_t tid)$/;"	f	class:C_OrderedThrottle
C_OrderedThrottle	Throttle.h	/^class C_OrderedThrottle : public Context {$/;"	c
C_QueueInWQ	WorkQueue.h	/^  C_QueueInWQ(GenContextWQ *wq, GenContext<ThreadPool::TPHandle &> *c)$/;"	f	class:C_QueueInWQ
C_QueueInWQ	WorkQueue.h	/^class C_QueueInWQ : public Context {$/;"	c
C_SafeCond	Cond.h	/^  C_SafeCond(Mutex *l, Cond *c, bool *d, int *r=0) : lock(l), cond(c), done(d), rval(r) {$/;"	f	class:C_SafeCond
C_SafeCond	Cond.h	/^class C_SafeCond : public Context {$/;"	c
C_SaferCond	Cond.h	/^  C_SaferCond() : lock("C_SaferCond"), done(false), rval(0) {}$/;"	f	class:C_SaferCond
C_SaferCond	Cond.h	/^class C_SaferCond : public Context {$/;"	c
Callback	Continuation.h	/^    Callback(Continuation *c, int stage) :$/;"	f	class:Continuation::Callback
Callback	Continuation.h	/^  class Callback : public Context {$/;"	c	class:Continuation
CephContext	ceph_context.cc	/^CephContext::CephContext(uint32_t module_type_,$/;"	f	class:CephContext
CephContext	ceph_context.h	/^class CephContext {$/;"	c
CephContextHook	ceph_context.cc	/^  explicit CephContextHook(CephContext *cct) : m_cct(cct) {}$/;"	f	class:CephContextHook
CephContextHook	ceph_context.cc	/^class CephContextHook : public AdminSocketHook {$/;"	c	file:
CephContextObs	ceph_context.cc	/^  explicit CephContextObs(CephContext *cct) : cct(cct) {}$/;"	f	class:CephContextObs
CephContextObs	ceph_context.cc	/^class CephContextObs : public md_config_obs_t {$/;"	c	file:
CephContextServiceThread	ceph_context.cc	/^  explicit CephContextServiceThread(CephContext *cct)$/;"	f	class:CephContextServiceThread
CephContextServiceThread	ceph_context.cc	/^class CephContextServiceThread : public Thread$/;"	c	file:
CephInitParameters	ceph_argparse.cc	/^CephInitParameters::CephInitParameters(uint32_t module_type_)$/;"	f	class:CephInitParameters
CephInitParameters	ceph_argparse.h	/^class CephInitParameters$/;"	c
Checksummer	Checksummer.h	/^class Checksummer {$/;"	c
Classes	PrioritizedQueue.h	/^    typedef std::map<K, ListPairs> Classes;$/;"	t	struct:PrioritizedQueue::SubQueue
Classes	mClockPriorityQueue.h	/^      typedef std::map<K, ListPairs> Classes;$/;"	t	struct:ceph::mClockQueue::SubQueue
Cleanup	shared_cache.hpp	/^    Cleanup(SharedLRU<K, V, C> *cache, K key) : cache(cache), key(key) {}$/;"	f	class:SharedLRU::Cleanup
Cleanup	shared_cache.hpp	/^  class Cleanup {$/;"	c	class:SharedLRU
CommandOp	CommandTable.h	/^  CommandOp() : tid(0), on_finish(nullptr), outbl(nullptr), outs(nullptr) {}$/;"	f	class:CommandOp
CommandOp	CommandTable.h	/^  CommandOp(const ceph_tid_t t) : tid(t), on_finish(nullptr),$/;"	f	class:CommandOp
CommandOp	CommandTable.h	/^class CommandOp$/;"	c
CommandTable	CommandTable.h	/^  CommandTable()$/;"	f	class:CommandTable
CommandTable	CommandTable.h	/^class CommandTable$/;"	c
Cond	Cond.h	/^  Cond() : waiter_mutex(NULL) {$/;"	f	class:Cond
Cond	Cond.h	/^class Cond {$/;"	c
ConfFile	ConfUtils.cc	/^ConfFile()$/;"	f	class:ConfFile
ConfFile	ConfUtils.h	/^class ConfFile {$/;"	c
ConfLine	ConfUtils.cc	/^ConfLine(const std::string &key_, const std::string &val_,$/;"	f	class:ConfLine
ConfLine	ConfUtils.h	/^class ConfLine {$/;"	c
ConfSection	ConfUtils.h	/^class ConfSection {$/;"	c
ConstIterator	bit_vector.hpp	/^                       bufferlist::const_iterator> ConstIterator;$/;"	t	class:ceph::BitVector
ConstReference	bit_vector.hpp	/^    ConstReference(bufferlist::const_iterator&& data_iterator, uint64_t shift)$/;"	f	class:ceph::BitVector::ConstReference
ConstReference	bit_vector.hpp	/^    ConstReference(const bufferlist::const_iterator& data_iterator,$/;"	f	class:ceph::BitVector::ConstReference
ConstReference	bit_vector.hpp	/^  class ConstReference : public ReferenceImpl<bufferlist::const_iterator> {$/;"	c	class:ceph::BitVector
Context	RWLock.h	/^    Context(RWLock& l, LockState s) : lock(l), state(s) {}$/;"	f	class:final::Context
Context	RWLock.h	/^    explicit Context(RWLock& l) : lock(l), state(Untaken) {}$/;"	f	class:final::Context
Context	RWLock.h	/^  class Context {$/;"	c	class:final
ContextCompletion	ContextCompletion.cc	/^ContextCompletion::ContextCompletion(Context *ctx, bool ignore_enoent)$/;"	f	class:ceph::ContextCompletion
ContextCompletion	ContextCompletion.h	/^class ContextCompletion {$/;"	c	namespace:ceph
ContextWQ	WorkQueue.h	/^  ContextWQ(const string &name, time_t ti, ThreadPool *tp)$/;"	f	class:ContextWQ
ContextWQ	WorkQueue.h	/^class ContextWQ : public ThreadPool::PointerWQ<Context> {$/;"	c
Continuation	Continuation.h	/^  Continuation(Context *c) :$/;"	f	class:Continuation
Continuation	Continuation.h	/^class Continuation {$/;"	c
CounterMap	perf_counters.h	/^          PerfCounterRef> CounterMap;$/;"	t	class:PerfCountersCollection
Cycles	Cycles.h	/^class Cycles {$/;"	c
DBL_QUOTE_JESCAPE	escape.c	115;"	d	file:
DBL_QUOTE_XESCAPE	escape.c	31;"	d	file:
DD	crc32c_intel_fast_asm.s	/^DD 0x00000000,0x39d3b296,0x73a7652c,0x4a74d7ba$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x00000000,0x6b749fb2,0xd6e93f64,0xbd9da0d6$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x00000000,0x878a92a7,0x0af953bf,0x8d73c118$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x00000000,0xbac2fd7b,0x70698c07,0xcaab717c$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x00000000,0xdd66cbbb,0xbf21e187,0x62472a3c$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x00a468a6,0xddc2a31d,0xbf858921,0x62e3429a$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x02e70245,0x856d90e2,0x081e51fa,0x8f94c35d$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x031ec53f,0x686a5a8d,0xd5f7fa5b,0xbe8365e9$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x035b8e33,0x3a883ca5,0x70fceb1f,0x492f5989$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x05234f41,0x6e57d0f3,0xd3ca7025,0xb8beef97$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x05bfdf0a,0xbf7d2271,0x75d6530d,0xcf14ae76$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x063d8a7e,0x6d4915cc,0xd0d4b51a,0xbba02aa8$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x09585bbd,0x622cc40f,0xdfb164d9,0xb4c5fb6b$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x0a469e82,0x61320130,0xdcafa1e6,0xb7db3e54$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x0b3cf695,0xd65a3d2e,0xb41d1712,0x697bdca9$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x0b7fbe14,0xb1bd436f,0x7b163213,0xc1d4cf68$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x0b989e33,0xd6fe5588,0xb4b97fb4,0x69dfb40f$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x0c7b14fc,0x670f8b4e,0xda922b98,0xb1e6b42a$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x0c97b43d,0x354406ab,0x7f30d111,0x46e36387$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x0d0c9ce9,0x8a860e4e,0x07f5cf56,0x807f5df1$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x0ec0611e,0xb4029c65,0x7ea9ed19,0xc46b1062$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x0f65d1c3,0x64114e71,0xd98ceea7,0xb2f87115$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x0fcc3a0e,0x361f8898,0x7c6b5f22,0x45b8edb4$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x0feb9eac,0x88610c0b,0x0512cd13,0x82985fb4$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x10544e12,0x2987fc84,0x63f32b3e,0x5a2099a8$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x11ae7245,0x7adaedf7,0xc7474d21,0xac33d293$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x11dde1b9,0xab1f1cc2,0x61b46dbe,0xdb7690c5$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x12b0b77a,0x79c428c8,0xc459881e,0xaf2d17ac$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x130fc021,0x2adc72b7,0x60a8a50d,0x597b179b$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x14623eb3,0xaea0c3c8,0x640bb2b4,0xdec94fcf$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x148d3d04,0x7ff9a2b6,0xc2640260,0xa9109dd2$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x15f2a77e,0x927835d9,0x1f0bf4c1,0x98816666$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x1715a53b,0x909f379c,0x1decf684,0x9a666423$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x17313c66,0xca57f7dd,0xa810dde1,0x7576165a$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x1793f83b,0x7ce76789,0xc17ac75f,0xaa0e58ed$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x179554c0,0xcaf39f7b,0xa8b4b547,0x75d27efc$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x18f629f8,0x7382b64a,0xce1f169c,0xa56b892e$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x18fe3b97,0x9f74a930,0x12076828,0x958dfa8f$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x1a1939d2,0x9d93ab75,0x10e06a6d,0x976af8ca$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x1aa25fad,0xa060a2d6,0x6acbd3aa,0xd0092ed1$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x1be8ecc7,0x709c7375,0xcd01d3a3,0xa6754c11$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x1c0dcaf3,0xc16b0148,0xa32c2b74,0x7e4ae0cf$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x1ca9a255,0xc1cf69ee,0xa38843d2,0x7eee8869$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x1cc3fa2f,0x251048b9,0x6f649f03,0x56b72d95$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x1dd566b9,0x76a1f90b,0xcb3c59dd,0xa048c66f$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x1ecba386,0x75bf3c34,0xc8229ce2,0xa3560350$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x1f1d80a7,0xa5df7ddc,0x6f740ca0,0xd5b6f1db$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x1f98741c,0x264bc68a,0x6c3f1130,0x55eca3a6$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x20a89c24,0x197b2eb2,0x530ff908,0x6adc4b9e$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x212681e9,0x9be47c92,0x514f0dee,0xeb8df095$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x23f31217,0x1a20a081,0x5054773b,0x6987c5ad$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x240ed050,0xa38442f7,0x2ef783ef,0xa97d1148$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x24165f15,0xf97094ae,0x9b37be92,0x46517529$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x24995ee3,0x9e5ba398,0x54f0d2e4,0xee322f9f$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x24b237b3,0xf9d4fc08,0x9b93d634,0x46f51d8f$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x26e9d215,0xa16340b2,0x2c1081aa,0xab9a130d$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x29024cb9,0xae88de1e,0x23fb1f06,0xa4718da1$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x2a593ffd,0x909bc286,0x5a30b3fa,0xe0f24e81$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x2be54efc,0xac6fdc5b,0x211c1d43,0xa6968fe4$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x2c3f2819,0x15ec9a8f,0x5f984d35,0x664bffa3$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x2f2aa980,0xf24c623b,0x900b4807,0x4d6d83bc$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x2f64a62a,0x16b714bc,0x5cc3c306,0x65107190$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x2f8ec126,0xf2e80a9d,0x90af20a1,0x4dc9eb1a$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x2fe6e0f7,0x95241d8c,0x5f8f6cf0,0xe54d918b$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x30fb6050,0x8a399d2b,0x4092ec57,0xfa50112c$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x30fcd236,0x092f60a0,0x435bb71a,0x7a88058c$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x31fc772e,0xb676e589,0x3b052491,0xbc8fb636$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x331b756b,0xb491e7cc,0x39e226d4,0xbe68b473$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x33276373,0xee41a8c8,0x8c0682f4,0x5160494f$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x33830bd5,0xeee5c06e,0x8ca2ea52,0x51c421e9$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x33a75c05,0x0a74ee93,0x40003929,0x79d38bbf$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x3544bf5a,0x8f864221,0x452d335d,0xffefce26$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x381b95e6,0xe57d5e5d,0x873a7461,0x5a5cbfda$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x38bffd40,0xe5d936fb,0x879e1cc7,0x5af8d77c$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x3b84de44,0x8146233f,0x4bed5243,0xf12faf38$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x3c6b660b,0x05b8d49d,0x4fcc0327,0x761fb1b1$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x3cf0ebc7,0xbb7a7960,0x3609b878,0xb1832adf$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x3e17e982,0xb99d7b25,0x34eeba3d,0xb364289a$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x3e3b014e,0x84f9fc35,0x4e528d49,0xf4907032$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x3f30e838,0x06e35aae,0x4c978d14,0x75443f82$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x40df38c3,0xc755aa64,0x4a266b7c,0xcdacf9db$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x411d5b87,0x2a69c435,0x97f464e3,0xfc80fb51$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x42039eb8,0x2977010a,0x94eaa1dc,0xff9e3e6e$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x42383a86,0xc5b2a821,0x48c16939,0xcf4bfb9e$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x424d03d2,0xf88ffea9,0x32248fd5,0x88e672ae$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x431048bf,0x9e768304,0xfc31a938,0x21576283$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x43b42019,0x9ed2eba2,0xfc95c19e,0x21f30a25$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x443e14c6,0x2f4a8b74,0x92d72ba2,0xf9a3b410$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x44bdaa1d,0x7d6e188b,0x371acf31,0x0ec97da7$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x4720d1f9,0x2c544e4b,0x91c9ee9d,0xfabd712f$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x47e6242e,0x7e3596b8,0x34414102,0x0d92f394$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x47f2dcd8,0xfd3021a3,0x379b50df,0x8d59ada4$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x482a1e20,0x71f9acb6,0x3b8d7b0c,0x025ec99a$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x482cbe2a,0x954a7591,0xf70d5fad,0x2a6b9416$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x4845003a,0x23319f88,0x9eac3f5e,0xf5d8a0ec$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x4888d68c,0x95ee1d37,0xf7a9370b,0x2acffcb0$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x4932bdc6,0xf3f040bd,0x395b31c1,0x8399ccba$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x4b5bc505,0x202f5ab7,0x9db2fa61,0xf6c665d3$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x4b719013,0x72a22285,0x38d6f53f,0x010547a9$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x4c8d62cc,0xf64f9fb7,0x3ce4eecb,0x862613b0$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x4d664f7b,0x2612d0c9,0x9b8f701f,0xf0fbefad$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x4dd3a42a,0xca59368d,0x472af795,0xc0a06532$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x4e788a44,0x250c15f6,0x9891b520,0xf3e52a92$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x4f34a66f,0xc8be34c8,0x45cdf5d0,0xc2476777$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x50b329c2,0x3bc7b670,0x865a16a6,0xed2e8914$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x5390e26b,0xe9521f10,0x23f96e6c,0x993b9317$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x53adecfd,0x38d9734f,0x8544d399,0xee304c2b$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x542174d9,0x8947bf62,0xeb00955e,0x36665ee5$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x54851c7f,0x89e3d7c4,0xeba4fdf8,0x36c23643$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x54e9e40f,0x6d3a5699,0x274e8123,0x1e9d33b5$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x552d9fbd,0xd2a70d1a,0x5fd4cc02,0xd85e5ea5$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x55906683,0x3ee4f931,0x837959e7,0xe80dc655$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x562f3d61,0xecedc01a,0x2646b166,0x9c844c1d$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x568ea3bc,0x3dfa3c0e,0x80679cd8,0xeb13036a$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x57b26a3c,0x6e61d8aa,0x24150f10,0x1dc6bd86$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x57ca9df8,0xd0400f5f,0x5d33ce47,0xdab95ce0$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x58210354,0xdfab91f3,0x52d850eb,0xd552c24c$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x587e5032,0x61ade2a4,0x2bd9351e,0x120a8788$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x58ef5c7f,0xe22da104,0x2886d078,0x92442d03$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x59eb727f,0x329fedcd,0x8f024d1b,0xe476d2a9$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x5ac60111,0xdd4c93b6,0x503f52ae,0xd7b5c009$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x5af5b740,0x318128f2,0x8c1c8824,0xe7681796$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x5b25de01,0x62f66c97,0x2882bb2d,0x115109bb$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x5cc83d3e,0x37bca28c,0x8a21025a,0xe1559de8$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x5d508375,0xe7927e0e,0x2d390f72,0x97fbf209$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x5f1d824c,0x827b49f7,0xe03c63cb,0x3d5aa870$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x5fb9eaea,0x82df2151,0xe0980b6d,0x3dfec0d6$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x5fd6f801,0x34a267b3,0x893fc765,0xe24b58d7$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x636b823b,0xd9a97f40,0x13020e3c,0xa9c0f347$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x64153639,0x5dc684af,0x17b25315,0x2e61e183$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x64d1e893,0xe35b7a34,0x6e28bb2c,0xe9a2298b$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x6636ead6,0xe1bc7871,0x6ccfb969,0xeb452bce$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x66d45d31,0xdc16a04a,0x16bdd136,0xac7f2c4d$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x670617aa,0xba60dc11,0xd827f62d,0x05413d96$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x674eb80a,0x5e9d0a9c,0x14e9dd26,0x2d3a6fb0$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x67a27f0c,0xbac4b4b7,0xd8839e8b,0x05e55530$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x68143c2f,0xd2d6c154,0x187db028,0xa2bf4d53$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x68828204,0x51513092,0x1b25e728,0x22f655be$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x69dd747a,0xee57e6dd,0x632427c5,0xe4aeb562$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x6b3a763f,0xecb0e498,0x61c32580,0xe649b727$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x6bd90c37,0x520abea1,0x187e691b,0x21addb8d$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x6c3ae13f,0xb15c2a84,0xd31b00b8,0x0e7dcb03$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x6c9e8999,0xb1f84222,0xd3bf681e,0x0ed9a3a5$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x6dabe325,0xd7691e5e,0x1dc26f22,0xa7009259$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x70372bcc,0xad51e077,0xcf16ca4b,0x127001f0$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x7093436a,0xadf588d1,0xcfb2a2ed,0x12d46956$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x71234fed,0xf6a9dd4a,0x7bda1c52,0xfc508ef5$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x72b66382,0xc8749ef9,0x02dfef85,0xb81d12fe$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x73c44da8,0xf44edf0f,0x793d1e17,0xfeb78cb0$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x7441782b,0x4d92cabd,0x07e61d07,0x3e35af91$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x7709bc88,0xcdcb41f3,0x0760308f,0xbda2cdf4$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x771af618,0x4ec9448e,0x04bd9334,0x3d6e21a2$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x78d6cc16,0x41057e80,0x0b71a93a,0x32a21bac$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x79c9dd96,0xc30b20ed,0x09a05191,0xb362acea$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x7b0bdd59,0xa66d16e2,0xc42a3cde,0x194cf765$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x7b8d4225,0x425ef0b3,0x082a2709,0x31f9959f$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x7bafb5ff,0xa6c97e44,0xc48e5478,0x19e89fc3$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x7c2fd304,0xfba541a3,0x76d680bb,0xf15c121c$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x7c76029c,0xc6b4ffe7,0x0c1f8e9b,0xb6dd73e0$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x7ec8d141,0xf94243e6,0x743182fe,0xf3bb1059$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x80007252,0xb9d3c0c4,0xf3a7177e,0xca74a5e8$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x835bfc61,0xba884ef7,0xf0fc994d,0xc92f2bdb$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x83b89a35,0x397a674e,0xf3d11632,0x4913eb49$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x8470750c,0x03fae7ab,0x8e8926b3,0x0903b414$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x8607453f,0x3cc5b844,0xf66ec938,0x4cac3443$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x86977749,0x011de5ee,0x8c6e24f6,0x0be4b651$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x87684032,0x5a0e8b89,0x3849a1b5,0xe52f6a0e$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x87cc2894,0x5aaae32f,0x38edc913,0xe58b02a8$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x88c72421,0x3205d95a,0xf8aea826,0x426c555d$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x897ce9e5,0x0ef67b42,0x8385ba5a,0x040f28fd$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x8b9beba0,0x0c117907,0x8162b81f,0x06e82ab8$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x8c54b6a7,0x51327d1c,0x33755720,0xee139c9b$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x8c97c66f,0xb54474f9,0xff30a343,0xc6e311d5$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x8cf0de01,0x519615ba,0x33d13f86,0xeeb7f43d$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x8d78fb2b,0x37ba0650,0xfd11772c,0x47d38a57$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x8fcc485c,0xb61ffaca,0xfc6b2d70,0xc5b89fe6$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x90543c40,0xa9878ed6,0xe3f3596c,0xda20ebfa$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x90597c54,0x4d3fb7ef,0x2f789dd3,0xf21e5668$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x90fd14f2,0x4d9bdf49,0x2fdcf575,0xf2ba3ece$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x9182d272,0x160840d5,0x9b7b81cd,0x1cf1136a$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x92657b8c,0x28a786f7,0xe20cf78b,0x58ce0af0$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x930fb273,0xaadc00e5,0xe0a8d75f,0xd97b65c9$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x9365d037,0x14ef4290,0x999c8388,0x1e16112f$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x97daa486,0x2d1859fd,0xe7b32881,0x5d71d5fa$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x991ac598,0x23d838e3,0xe973499f,0x53b1b4e4$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x9b658ac1,0x4603417a,0x24446b46,0xf922a0fd$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x9bc1e267,0x46a729dc,0x24e003e0,0xf986c85b$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x9c8e4e9b,0x1b04dc3c,0x96771d24,0x11fd8f83$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x9ca51a92,0x2667e7e9,0xeccc9695,0x560e6bee$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x9cc3887d,0xa5103aeb,0xef64ed51,0xd6b75fc7$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x9e694cde,0x19e3de79,0x94901f61,0x131a8dc6$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0x9f98064e,0xa64bb4d8,0xec3f6362,0xd5ecd1f4$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xa07ea55c,0x27f437fb,0xaa87f6e3,0x2d0d6444$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xa0a8ee76,0x997b5ce0,0xd30f8b5a,0xeadc39cc$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xa1665384,0xca12cc36,0x778f6ce0,0x1cfbf352$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xa27896bb,0xc90c0909,0x7491a9df,0x1fe5366d$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xa299a719,0x251335be,0xa860f4a6,0x2fea6601$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xa29e1bdc,0x185ce6a7,0xd2f797db,0x68356aa0$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xa37e1f27,0x7e18d49c,0x1c5ffea0,0xc139351b$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xa3da7781,0x7ebcbc3a,0x1cfb9606,0xc19d5dbd$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xa3f36045,0x9a20d2d3,0xd0540569,0xe987b7ff$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xa4451cc5,0xcf318377,0x72ac23a1,0x19d8bc13$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xa721c4d6,0x1de339ad,0xd74848d1,0x6d8ab5aa$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xa75bd9fa,0xcc2f4648,0x71b2e69e,0x1ac6792c$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xa83e0839,0xc34a978b,0x7ed7375d,0x15a3a8ef$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xa842e9b2,0x75242209,0x17630835,0xca05c38e$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xa8e68114,0x75804aaf,0x17c76093,0xcaa1ab28$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xa9e1a5c8,0x132358b3,0xd98829cf,0x634ad4b4$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xab20cd06,0xc05452b4,0x7dc9f262,0x16bd6dd0$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xac3f5a4b,0x95ece8dd,0xdf983f67,0xe64b8df1$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xac5e7ac2,0x169c87b9,0xdc37f6c5,0x66f50bbe$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xad1d4778,0xc669d8ca,0x7bf4781c,0x1080e7ae$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xad7239b5,0x2af8ab12,0xa78b6a0a,0x2001f8ad$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xae038247,0xc5771df5,0x78eabd23,0x139e2291$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xaf64d478,0x96b766ee,0xdcc3b154,0xe51003c2$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xaf953bf0,0x281fa957,0xa56c684f,0x22e6fae8$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xb0c821c1,0xdbbcbe73,0x66211ea5,0x0d558117$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xb0fca064,0x892f12f2,0xc35bc548,0xfa8877de$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xb343fa65,0x0981071e,0xc32a7662,0x79e88b19$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xb3a72e57,0x8a749cc1,0xc0004b7b,0xf9d3f9ed$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xb3d6e4fe,0xd8a27b4c,0x653fdb9a,0x0e4b4428$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xb44f2341,0x6929e8fa,0x0b6ec2c6,0xd608097d$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xb4eb4be7,0x698d805c,0x0bcaaa60,0xd6ac61db$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xb58c0222,0x32069085,0xbf75519d,0x38ffc33a$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xb5eb6e80,0xde9ff132,0x630251e4,0x0876ce56$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xb6f5abbf,0xdd81340d,0x601c94db,0x0b680b69$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xb6fc256f,0x0c3ed814,0xc695a968,0x7c575413$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xb76b0067,0x30e192c0,0xbd9253d8,0x3a18c17f$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xb83c4471,0x02feb90a,0xc855c876,0x7297350d$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xb8809ecb,0x3f0a0c6c,0xb279cd74,0x35f35fd3$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xb9907a7c,0xd2e4e5ce,0x6f794518,0x040ddaaa$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xba679c8e,0x3ded0e29,0xb09ecf31,0x37145d96$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xba8ebf43,0xd1fa20f1,0x6c678027,0x07131f95$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xbc6b1459,0x85b8a6cf,0xcfcc7175,0xf61fc3e3$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xbcb3353d,0xd7c7aa8f,0x6a5a0a59,0x012e95eb$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xbd839b7b,0x07416600,0xcdea177c,0x7728ea07$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xbf309a6a,0x86e328fc,0xcc97ff46,0xf5444dd0$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xbf73d5d4,0x62151e6f,0x00523453,0xdd34ffe8$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xbfadf002,0xd4d96fb0,0x6944cf66,0x023050d4$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xbfd7bd72,0x62b176c9,0x00f65cf5,0xdd90974e$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xc1f599e7,0x7b37649c,0xb19c15e0,0x0b5ee89b$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xc44a46ed,0x7e88bb96,0xb423caea,0x0ee13791$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xc478088d,0x191ec336,0x7b59e90a,0xa63f22b1$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xc4af4dcf,0x4325df68,0xce561e70,0x49dc8cd7$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xc4bdd84f,0xfd6e6ad9,0xb71abd63,0x8ec90ff5$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xc4dc602b,0x19baab90,0x7bfd81ac,0xa69b4a17$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xc6484f8a,0x41c2dd2d,0xccb11c35,0x4b3b8e92$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xc7e6567c,0xfe35e4ea,0xb4413350,0x8d9281c6$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xc82a6c72,0xf1f9dee4,0xbb8d095e,0x825ebbc8$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xc9a3d126,0x4e294381,0xc35a8299,0x44d0103e$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xca8a27f3,0x7048da88,0xbae3abf4,0x0021568f$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xcb44d363,0x4cce41c4,0xc1bd80dc,0x4637127b$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xcb71e241,0xf2a250d7,0xb8d6876d,0x810535fb$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xcf35f8f9,0x75f70582,0xbf5c74fe,0x059e8985$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xcf44fe18,0x122235a3,0x70651f9f,0xad03d424$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xcfe096be,0x12865d05,0x70c17739,0xada7bc82$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xd028785e,0x6aea8525,0xa041f459,0x1a830922$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xd15deab1,0x56d77816,0xdba4b90e,0x5c2e2ba9$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xd34934eb,0x0e2fff50,0x6c68d56c,0xb10e1ed7$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xd3bae8f4,0x54307a53,0xd943bb4b,0x5ec929ec$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xd3ed5c4d,0x0e8b97f6,0x6cccbdca,0xb1aa7671$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xd4e9965d,0xed3a24cb,0xa74ef371,0x9e9d41e7$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xd597a754,0x6f555a2f,0xa5fe2b53,0x1f3cd628$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xd7b2186e,0xee61aaf8,0xa4157d42,0x9dc6cfd4$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xd875c27e,0x051309c5,0x675423f9,0xba32e842$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xd87e2260,0xe1ad90f6,0xabd9474c,0x920af5da$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xd8d1aad8,0x05b76163,0x67f04b5f,0xba9680e4$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xdb25ac53,0xe2f61ec5,0xa882c97f,0x91517be9$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xdb57c64a,0x61953b31,0xab3e4a4d,0x11fcb736$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xdc517658,0x5bdbe4ff,0xd6a825e7,0x5122b740$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xdeb6741d,0x593ce6ba,0xd44f27a2,0x53c5b505$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xdee81940,0x642ae43b,0xae819547,0x1443683c$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xe06e5798,0x3d089c23,0x5f4fb61f,0x82297da4$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xe07b0803,0x8b0f97b1,0x36923767,0x5de6a8d5$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xe0a19d9f,0x672b0f38,0xea58ce20,0x6dd25c87$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xe0ca3f3e,0x3dacf485,0x5febdeb9,0x828d1502$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xe0d3180e,0x5a11e575,0x90ba9409,0x2a786972$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xe2469fda,0x65cc0d7d,0xe8bfcc65,0x6f355ec2$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xe365cd3c,0x8811528e,0x358cf258,0x5ef86dea$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xe415446b,0xddc6f6fd,0x97b22147,0xae6193d1$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xe5584742,0x8e2cd8f0,0x33b17826,0x58c5e794$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xe56cc704,0x5fae3a7f,0x95054b03,0x2fc7b678$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xe646827d,0x8d321dcf,0x30afbd19,0x5bdb22ab$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xe74eca58,0xde9d78ce,0x94e9af74,0xad3a1de2$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xe882f056,0xd15142c0,0x9b25957a,0xa2f627ec$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xe92353be,0x8257cc0c,0x3fca6cda,0x54bef368$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xea3d9681,0x81490933,0x3cd4a9e5,0x57a03657$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xeb52a10d,0x36346ab6,0x5473408a,0x89158b31$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xebaca61a,0x516e5b61,0x9bc52a1d,0x2107d766$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xebd97e65,0xd20accf3,0x987e1b49,0xa1ada9df$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xebf6c9ab,0x36900210,0x54d7282c,0x89b1e397$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xec001cff,0x8774834d,0x3ae9239b,0x519dbc29$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xedad0176,0x6a2793d1,0xe75452c9,0x60dec06e$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xee137910,0x54d1846b,0x9e7af517,0x24b8086c$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xef1ed9c0,0x846a4672,0x39f7e6a4,0x52837916$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xef4a0333,0x68c09194,0xe5b3508c,0x6239c22b$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xf10ef9b7,0x4bcc04cc,0x816775b0,0x3ba588cb$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xf1d57a46,0x9aa1e5f4,0x273c4522,0x4c48da90$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xf2cbbf79,0x99bf20cb,0x2422801d,0x4f561faf$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xf4410a79,0xcd92b8ef,0x87e66f55,0xbe35ddc3$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xf4b126bd,0x4e73dbc6,0x84d8aaba,0x3e1a57c1$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xf4f63507,0x9f82aab5,0x221f0a63,0x496b95d1$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xf5533ae1,0x72d9a846,0xffaa695e,0x7820fbf9$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xf71a844a,0xcec936dc,0x84bde166,0xbd6e53f0$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xf75f6bfe,0x2a39a045,0x487e8a79,0x951841c2$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xf7b438a4,0x703eaa03,0xfd4d6b1b,0x7ac7f9bc$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xf7e8f038,0x9c9c6f8a,0x2101cf5c,0x4a7550ee$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xf7fb0358,0x2a9dc8e3,0x48dae2df,0x95bc2964$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xf85fa608,0x7fd534af,0xf2a6f5b7,0x752c6710$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xf88d21fb,0x93f9be49,0x2e641e9f,0x4510812d$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xf8d6be44,0xc1050cd2,0x8b71db68,0xb2a269fe$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xfa7147a3,0x40b3bad8,0x8a18cba4,0x30da36df$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xfab8a44d,0x7d3236ea,0xf041f7f2,0x77cb6555$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xfb8d3077,0xc25e82e1,0x882a555b,0xb1f9e7cd$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xfb93e4c4,0x90e77b76,0x2d7adba0,0x460e4412$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xfc639d6b,0x210556d0,0x43427cec,0x9e24b757$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xfcc7f5cd,0x21a13e76,0x43e6144a,0x9e80dff1$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xfdae6eba,0x96daf108,0x2b4751de,0x4033ce6c$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xfeb0ab85,0x95c43437,0x285994e1,0x432d0b53$/;"	l
DD	crc32c_intel_fast_asm.s	/^DD 0xffce98a9,0x450c65d2,0x8fa714ae,0x3565e9d5$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x00000000,0x39d3b296,0x73a7652c,0x4a74d7ba$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x00000000,0x6b749fb2,0xd6e93f64,0xbd9da0d6$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x00000000,0x878a92a7,0x0af953bf,0x8d73c118$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x00000000,0xbac2fd7b,0x70698c07,0xcaab717c$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x00000000,0xdd66cbbb,0xbf21e187,0x62472a3c$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x00a468a6,0xddc2a31d,0xbf858921,0x62e3429a$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x02e70245,0x856d90e2,0x081e51fa,0x8f94c35d$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x031ec53f,0x686a5a8d,0xd5f7fa5b,0xbe8365e9$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x035b8e33,0x3a883ca5,0x70fceb1f,0x492f5989$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x05234f41,0x6e57d0f3,0xd3ca7025,0xb8beef97$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x05bfdf0a,0xbf7d2271,0x75d6530d,0xcf14ae76$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x063d8a7e,0x6d4915cc,0xd0d4b51a,0xbba02aa8$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x09585bbd,0x622cc40f,0xdfb164d9,0xb4c5fb6b$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x0a469e82,0x61320130,0xdcafa1e6,0xb7db3e54$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x0b3cf695,0xd65a3d2e,0xb41d1712,0x697bdca9$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x0b7fbe14,0xb1bd436f,0x7b163213,0xc1d4cf68$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x0b989e33,0xd6fe5588,0xb4b97fb4,0x69dfb40f$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x0c7b14fc,0x670f8b4e,0xda922b98,0xb1e6b42a$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x0c97b43d,0x354406ab,0x7f30d111,0x46e36387$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x0d0c9ce9,0x8a860e4e,0x07f5cf56,0x807f5df1$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x0ec0611e,0xb4029c65,0x7ea9ed19,0xc46b1062$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x0f65d1c3,0x64114e71,0xd98ceea7,0xb2f87115$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x0fcc3a0e,0x361f8898,0x7c6b5f22,0x45b8edb4$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x0feb9eac,0x88610c0b,0x0512cd13,0x82985fb4$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x10544e12,0x2987fc84,0x63f32b3e,0x5a2099a8$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x11ae7245,0x7adaedf7,0xc7474d21,0xac33d293$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x11dde1b9,0xab1f1cc2,0x61b46dbe,0xdb7690c5$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x12b0b77a,0x79c428c8,0xc459881e,0xaf2d17ac$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x130fc021,0x2adc72b7,0x60a8a50d,0x597b179b$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x14623eb3,0xaea0c3c8,0x640bb2b4,0xdec94fcf$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x148d3d04,0x7ff9a2b6,0xc2640260,0xa9109dd2$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x15f2a77e,0x927835d9,0x1f0bf4c1,0x98816666$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x1715a53b,0x909f379c,0x1decf684,0x9a666423$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x17313c66,0xca57f7dd,0xa810dde1,0x7576165a$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x1793f83b,0x7ce76789,0xc17ac75f,0xaa0e58ed$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x179554c0,0xcaf39f7b,0xa8b4b547,0x75d27efc$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x18f629f8,0x7382b64a,0xce1f169c,0xa56b892e$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x18fe3b97,0x9f74a930,0x12076828,0x958dfa8f$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x1a1939d2,0x9d93ab75,0x10e06a6d,0x976af8ca$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x1aa25fad,0xa060a2d6,0x6acbd3aa,0xd0092ed1$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x1be8ecc7,0x709c7375,0xcd01d3a3,0xa6754c11$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x1c0dcaf3,0xc16b0148,0xa32c2b74,0x7e4ae0cf$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x1ca9a255,0xc1cf69ee,0xa38843d2,0x7eee8869$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x1cc3fa2f,0x251048b9,0x6f649f03,0x56b72d95$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x1dd566b9,0x76a1f90b,0xcb3c59dd,0xa048c66f$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x1ecba386,0x75bf3c34,0xc8229ce2,0xa3560350$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x1f1d80a7,0xa5df7ddc,0x6f740ca0,0xd5b6f1db$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x1f98741c,0x264bc68a,0x6c3f1130,0x55eca3a6$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x20a89c24,0x197b2eb2,0x530ff908,0x6adc4b9e$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x212681e9,0x9be47c92,0x514f0dee,0xeb8df095$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x23f31217,0x1a20a081,0x5054773b,0x6987c5ad$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x240ed050,0xa38442f7,0x2ef783ef,0xa97d1148$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x24165f15,0xf97094ae,0x9b37be92,0x46517529$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x24995ee3,0x9e5ba398,0x54f0d2e4,0xee322f9f$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x24b237b3,0xf9d4fc08,0x9b93d634,0x46f51d8f$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x26e9d215,0xa16340b2,0x2c1081aa,0xab9a130d$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x29024cb9,0xae88de1e,0x23fb1f06,0xa4718da1$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x2a593ffd,0x909bc286,0x5a30b3fa,0xe0f24e81$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x2be54efc,0xac6fdc5b,0x211c1d43,0xa6968fe4$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x2c3f2819,0x15ec9a8f,0x5f984d35,0x664bffa3$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x2f2aa980,0xf24c623b,0x900b4807,0x4d6d83bc$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x2f64a62a,0x16b714bc,0x5cc3c306,0x65107190$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x2f8ec126,0xf2e80a9d,0x90af20a1,0x4dc9eb1a$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x2fe6e0f7,0x95241d8c,0x5f8f6cf0,0xe54d918b$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x30fb6050,0x8a399d2b,0x4092ec57,0xfa50112c$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x30fcd236,0x092f60a0,0x435bb71a,0x7a88058c$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x31fc772e,0xb676e589,0x3b052491,0xbc8fb636$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x331b756b,0xb491e7cc,0x39e226d4,0xbe68b473$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x33276373,0xee41a8c8,0x8c0682f4,0x5160494f$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x33830bd5,0xeee5c06e,0x8ca2ea52,0x51c421e9$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x33a75c05,0x0a74ee93,0x40003929,0x79d38bbf$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x3544bf5a,0x8f864221,0x452d335d,0xffefce26$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x381b95e6,0xe57d5e5d,0x873a7461,0x5a5cbfda$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x38bffd40,0xe5d936fb,0x879e1cc7,0x5af8d77c$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x3b84de44,0x8146233f,0x4bed5243,0xf12faf38$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x3c6b660b,0x05b8d49d,0x4fcc0327,0x761fb1b1$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x3cf0ebc7,0xbb7a7960,0x3609b878,0xb1832adf$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x3e17e982,0xb99d7b25,0x34eeba3d,0xb364289a$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x3e3b014e,0x84f9fc35,0x4e528d49,0xf4907032$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x3f30e838,0x06e35aae,0x4c978d14,0x75443f82$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x40df38c3,0xc755aa64,0x4a266b7c,0xcdacf9db$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x411d5b87,0x2a69c435,0x97f464e3,0xfc80fb51$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x42039eb8,0x2977010a,0x94eaa1dc,0xff9e3e6e$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x42383a86,0xc5b2a821,0x48c16939,0xcf4bfb9e$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x424d03d2,0xf88ffea9,0x32248fd5,0x88e672ae$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x431048bf,0x9e768304,0xfc31a938,0x21576283$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x43b42019,0x9ed2eba2,0xfc95c19e,0x21f30a25$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x443e14c6,0x2f4a8b74,0x92d72ba2,0xf9a3b410$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x44bdaa1d,0x7d6e188b,0x371acf31,0x0ec97da7$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x4720d1f9,0x2c544e4b,0x91c9ee9d,0xfabd712f$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x47e6242e,0x7e3596b8,0x34414102,0x0d92f394$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x47f2dcd8,0xfd3021a3,0x379b50df,0x8d59ada4$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x482a1e20,0x71f9acb6,0x3b8d7b0c,0x025ec99a$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x482cbe2a,0x954a7591,0xf70d5fad,0x2a6b9416$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x4845003a,0x23319f88,0x9eac3f5e,0xf5d8a0ec$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x4888d68c,0x95ee1d37,0xf7a9370b,0x2acffcb0$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x4932bdc6,0xf3f040bd,0x395b31c1,0x8399ccba$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x4b5bc505,0x202f5ab7,0x9db2fa61,0xf6c665d3$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x4b719013,0x72a22285,0x38d6f53f,0x010547a9$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x4c8d62cc,0xf64f9fb7,0x3ce4eecb,0x862613b0$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x4d664f7b,0x2612d0c9,0x9b8f701f,0xf0fbefad$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x4dd3a42a,0xca59368d,0x472af795,0xc0a06532$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x4e788a44,0x250c15f6,0x9891b520,0xf3e52a92$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x4f34a66f,0xc8be34c8,0x45cdf5d0,0xc2476777$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x50b329c2,0x3bc7b670,0x865a16a6,0xed2e8914$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x5390e26b,0xe9521f10,0x23f96e6c,0x993b9317$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x53adecfd,0x38d9734f,0x8544d399,0xee304c2b$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x542174d9,0x8947bf62,0xeb00955e,0x36665ee5$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x54851c7f,0x89e3d7c4,0xeba4fdf8,0x36c23643$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x54e9e40f,0x6d3a5699,0x274e8123,0x1e9d33b5$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x552d9fbd,0xd2a70d1a,0x5fd4cc02,0xd85e5ea5$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x55906683,0x3ee4f931,0x837959e7,0xe80dc655$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x562f3d61,0xecedc01a,0x2646b166,0x9c844c1d$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x568ea3bc,0x3dfa3c0e,0x80679cd8,0xeb13036a$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x57b26a3c,0x6e61d8aa,0x24150f10,0x1dc6bd86$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x57ca9df8,0xd0400f5f,0x5d33ce47,0xdab95ce0$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x58210354,0xdfab91f3,0x52d850eb,0xd552c24c$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x587e5032,0x61ade2a4,0x2bd9351e,0x120a8788$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x58ef5c7f,0xe22da104,0x2886d078,0x92442d03$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x59eb727f,0x329fedcd,0x8f024d1b,0xe476d2a9$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x5ac60111,0xdd4c93b6,0x503f52ae,0xd7b5c009$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x5af5b740,0x318128f2,0x8c1c8824,0xe7681796$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x5b25de01,0x62f66c97,0x2882bb2d,0x115109bb$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x5cc83d3e,0x37bca28c,0x8a21025a,0xe1559de8$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x5d508375,0xe7927e0e,0x2d390f72,0x97fbf209$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x5f1d824c,0x827b49f7,0xe03c63cb,0x3d5aa870$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x5fb9eaea,0x82df2151,0xe0980b6d,0x3dfec0d6$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x5fd6f801,0x34a267b3,0x893fc765,0xe24b58d7$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x636b823b,0xd9a97f40,0x13020e3c,0xa9c0f347$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x64153639,0x5dc684af,0x17b25315,0x2e61e183$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x64d1e893,0xe35b7a34,0x6e28bb2c,0xe9a2298b$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x6636ead6,0xe1bc7871,0x6ccfb969,0xeb452bce$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x66d45d31,0xdc16a04a,0x16bdd136,0xac7f2c4d$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x670617aa,0xba60dc11,0xd827f62d,0x05413d96$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x674eb80a,0x5e9d0a9c,0x14e9dd26,0x2d3a6fb0$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x67a27f0c,0xbac4b4b7,0xd8839e8b,0x05e55530$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x68143c2f,0xd2d6c154,0x187db028,0xa2bf4d53$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x68828204,0x51513092,0x1b25e728,0x22f655be$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x69dd747a,0xee57e6dd,0x632427c5,0xe4aeb562$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x6b3a763f,0xecb0e498,0x61c32580,0xe649b727$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x6bd90c37,0x520abea1,0x187e691b,0x21addb8d$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x6c3ae13f,0xb15c2a84,0xd31b00b8,0x0e7dcb03$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x6c9e8999,0xb1f84222,0xd3bf681e,0x0ed9a3a5$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x6dabe325,0xd7691e5e,0x1dc26f22,0xa7009259$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x70372bcc,0xad51e077,0xcf16ca4b,0x127001f0$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x7093436a,0xadf588d1,0xcfb2a2ed,0x12d46956$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x71234fed,0xf6a9dd4a,0x7bda1c52,0xfc508ef5$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x72b66382,0xc8749ef9,0x02dfef85,0xb81d12fe$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x73c44da8,0xf44edf0f,0x793d1e17,0xfeb78cb0$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x7441782b,0x4d92cabd,0x07e61d07,0x3e35af91$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x7709bc88,0xcdcb41f3,0x0760308f,0xbda2cdf4$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x771af618,0x4ec9448e,0x04bd9334,0x3d6e21a2$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x78d6cc16,0x41057e80,0x0b71a93a,0x32a21bac$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x79c9dd96,0xc30b20ed,0x09a05191,0xb362acea$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x7b0bdd59,0xa66d16e2,0xc42a3cde,0x194cf765$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x7b8d4225,0x425ef0b3,0x082a2709,0x31f9959f$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x7bafb5ff,0xa6c97e44,0xc48e5478,0x19e89fc3$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x7c2fd304,0xfba541a3,0x76d680bb,0xf15c121c$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x7c76029c,0xc6b4ffe7,0x0c1f8e9b,0xb6dd73e0$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x7ec8d141,0xf94243e6,0x743182fe,0xf3bb1059$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x80007252,0xb9d3c0c4,0xf3a7177e,0xca74a5e8$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x835bfc61,0xba884ef7,0xf0fc994d,0xc92f2bdb$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x83b89a35,0x397a674e,0xf3d11632,0x4913eb49$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x8470750c,0x03fae7ab,0x8e8926b3,0x0903b414$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x8607453f,0x3cc5b844,0xf66ec938,0x4cac3443$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x86977749,0x011de5ee,0x8c6e24f6,0x0be4b651$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x87684032,0x5a0e8b89,0x3849a1b5,0xe52f6a0e$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x87cc2894,0x5aaae32f,0x38edc913,0xe58b02a8$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x88c72421,0x3205d95a,0xf8aea826,0x426c555d$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x897ce9e5,0x0ef67b42,0x8385ba5a,0x040f28fd$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x8b9beba0,0x0c117907,0x8162b81f,0x06e82ab8$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x8c54b6a7,0x51327d1c,0x33755720,0xee139c9b$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x8c97c66f,0xb54474f9,0xff30a343,0xc6e311d5$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x8cf0de01,0x519615ba,0x33d13f86,0xeeb7f43d$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x8d78fb2b,0x37ba0650,0xfd11772c,0x47d38a57$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x8fcc485c,0xb61ffaca,0xfc6b2d70,0xc5b89fe6$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x90543c40,0xa9878ed6,0xe3f3596c,0xda20ebfa$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x90597c54,0x4d3fb7ef,0x2f789dd3,0xf21e5668$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x90fd14f2,0x4d9bdf49,0x2fdcf575,0xf2ba3ece$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x9182d272,0x160840d5,0x9b7b81cd,0x1cf1136a$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x92657b8c,0x28a786f7,0xe20cf78b,0x58ce0af0$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x930fb273,0xaadc00e5,0xe0a8d75f,0xd97b65c9$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x9365d037,0x14ef4290,0x999c8388,0x1e16112f$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x97daa486,0x2d1859fd,0xe7b32881,0x5d71d5fa$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x991ac598,0x23d838e3,0xe973499f,0x53b1b4e4$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x9b658ac1,0x4603417a,0x24446b46,0xf922a0fd$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x9bc1e267,0x46a729dc,0x24e003e0,0xf986c85b$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x9c8e4e9b,0x1b04dc3c,0x96771d24,0x11fd8f83$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x9ca51a92,0x2667e7e9,0xeccc9695,0x560e6bee$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x9cc3887d,0xa5103aeb,0xef64ed51,0xd6b75fc7$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x9e694cde,0x19e3de79,0x94901f61,0x131a8dc6$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0x9f98064e,0xa64bb4d8,0xec3f6362,0xd5ecd1f4$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xa07ea55c,0x27f437fb,0xaa87f6e3,0x2d0d6444$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xa0a8ee76,0x997b5ce0,0xd30f8b5a,0xeadc39cc$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xa1665384,0xca12cc36,0x778f6ce0,0x1cfbf352$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xa27896bb,0xc90c0909,0x7491a9df,0x1fe5366d$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xa299a719,0x251335be,0xa860f4a6,0x2fea6601$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xa29e1bdc,0x185ce6a7,0xd2f797db,0x68356aa0$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xa37e1f27,0x7e18d49c,0x1c5ffea0,0xc139351b$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xa3da7781,0x7ebcbc3a,0x1cfb9606,0xc19d5dbd$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xa3f36045,0x9a20d2d3,0xd0540569,0xe987b7ff$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xa4451cc5,0xcf318377,0x72ac23a1,0x19d8bc13$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xa721c4d6,0x1de339ad,0xd74848d1,0x6d8ab5aa$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xa75bd9fa,0xcc2f4648,0x71b2e69e,0x1ac6792c$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xa83e0839,0xc34a978b,0x7ed7375d,0x15a3a8ef$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xa842e9b2,0x75242209,0x17630835,0xca05c38e$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xa8e68114,0x75804aaf,0x17c76093,0xcaa1ab28$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xa9e1a5c8,0x132358b3,0xd98829cf,0x634ad4b4$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xab20cd06,0xc05452b4,0x7dc9f262,0x16bd6dd0$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xac3f5a4b,0x95ece8dd,0xdf983f67,0xe64b8df1$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xac5e7ac2,0x169c87b9,0xdc37f6c5,0x66f50bbe$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xad1d4778,0xc669d8ca,0x7bf4781c,0x1080e7ae$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xad7239b5,0x2af8ab12,0xa78b6a0a,0x2001f8ad$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xae038247,0xc5771df5,0x78eabd23,0x139e2291$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xaf64d478,0x96b766ee,0xdcc3b154,0xe51003c2$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xaf953bf0,0x281fa957,0xa56c684f,0x22e6fae8$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xb0c821c1,0xdbbcbe73,0x66211ea5,0x0d558117$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xb0fca064,0x892f12f2,0xc35bc548,0xfa8877de$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xb343fa65,0x0981071e,0xc32a7662,0x79e88b19$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xb3a72e57,0x8a749cc1,0xc0004b7b,0xf9d3f9ed$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xb3d6e4fe,0xd8a27b4c,0x653fdb9a,0x0e4b4428$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xb44f2341,0x6929e8fa,0x0b6ec2c6,0xd608097d$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xb4eb4be7,0x698d805c,0x0bcaaa60,0xd6ac61db$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xb58c0222,0x32069085,0xbf75519d,0x38ffc33a$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xb5eb6e80,0xde9ff132,0x630251e4,0x0876ce56$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xb6f5abbf,0xdd81340d,0x601c94db,0x0b680b69$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xb6fc256f,0x0c3ed814,0xc695a968,0x7c575413$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xb76b0067,0x30e192c0,0xbd9253d8,0x3a18c17f$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xb83c4471,0x02feb90a,0xc855c876,0x7297350d$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xb8809ecb,0x3f0a0c6c,0xb279cd74,0x35f35fd3$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xb9907a7c,0xd2e4e5ce,0x6f794518,0x040ddaaa$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xba679c8e,0x3ded0e29,0xb09ecf31,0x37145d96$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xba8ebf43,0xd1fa20f1,0x6c678027,0x07131f95$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xbc6b1459,0x85b8a6cf,0xcfcc7175,0xf61fc3e3$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xbcb3353d,0xd7c7aa8f,0x6a5a0a59,0x012e95eb$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xbd839b7b,0x07416600,0xcdea177c,0x7728ea07$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xbf309a6a,0x86e328fc,0xcc97ff46,0xf5444dd0$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xbf73d5d4,0x62151e6f,0x00523453,0xdd34ffe8$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xbfadf002,0xd4d96fb0,0x6944cf66,0x023050d4$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xbfd7bd72,0x62b176c9,0x00f65cf5,0xdd90974e$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xc1f599e7,0x7b37649c,0xb19c15e0,0x0b5ee89b$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xc44a46ed,0x7e88bb96,0xb423caea,0x0ee13791$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xc478088d,0x191ec336,0x7b59e90a,0xa63f22b1$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xc4af4dcf,0x4325df68,0xce561e70,0x49dc8cd7$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xc4bdd84f,0xfd6e6ad9,0xb71abd63,0x8ec90ff5$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xc4dc602b,0x19baab90,0x7bfd81ac,0xa69b4a17$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xc6484f8a,0x41c2dd2d,0xccb11c35,0x4b3b8e92$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xc7e6567c,0xfe35e4ea,0xb4413350,0x8d9281c6$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xc82a6c72,0xf1f9dee4,0xbb8d095e,0x825ebbc8$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xc9a3d126,0x4e294381,0xc35a8299,0x44d0103e$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xca8a27f3,0x7048da88,0xbae3abf4,0x0021568f$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xcb44d363,0x4cce41c4,0xc1bd80dc,0x4637127b$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xcb71e241,0xf2a250d7,0xb8d6876d,0x810535fb$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xcf35f8f9,0x75f70582,0xbf5c74fe,0x059e8985$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xcf44fe18,0x122235a3,0x70651f9f,0xad03d424$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xcfe096be,0x12865d05,0x70c17739,0xada7bc82$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xd028785e,0x6aea8525,0xa041f459,0x1a830922$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xd15deab1,0x56d77816,0xdba4b90e,0x5c2e2ba9$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xd34934eb,0x0e2fff50,0x6c68d56c,0xb10e1ed7$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xd3bae8f4,0x54307a53,0xd943bb4b,0x5ec929ec$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xd3ed5c4d,0x0e8b97f6,0x6cccbdca,0xb1aa7671$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xd4e9965d,0xed3a24cb,0xa74ef371,0x9e9d41e7$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xd597a754,0x6f555a2f,0xa5fe2b53,0x1f3cd628$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xd7b2186e,0xee61aaf8,0xa4157d42,0x9dc6cfd4$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xd875c27e,0x051309c5,0x675423f9,0xba32e842$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xd87e2260,0xe1ad90f6,0xabd9474c,0x920af5da$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xd8d1aad8,0x05b76163,0x67f04b5f,0xba9680e4$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xdb25ac53,0xe2f61ec5,0xa882c97f,0x91517be9$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xdb57c64a,0x61953b31,0xab3e4a4d,0x11fcb736$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xdc517658,0x5bdbe4ff,0xd6a825e7,0x5122b740$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xdeb6741d,0x593ce6ba,0xd44f27a2,0x53c5b505$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xdee81940,0x642ae43b,0xae819547,0x1443683c$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xe06e5798,0x3d089c23,0x5f4fb61f,0x82297da4$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xe07b0803,0x8b0f97b1,0x36923767,0x5de6a8d5$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xe0a19d9f,0x672b0f38,0xea58ce20,0x6dd25c87$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xe0ca3f3e,0x3dacf485,0x5febdeb9,0x828d1502$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xe0d3180e,0x5a11e575,0x90ba9409,0x2a786972$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xe2469fda,0x65cc0d7d,0xe8bfcc65,0x6f355ec2$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xe365cd3c,0x8811528e,0x358cf258,0x5ef86dea$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xe415446b,0xddc6f6fd,0x97b22147,0xae6193d1$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xe5584742,0x8e2cd8f0,0x33b17826,0x58c5e794$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xe56cc704,0x5fae3a7f,0x95054b03,0x2fc7b678$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xe646827d,0x8d321dcf,0x30afbd19,0x5bdb22ab$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xe74eca58,0xde9d78ce,0x94e9af74,0xad3a1de2$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xe882f056,0xd15142c0,0x9b25957a,0xa2f627ec$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xe92353be,0x8257cc0c,0x3fca6cda,0x54bef368$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xea3d9681,0x81490933,0x3cd4a9e5,0x57a03657$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xeb52a10d,0x36346ab6,0x5473408a,0x89158b31$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xebaca61a,0x516e5b61,0x9bc52a1d,0x2107d766$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xebd97e65,0xd20accf3,0x987e1b49,0xa1ada9df$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xebf6c9ab,0x36900210,0x54d7282c,0x89b1e397$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xec001cff,0x8774834d,0x3ae9239b,0x519dbc29$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xedad0176,0x6a2793d1,0xe75452c9,0x60dec06e$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xee137910,0x54d1846b,0x9e7af517,0x24b8086c$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xef1ed9c0,0x846a4672,0x39f7e6a4,0x52837916$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xef4a0333,0x68c09194,0xe5b3508c,0x6239c22b$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xf10ef9b7,0x4bcc04cc,0x816775b0,0x3ba588cb$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xf1d57a46,0x9aa1e5f4,0x273c4522,0x4c48da90$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xf2cbbf79,0x99bf20cb,0x2422801d,0x4f561faf$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xf4410a79,0xcd92b8ef,0x87e66f55,0xbe35ddc3$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xf4b126bd,0x4e73dbc6,0x84d8aaba,0x3e1a57c1$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xf4f63507,0x9f82aab5,0x221f0a63,0x496b95d1$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xf5533ae1,0x72d9a846,0xffaa695e,0x7820fbf9$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xf71a844a,0xcec936dc,0x84bde166,0xbd6e53f0$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xf75f6bfe,0x2a39a045,0x487e8a79,0x951841c2$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xf7b438a4,0x703eaa03,0xfd4d6b1b,0x7ac7f9bc$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xf7e8f038,0x9c9c6f8a,0x2101cf5c,0x4a7550ee$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xf7fb0358,0x2a9dc8e3,0x48dae2df,0x95bc2964$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xf85fa608,0x7fd534af,0xf2a6f5b7,0x752c6710$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xf88d21fb,0x93f9be49,0x2e641e9f,0x4510812d$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xf8d6be44,0xc1050cd2,0x8b71db68,0xb2a269fe$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xfa7147a3,0x40b3bad8,0x8a18cba4,0x30da36df$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xfab8a44d,0x7d3236ea,0xf041f7f2,0x77cb6555$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xfb8d3077,0xc25e82e1,0x882a555b,0xb1f9e7cd$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xfb93e4c4,0x90e77b76,0x2d7adba0,0x460e4412$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xfc639d6b,0x210556d0,0x43427cec,0x9e24b757$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xfcc7f5cd,0x21a13e76,0x43e6144a,0x9e80dff1$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xfdae6eba,0x96daf108,0x2b4751de,0x4033ce6c$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xfeb0ab85,0x95c43437,0x285994e1,0x432d0b53$/;"	l
DD	crc32c_intel_fast_zero_asm.s	/^DD 0xffce98a9,0x450c65d2,0x8fa714ae,0x3565e9d5$/;"	l
DEFAULT_SUBSYS	config.cc	181;"	d	file:
DEFAULT_SUBSYS	config.cc	185;"	d	file:
DEFAULT_SUBSYS	config.h	355;"	d
DEFAULT_SUBSYS	config.h	358;"	d
DNSResolver	dns_resolve.h	/^    DNSResolver() : lock("DNSResolver") { resolv_h = new ResolvHWrapper(); }$/;"	f	class:ceph::DNSResolver
DNSResolver	dns_resolve.h	/^class DNSResolver {$/;"	c	namespace:ceph
DecayCounter	DecayCounter.h	/^  DecayCounter() : val(0), delta(0), vel(0), last_decay() {}$/;"	f	class:DecayCounter
DecayCounter	DecayCounter.h	/^  explicit DecayCounter(const utime_t &now)$/;"	f	class:DecayCounter
DecayCounter	DecayCounter.h	/^  explicit DecayCounter(const utime_t &now, const DecayRate &rate)$/;"	f	class:DecayCounter
DecayCounter	DecayCounter.h	/^class DecayCounter {$/;"	c
DecayRate	DecayCounter.h	/^  DecayRate() : k(0) {}$/;"	f	class:DecayRate
DecayRate	DecayCounter.h	/^  DecayRate(const DecayRate &dr) : k(dr.k) {}$/;"	f	class:DecayRate
DecayRate	DecayCounter.h	/^  DecayRate(double hl) { set_halflife(hl); }$/;"	f	class:DecayRate
DecayRate	DecayCounter.h	/^class DecayRate {$/;"	c
DelItem	WeightedPriorityQueue.h	/^class DelItem$/;"	c
Digest	ceph_crypto.h	/^      Digest (SECOidTag _type, size_t _digest_size) : digest_size(_digest_size) {$/;"	f	class:ceph::crypto::Digest
Digest	ceph_crypto.h	/^    class Digest {$/;"	c	namespace:ceph::crypto
DigestFile	ceph_crypto_cms.cc	/^DigestFile(PLArenaPool *poolp, SECItem ***digests, SECItem *input,$/;"	f	file:
DoutPrefixProvider	dout.h	/^class DoutPrefixProvider {$/;"	c
ELEMENTS_PER_BLOCK	bit_vector.hpp	/^  static const uint32_t ELEMENTS_PER_BLOCK = BITS_PER_BYTE \/ _bit_count;$/;"	m	class:ceph::BitVector
ENOATTR	xattr.h	24;"	d
EVICT_COUNT	random_cache.hpp	/^  static const uint64_t EVICT_COUNT = 5;$/;"	m	class:RandomCache
Edge	cohort_lru.h	/^    enum class Edge : std::uint8_t$/;"	c	namespace:cohort::lru
Endpoint	zipkin_trace.h	/^  Endpoint(const char *ip, int port, const char *name) {}$/;"	f	class:ZTracer::Endpoint
Endpoint	zipkin_trace.h	/^  Endpoint(const char *name) {}$/;"	f	class:ZTracer::Endpoint
Endpoint	zipkin_trace.h	/^class Endpoint {$/;"	c	namespace:ZTracer
EntityName	entity_name.cc	/^EntityName()$/;"	f	class:EntityName
EntityName	entity_name.h	/^struct EntityName$/;"	s
Event	TrackedOp.h	/^    Event(utime_t t, const char *s) : stamp(t), cstr(s) {}$/;"	f	struct:TrackedOp::Event
Event	TrackedOp.h	/^    Event(utime_t t, const string& s) : stamp(t), str(s) {}$/;"	f	struct:TrackedOp::Event
Event	TrackedOp.h	/^  struct Event {$/;"	s	class:TrackedOp
EventCompare	ceph_timer.h	/^      struct EventCompare {$/;"	s	class:ceph::timer_detail::timer
EventSocket	event_socket.h	/^  EventSocket(): socket(-1), type(EVENT_SOCKET_TYPE_NONE) {}$/;"	f	class:EventSocket
EventSocket	event_socket.h	/^class EventSocket {$/;"	c
EventTrace	EventTrace.cc	/^EventTrace::EventTrace(CephContext *_ctx, const char *_file, const char *_func, int _line) :$/;"	f	class:EventTrace
EventTrace	EventTrace.h	/^class EventTrace {$/;"	c
FAST_ZERO_TABLE	crc32c_ppc.c	10;"	d	file:
FLAG_EVICTING	cohort_lru.h	/^      static constexpr uint32_t FLAG_EVICTING = 0x0004;$/;"	m	class:cohort::lru::LRU
FLAG_INITIAL	cohort_lru.h	/^    constexpr uint32_t FLAG_INITIAL = 0x0001;$/;"	m	namespace:cohort::lru
FLAG_INLRU	cohort_lru.h	/^      static constexpr uint32_t FLAG_INLRU = 0x0001;$/;"	m	class:cohort::lru::LRU
FLAG_LOCK	cohort_lru.h	/^      static constexpr uint32_t FLAG_LOCK = 0x0001;$/;"	m	class:cohort::lru::TreeX
FLAG_MON	LogClient.h	/^    FLAG_MON = 0x1,$/;"	e	enum:LogClient::logclient_flag_t
FLAG_NONE	cohort_lru.h	/^      static constexpr uint32_t FLAG_NONE = 0x0000;$/;"	m	class:cohort::lru::TreeX
FLAG_NONE	cohort_lru.h	/^    constexpr uint32_t FLAG_NONE = 0x0000;$/;"	m	namespace:cohort::lru
FLAG_PINNED	cohort_lru.h	/^      static constexpr uint32_t FLAG_PINNED  = 0x0002; \/\/ possible future use$/;"	m	class:cohort::lru::LRU
FLAG_RECYCLE	cohort_lru.h	/^    constexpr uint32_t FLAG_RECYCLE = 0x0002;$/;"	m	namespace:cohort::lru
FLAG_UNLOCK	cohort_lru.h	/^      static constexpr uint32_t FLAG_UNLOCK = 0x0002;$/;"	m	class:cohort::lru::TreeX
FLAG_UNLOCK_ON_MISS	cohort_lru.h	/^      static constexpr uint32_t FLAG_UNLOCK_ON_MISS = 0x0004;$/;"	m	class:cohort::lru::TreeX
FS_ZFS_TYPE	compat.cc	35;"	d	file:
FUNCTION_SIGNATURE_H	function_signature.h	11;"	d
FUNCTRACE	EventTrace.h	33;"	d
FUNCTRACE	EventTrace.h	42;"	d
Final	ceph_crypto.h	/^      void Final (byte *digest) {$/;"	f	class:ceph::crypto::Digest
Final	ceph_crypto.h	/^      void Final (byte *digest) {$/;"	f	class:ceph::crypto::HMAC
Finisher	Finisher.h	/^  Finisher(CephContext *cct_, string name, string tn) :$/;"	f	class:Finisher
Finisher	Finisher.h	/^  explicit Finisher(CephContext *cct_) :$/;"	f	class:Finisher
Finisher	Finisher.h	/^class Finisher {$/;"	c
FinisherThread	Finisher.h	/^    explicit FinisherThread(Finisher *f) : fin(f) {}$/;"	f	struct:Finisher::FinisherThread
FinisherThread	Finisher.h	/^  struct FinisherThread : public Thread {$/;"	s	class:Finisher
ForkWatcher	ceph_context.h	/^  class ForkWatcher {$/;"	c	class:CephContext
Formatter	Formatter.cc	/^Formatter::Formatter() { }$/;"	f	class:ceph::Formatter
Formatter	Formatter.h	/^  class Formatter {$/;"	c	namespace:ceph
FormatterAttrs	Formatter.cc	/^FormatterAttrs::FormatterAttrs(const char *attr, ...)$/;"	f	class:ceph::FormatterAttrs
FormatterAttrs	Formatter.h	/^  struct FormatterAttrs {$/;"	s	namespace:ceph
GENERATE_CASE	ceph_strings.cc	23;"	d	file:
GENERATE_CASE	ceph_strings.cc	25;"	d	file:
GREATER_THAN_XESCAPE	escape.c	29;"	d	file:
GenContextWQ	WorkQueue.h	/^  GenContextWQ(const string &name, time_t ti, ThreadPool *tp)$/;"	f	class:GenContextWQ
GenContextWQ	WorkQueue.h	/^class GenContextWQ :$/;"	c
Get	Semaphore.h	/^  void Get() $/;"	f	class:Semaphore
GetdescsHook	admin_socket.cc	/^  explicit GetdescsHook(AdminSocket *as) : m_as(as) {}$/;"	f	class:GetdescsHook
GetdescsHook	admin_socket.cc	/^class GetdescsHook : public AdminSocketHook {$/;"	c	file:
Graylog	Graylog.cc	/^Graylog::Graylog(const SubsystemMap * const s, std::string logger)$/;"	f	class:ceph::logging::Graylog
Graylog	Graylog.cc	/^Graylog::Graylog(std::string logger)$/;"	f	class:ceph::logging::Graylog
Graylog	Graylog.h	/^class Graylog$/;"	c	namespace:ceph::logging
H2C_ERRNO	freebsd_errno.cc	19;"	d	file:
HMAC	ceph_crypto.h	/^      HMAC (CK_MECHANISM_TYPE cktype, unsigned int digestsize, const byte *key, size_t length) {$/;"	f	class:ceph::crypto::HMAC
HMAC	ceph_crypto.h	/^    class HMAC {$/;"	c	namespace:ceph::crypto
HMACSHA1	ceph_crypto.h	/^      HMACSHA1 (const byte *key, size_t length) : HMAC(CKM_SHA_1_HMAC, CEPH_CRYPTO_HMACSHA1_DIGESTSIZE, key, length) { }$/;"	f	class:ceph::crypto::HMACSHA1
HMACSHA1	ceph_crypto.h	/^      HMACSHA1 (const byte *key, size_t length)$/;"	f	class:ceph::crypto::HMACSHA1
HMACSHA1	ceph_crypto.h	/^    class HMACSHA1 : public HMAC {$/;"	c	namespace:ceph::crypto
HMACSHA1	ceph_crypto.h	/^    class HMACSHA1: public CryptoPP::HMAC<CryptoPP::SHA1> {$/;"	c	namespace:ceph::crypto
HMACSHA256	ceph_crypto.h	/^      HMACSHA256 (const byte *key, size_t length) : HMAC(CKM_SHA256_HMAC, CEPH_CRYPTO_HMACSHA256_DIGESTSIZE, key, length) { }$/;"	f	class:ceph::crypto::HMACSHA256
HMACSHA256	ceph_crypto.h	/^      HMACSHA256 (const byte *key, size_t length)$/;"	f	class:ceph::crypto::HMACSHA256
HMACSHA256	ceph_crypto.h	/^    class HMACSHA256 : public HMAC {$/;"	c	namespace:ceph::crypto
HMACSHA256	ceph_crypto.h	/^    class HMACSHA256: public CryptoPP::HMAC<CryptoPP::SHA256> {$/;"	c	namespace:ceph::crypto
HTMLFormatter	HTMLFormatter.cc	/^HTMLFormatter::HTMLFormatter(bool pretty)$/;"	f	class:ceph::HTMLFormatter
HTMLFormatter	HTMLFormatter.h	/^  class HTMLFormatter : public XMLFormatter {$/;"	c	namespace:ceph
HeartbeatMap	HeartbeatMap.cc	/^HeartbeatMap::HeartbeatMap(CephContext *cct)$/;"	f	class:ceph::HeartbeatMap
HeartbeatMap	HeartbeatMap.h	/^class HeartbeatMap {$/;"	c	namespace:ceph
HelpHook	admin_socket.cc	/^  explicit HelpHook(AdminSocket *as) : m_as(as) {}$/;"	f	class:HelpHook
HelpHook	admin_socket.cc	/^class HelpHook : public AdminSocketHook {$/;"	c	file:
INLINE_VARIANT_H	inline_variant.h	9;"	d
INT64_MIN	hobject.h	34;"	d
INTERVAL_MAP_H	interval_map.h	16;"	d
INVALID_UTF8_CHAR	utf8.h	19;"	d
IOPRIO_CLASS_BE	io_priority.h	34;"	d
IOPRIO_CLASS_IDLE	io_priority.h	37;"	d
IOPRIO_CLASS_RT	io_priority.h	31;"	d
IOPRIO_CLASS_SHIFT	io_priority.h	26;"	d
IOPRIO_PRIO_VALUE	io_priority.h	27;"	d
IOPRIO_WHO_PROCESS	io_priority.h	23;"	d
Initialize	Initialize.h	/^  explicit Initialize(T*& p) {$/;"	f	class:Initialize
Initialize	Initialize.h	/^  explicit Initialize(void (*func)()) {$/;"	f	class:Initialize
Initialize	Initialize.h	/^class Initialize {$/;"	c
Iterator	bit_vector.hpp	/^  typedef IteratorImpl<BitVector, bufferlist::iterator> Iterator;$/;"	t	class:ceph::BitVector
IteratorImpl	bit_vector.hpp	/^    IteratorImpl(BitVectorT *bit_vector, uint64_t offset)$/;"	f	class:ceph::BitVector::IteratorImpl
IteratorImpl	bit_vector.hpp	/^  class IteratorImpl {$/;"	c	class:ceph::BitVector
JSONDecoder	ceph_json.h	/^  JSONDecoder(bufferlist& bl) {$/;"	f	class:JSONDecoder
JSONDecoder	ceph_json.h	/^class JSONDecoder {$/;"	c
JSONFormatter	Formatter.cc	/^JSONFormatter::JSONFormatter(bool p)$/;"	f	class:ceph::JSONFormatter
JSONFormatter	Formatter.h	/^  class JSONFormatter : public Formatter {$/;"	c	namespace:ceph
JSONObj	ceph_json.h	/^  JSONObj() : parent(NULL){}$/;"	f	class:JSONObj
JSONObj	ceph_json.h	/^class JSONObj$/;"	c
JSONObjIter	ceph_json.cc	/^JSONObjIter::JSONObjIter()$/;"	f	class:JSONObjIter
JSONObjIter	ceph_json.h	/^class JSONObjIter {$/;"	c
JSONParser	ceph_json.cc	/^JSONParser::JSONParser() : buf_len(0), success(true)$/;"	f	class:JSONParser
JSONParser	ceph_json.h	/^class JSONParser : public JSONObj$/;"	c
KEEP	SubProcess.h	/^    KEEP,$/;"	e	enum:SubProcess::std_fd_op
KERNEL_VERSION	linux_version.h	13;"	d
Kit	WeightedPriorityQueue.h	/^      typedef typename Klasses::iterator Kit;$/;"	t	class:WeightedPriorityQueue::SubQueue
Klass	WeightedPriorityQueue.h	/^        Klass(K& k) :$/;"	f	class:WeightedPriorityQueue::Klass
Klass	WeightedPriorityQueue.h	/^    class Klass : public bi::set_base_hook<>$/;"	c	class:WeightedPriorityQueue
Klasses	WeightedPriorityQueue.h	/^      typedef bi::rbtree<Klass> Klasses;$/;"	t	class:WeightedPriorityQueue::SubQueue
L	RWLock.h	/^  mutable pthread_rwlock_t L;$/;"	m	class:final
L	function_signature.h	/^    typedef typename boost::mpl::push_front<base, result_type>::type L;$/;"	t	struct:signature_of_member
LARGE_ENOUGH_DNS_BUFSIZE	dns_resolve.cc	111;"	d	file:
LARGE_SIZE	Formatter.cc	15;"	d	file:
LARGE_SIZE	HTMLFormatter.cc	15;"	d	file:
LAST	PriorityCache.h	/^    LAST = PRI3,$/;"	e	enum:PriorityCache::Priority
LEFT	TextTable.h	/^  enum Align {LEFT = 1, CENTER, RIGHT};$/;"	e	enum:TextTable::Align
LESS_THAN_XESCAPE	escape.c	27;"	d	file:
LEVEL_ADVANCED	options.h	/^    LEVEL_ADVANCED,$/;"	e	enum:Option::level_t
LEVEL_BASIC	options.h	/^    LEVEL_BASIC,$/;"	e	enum:Option::level_t
LEVEL_DEV	options.h	/^    LEVEL_DEV,$/;"	e	enum:Option::level_t
LOG_LEVEL	EventTrace.h	47;"	d
LOG_TO_STDERR_ALL	config.h	36;"	d
LOG_TO_STDERR_NONE	config.h	34;"	d
LOG_TO_STDERR_SOME	config.h	35;"	d
LRU	cohort_lru.h	/^      LRU(int lanes, uint32_t _hiwat)$/;"	f	class:cohort::lru::LRU
LRU	cohort_lru.h	/^    class LRU$/;"	c	namespace:cohort::lru
Lane	cohort_lru.h	/^	Lane() {}$/;"	f	struct:cohort::lru::LRU::Lane
Lane	cohort_lru.h	/^      struct Lane {$/;"	s	class:cohort::lru::LRU
Latch	cohort_lru.h	/^	Latch() : p(nullptr), lock(nullptr) {}$/;"	f	struct:cohort::lru::TreeX::Latch
Latch	cohort_lru.h	/^      struct Latch {$/;"	s	class:cohort::lru::TreeX
ListPair	WeightedPriorityQueue.h	/^        ListPair(unsigned c, T& i) :$/;"	f	class:WeightedPriorityQueue::ListPair
ListPair	WeightedPriorityQueue.h	/^    class ListPair : public bi::list_base_hook<>$/;"	c	class:WeightedPriorityQueue
ListPairs	PrioritizedQueue.h	/^  typedef std::list<std::pair<unsigned, T> > ListPairs;$/;"	t	class:PrioritizedQueue
ListPairs	WeightedPriorityQueue.h	/^      typedef bi::list<ListPair> ListPairs;$/;"	t	class:WeightedPriorityQueue::Klass
ListPairs	mClockPriorityQueue.h	/^    typedef std::list<std::pair<cost_t, T> > ListPairs;$/;"	t	class:ceph::mClockQueue
Lit	WeightedPriorityQueue.h	/^      typedef typename ListPairs::iterator Lit;$/;"	t	class:WeightedPriorityQueue::Klass
Lock	Mutex.cc	/^void Mutex::Lock(bool no_lockdep) {$/;"	f	class:Mutex
LockState	RWLock.h	/^    enum LockState {$/;"	g	class:final::Context
LockdepObs	ceph_context.cc	/^  explicit LockdepObs(CephContext *cct) : m_cct(cct), m_registered(false) {$/;"	f	class:__anon6::LockdepObs
LockdepObs	ceph_context.cc	/^class LockdepObs : public md_config_obs_t {$/;"	c	namespace:__anon6	file:
Locker	Mutex.h	/^    explicit Locker(Mutex& m) : mutex(m) {$/;"	f	class:Mutex::Locker
Locker	Mutex.h	/^  class Locker {$/;"	c	class:Mutex
LogChannel	LogClient.cc	/^LogChannel::LogChannel(CephContext *cct, LogClient *lc, const string &channel)$/;"	f	class:LogChannel
LogChannel	LogClient.cc	/^LogChannel::LogChannel(CephContext *cct, LogClient *lc,$/;"	f	class:LogChannel
LogChannel	LogClient.h	/^class LogChannel$/;"	c
LogChannelRef	LogClient.h	/^typedef LogChannel::Ref LogChannelRef;$/;"	t
LogClient	LogClient.cc	/^LogClient::LogClient(CephContext *cct, Messenger *m, MonMap *mm,$/;"	f	class:LogClient
LogClient	LogClient.h	/^class LogClient$/;"	c
LogClientTemp	LogClient.cc	/^LogClientTemp::LogClientTemp(clog_type type_, LogChannel &parent_)$/;"	f	class:LogClientTemp
LogClientTemp	LogClient.cc	/^LogClientTemp::LogClientTemp(const LogClientTemp &rhs)$/;"	f	class:LogClientTemp
LogClientTemp	LogClient.h	/^class LogClientTemp$/;"	c
LogEntry	LogEntry.h	/^  LogEntry() : seq(0), prio(CLOG_DEBUG) {}$/;"	f	struct:LogEntry
LogEntry	LogEntry.h	/^struct LogEntry {$/;"	s
LogEntryKey	LogEntry.h	/^  LogEntryKey() {}$/;"	f	struct:LogEntryKey
LogEntryKey	LogEntry.h	/^  LogEntryKey(const entity_inst_t& w, utime_t t, uint64_t s)$/;"	f	struct:LogEntryKey
LogEntryKey	LogEntry.h	/^struct LogEntryKey {$/;"	s
LogObs	ceph_context.cc	/^  explicit LogObs(ceph::logging::Log *l) : log(l) {}$/;"	f	class:LogObs
LogObs	ceph_context.cc	/^class LogObs : public md_config_obs_t {$/;"	c	file:
LogSummary	LogEntry.h	/^  LogSummary() : version(0) {}$/;"	f	struct:LogSummary
LogSummary	LogEntry.h	/^struct LogSummary {$/;"	s
MAPCACHER_H	map_cacher.hpp	16;"	d
MASK	bit_vector.hpp	/^  static const uint8_t MASK = static_cast<uint8_t>((1 << _bit_count) - 1);$/;"	m	class:ceph::BitVector
MAX_CONFIG_FILE_SZ	ConfUtils.cc	30;"	d	file:
MAX_FQDN_SIZE	dns_resolve.cc	114;"	d	file:
MAX_ITER	crc32c_intel_baseline.c	39;"	d	file:
MAX_LOCKS	lockdep.cc	32;"	d	file:
MAX_PRIORITY	AsyncReserver.h	/^  static const unsigned MAX_PRIORITY = (unsigned)-1;$/;"	m	class:AsyncReserver
MAX_SIZE	crc32c_ppc_constants.h	153;"	d
MAX_UTF8_SZ	utf8.h	18;"	d
MD5	ceph_crypto.h	/^      MD5 () : Digest(SEC_OID_MD5, CEPH_CRYPTO_MD5_DIGESTSIZE) { }$/;"	f	class:ceph::crypto::MD5
MD5	ceph_crypto.h	/^    class MD5 : public Digest {$/;"	c	namespace:ceph::crypto
MFVRD	ppc-opcode.h	28;"	d
MRU	cohort_lru.h	/^      MRU = 0,$/;"	m	class:cohort::lru::Edge
MTVRD	ppc-opcode.h	29;"	d
MapCacher	map_cacher.hpp	/^  MapCacher(StoreDriver<K, V> *driver) : driver(driver) {}$/;"	f	class:MapCacher::MapCacher
MapCacher	map_cacher.hpp	/^class MapCacher {$/;"	c	namespace:MapCacher
MapCacher	map_cacher.hpp	/^namespace MapCacher {$/;"	n
MapKey	WeightedPriorityQueue.h	/^class MapKey$/;"	c
MemoryModel	MemoryModel.cc	/^MemoryModel::MemoryModel(CephContext *cct_)$/;"	f	class:MemoryModel
MemoryModel	MemoryModel.h	/^class MemoryModel {$/;"	c
MempoolObs	ceph_context.cc	/^  explicit MempoolObs(CephContext *cct) : cct(cct) {$/;"	f	class:__anon6::MempoolObs
MempoolObs	ceph_context.cc	/^class MempoolObs : public md_config_obs_t,$/;"	c	namespace:__anon6	file:
Mutex	Mutex.cc	/^Mutex::Mutex(const std::string &n, bool r, bool ld,$/;"	f	class:Mutex
Mutex	Mutex.h	/^class Mutex {$/;"	c
NEED_ASSERT_H	ceph_json.h	7;"	d
NEWLINE_JESCAPE	escape.c	118;"	d	file:
NONE	perf_counters.h	/^  NONE$/;"	e	enum:uint8_t
NO_FLAGS	LogClient.h	/^    NO_FLAGS = 0,$/;"	e	enum:LogClient::logclient_flag_t
NO_GEN	hobject.h	/^  static const gen_t NO_GEN = UINT64_MAX;$/;"	m	struct:ghobject_t
NO_LIMIT	Readahead.h	/^  static const uint64_t NO_LIMIT = 18446744073709551615ULL;$/;"	m	class:Readahead
NUM_CONF_METAVARIABLES	config.cc	/^static const int NUM_CONF_METAVARIABLES =$/;"	v	file:
OID_ELAPSED	EventTrace.h	29;"	d
OID_ELAPSED	EventTrace.h	40;"	d
OID_ELAPSED_FUNC_EVENT	EventTrace.h	34;"	d
OID_ELAPSED_FUNC_EVENT	EventTrace.h	43;"	d
OID_ELAPSED_WITH_MSG	EventTrace.h	31;"	d
OID_ELAPSED_WITH_MSG	EventTrace.h	41;"	d
OID_EVENT_TRACE	EventTrace.h	25;"	d
OID_EVENT_TRACE	EventTrace.h	38;"	d
OID_EVENT_TRACE_WITH_MSG	EventTrace.h	27;"	d
OID_EVENT_TRACE_WITH_MSG	EventTrace.h	39;"	d
OPTION	config.cc	101;"	d	file:
OPTION	config.cc	105;"	d	file:
OPTION	config.h	288;"	d
OPTION	config.h	305;"	d
OPTION_OPT_ADDR	config.h	284;"	d
OPTION_OPT_ADDR	config.h	301;"	d
OPTION_OPT_BOOL	config.h	283;"	d
OPTION_OPT_BOOL	config.h	300;"	d
OPTION_OPT_DOUBLE	config.h	281;"	d
OPTION_OPT_DOUBLE	config.h	298;"	d
OPTION_OPT_FLOAT	config.h	282;"	d
OPTION_OPT_FLOAT	config.h	299;"	d
OPTION_OPT_INT	config.h	278;"	d
OPTION_OPT_INT	config.h	295;"	d
OPTION_OPT_LONGLONG	config.h	279;"	d
OPTION_OPT_LONGLONG	config.h	296;"	d
OPTION_OPT_STR	config.h	280;"	d
OPTION_OPT_STR	config.h	297;"	d
OPTION_OPT_U32	config.h	285;"	d
OPTION_OPT_U32	config.h	302;"	d
OPTION_OPT_U64	config.h	286;"	d
OPTION_OPT_U64	config.h	303;"	d
OPTION_OPT_UUID	config.h	287;"	d
OPTION_OPT_UUID	config.h	304;"	d
OPTRACKER_PREALLOC_EVENTS	TrackedOp.h	22;"	d
OPT_ADDR	config.h	/^	OPT_ADDR, OPT_U32, OPT_U64, OPT_UUID$/;"	e	enum:md_config_t::__anon12
OPT_BOOL	config.h	/^	OPT_INT, OPT_LONGLONG, OPT_STR, OPT_DOUBLE, OPT_FLOAT, OPT_BOOL,$/;"	e	enum:md_config_t::__anon12
OPT_DOUBLE	config.h	/^	OPT_INT, OPT_LONGLONG, OPT_STR, OPT_DOUBLE, OPT_FLOAT, OPT_BOOL,$/;"	e	enum:md_config_t::__anon12
OPT_FLOAT	config.h	/^	OPT_INT, OPT_LONGLONG, OPT_STR, OPT_DOUBLE, OPT_FLOAT, OPT_BOOL,$/;"	e	enum:md_config_t::__anon12
OPT_INT	config.h	/^	OPT_INT, OPT_LONGLONG, OPT_STR, OPT_DOUBLE, OPT_FLOAT, OPT_BOOL,$/;"	e	enum:md_config_t::__anon12
OPT_LONGLONG	config.h	/^	OPT_INT, OPT_LONGLONG, OPT_STR, OPT_DOUBLE, OPT_FLOAT, OPT_BOOL,$/;"	e	enum:md_config_t::__anon12
OPT_STR	config.h	/^	OPT_INT, OPT_LONGLONG, OPT_STR, OPT_DOUBLE, OPT_FLOAT, OPT_BOOL,$/;"	e	enum:md_config_t::__anon12
OPT_U32	config.h	/^	OPT_ADDR, OPT_U32, OPT_U64, OPT_UUID$/;"	e	enum:md_config_t::__anon12
OPT_U64	config.h	/^	OPT_ADDR, OPT_U32, OPT_U64, OPT_UUID$/;"	e	enum:md_config_t::__anon12
OPT_UUID	config.h	/^	OPT_ADDR, OPT_U32, OPT_U64, OPT_UUID$/;"	e	enum:md_config_t::__anon12
OP_QUEUE_H	OpQueue.h	16;"	d
OP_RAND_READ	obj_bencher.h	/^const int OP_RAND_READ = 3;$/;"	v
OP_SEQ_READ	obj_bencher.h	/^const int OP_SEQ_READ  = 2;$/;"	v
OP_WRITE	obj_bencher.h	/^const int OP_WRITE     = 1;$/;"	v
OSD_REP_CHAIN	config.h	28;"	d
OSD_REP_PRIMARY	config.h	26;"	d
OSD_REP_SPLAY	config.h	27;"	d
ObjBencher	obj_bencher.h	/^  explicit ObjBencher(CephContext *cct_) : show_time(false), cct(cct_), lock("ObjBencher::lock") {}$/;"	f	class:ObjBencher
ObjBencher	obj_bencher.h	/^class ObjBencher {$/;"	c
Object	cohort_lru.h	/^      Object() : lru_flags(FLAG_NONE), lru_refcnt(0), lru_adj(0) {}$/;"	f	class:cohort::lru::Object
Object	cohort_lru.h	/^    class Object$/;"	c	namespace:cohort::lru
Object	obj_bencher.h	/^typedef std::pair<std::string, std::string> Object;$/;"	t
ObjectFactory	cohort_lru.h	/^    class ObjectFactory$/;"	c	namespace:cohort::lru
Observer	pick_address.cc	/^  explicit Observer(const char *c) {$/;"	f	struct:Observer
Observer	pick_address.cc	/^struct Observer : public md_config_obs_t {$/;"	s	file:
OnRemoval	sharedptr_registry.hpp	/^    OnRemoval(SharedPtrRegistry<K,V,C> *parent, K key) :$/;"	f	class:SharedPtrRegistry::OnRemoval
OnRemoval	sharedptr_registry.hpp	/^  class OnRemoval {$/;"	c	class:SharedPtrRegistry
OpHistory	TrackedOp.h	/^  OpHistory() : ops_history_lock("OpHistory::Lock"), shutdown(false),$/;"	f	class:OpHistory
OpHistory	TrackedOp.h	/^class OpHistory {$/;"	c
OpQueue	OpQueue.h	/^class OpQueue {$/;"	c
OpTracker	TrackedOp.cc	/^OpTracker::OpTracker(CephContext *cct_, bool tracking, uint32_t num_shards):$/;"	f	class:OpTracker
OpTracker	TrackedOp.h	/^class OpTracker {$/;"	c
Option	options.h	/^  Option(std::string const &name, type_t t, level_t l)$/;"	f	struct:Option
Option	options.h	/^struct Option {$/;"	s
OrderedThrottle	Throttle.cc	/^OrderedThrottle::OrderedThrottle(uint64_t max, bool ignore_enoent)$/;"	f	class:OrderedThrottle
OrderedThrottle	Throttle.h	/^class OrderedThrottle {$/;"	c
OutputDataSocket	OutputDataSocket.cc	/^OutputDataSocket::OutputDataSocket(CephContext *cct, uint64_t _backlog)$/;"	f	class:OutputDataSocket
OutputDataSocket	OutputDataSocket.h	/^class OutputDataSocket : public Thread$/;"	c
P	mempool.cc	34;"	d	file:
P	mempool.cc	38;"	d	file:
PERFCOUNTER_COUNTER	perf_counters.h	/^  PERFCOUNTER_COUNTER = 0x8,    \/\/ counter (vs guage)$/;"	e	enum:uint8_t
PERFCOUNTER_HISTOGRAM	perf_counters.h	/^  PERFCOUNTER_HISTOGRAM = 0x10, \/\/ histogram (vector) of values$/;"	e	enum:uint8_t
PERFCOUNTER_LONGRUNAVG	perf_counters.h	/^  PERFCOUNTER_LONGRUNAVG = 0x4, \/\/ paired counter + sum (time)$/;"	e	enum:uint8_t
PERFCOUNTER_NONE	perf_counters.h	/^  PERFCOUNTER_NONE = 0,$/;"	e	enum:uint8_t
PERFCOUNTER_TIME	perf_counters.h	/^  PERFCOUNTER_TIME = 0x1,       \/\/ float (measuring seconds)$/;"	e	enum:uint8_t
PERFCOUNTER_U64	perf_counters.h	/^  PERFCOUNTER_U64 = 0x2,        \/\/ integer (note: either TIME or U64 *must* be set)$/;"	e	enum:uint8_t
PFL_FAIL	OutputDataSocket.cc	115;"	d	file:
PFL_FAIL	admin_socket.cc	120;"	d	file:
PFL_SUCCESS	OutputDataSocket.cc	114;"	d	file:
PFL_SUCCESS	admin_socket.cc	119;"	d	file:
PIPE	SubProcess.h	/^    PIPE$/;"	e	enum:SubProcess::std_fd_op
PLUGIN_INIT_FUNCTION	PluginRegistry.cc	27;"	d	file:
PLUGIN_PREFIX	PluginRegistry.cc	25;"	d	file:
PLUGIN_SUFFIX	PluginRegistry.cc	26;"	d	file:
PLUGIN_VERSION_FUNCTION	PluginRegistry.cc	28;"	d	file:
POOL_META	hobject.h	/^  static const int64_t POOL_META = -1;$/;"	m	struct:hobject_t
POOL_TEMP_START	hobject.h	/^  static const int64_t POOL_TEMP_START = -2; \/\/ and then negative$/;"	m	struct:hobject_t
PPC_INST_MFVSRD	ppc-opcode.h	23;"	d
PPC_INST_MTVSRD	ppc-opcode.h	24;"	d
PPC_INST_VPMSUMD	ppc-opcode.h	22;"	d
PPC_INST_VPMSUMW	ppc-opcode.h	21;"	d
PREF1KL1	crc32c_aarch64.c	74;"	d	file:
PREF1KL2	crc32c_aarch64.c	86;"	d	file:
PREF4X64L1	crc32c_aarch64.c	68;"	d	file:
PREF4X64L2	crc32c_aarch64.c	80;"	d	file:
PRI0	PriorityCache.h	/^    PRI0,  \/\/ Reserved for special items$/;"	e	enum:PriorityCache::Priority
PRI1	PriorityCache.h	/^    PRI1,  \/\/ High priority cache items$/;"	e	enum:PriorityCache::Priority
PRI2	PriorityCache.h	/^    PRI2,  \/\/ Medium priority cache items$/;"	e	enum:PriorityCache::Priority
PRI3	PriorityCache.h	/^    PRI3,  \/\/ Low priority cache items$/;"	e	enum:PriorityCache::Priority
PRIORITY_QUEUE_H	PrioritizedQueue.h	16;"	d
PRIO_CRITICAL	perf_counters.h	/^    PRIO_CRITICAL = 10,$/;"	e	enum:PerfCountersBuilder::__anon8
PRIO_DEBUGONLY	perf_counters.h	/^    PRIO_DEBUGONLY = 0,$/;"	e	enum:PerfCountersBuilder::__anon8
PRIO_INTERESTING	perf_counters.h	/^    PRIO_INTERESTING = 8,$/;"	e	enum:PerfCountersBuilder::__anon8
PRIO_UNINTERESTING	perf_counters.h	/^    PRIO_UNINTERESTING = 2,$/;"	e	enum:PerfCountersBuilder::__anon8
PRIO_USEFUL	perf_counters.h	/^    PRIO_USEFUL = 5,$/;"	e	enum:PerfCountersBuilder::__anon8
Partition	cohort_lru.h	/^	Partition() : tr(), cache(nullptr), csz(0) {}$/;"	f	struct:cohort::lru::TreeX::Partition
Partition	cohort_lru.h	/^      struct Partition {$/;"	s	class:cohort::lru::TreeX
PerfCounterRef	perf_counters.h	/^  class PerfCounterRef$/;"	c	class:PerfCountersCollection
PerfCounters	perf_counters.cc	/^PerfCounters::PerfCounters(CephContext *cct, const std::string &name,$/;"	f	class:PerfCounters
PerfCounters	perf_counters.h	/^class PerfCounters$/;"	c
PerfCountersBuilder	perf_counters.cc	/^PerfCountersBuilder::PerfCountersBuilder(CephContext *cct, const std::string &name,$/;"	f	class:PerfCountersBuilder
PerfCountersBuilder	perf_counters.h	/^class PerfCountersBuilder$/;"	c
PerfCountersCollection	perf_counters.cc	/^PerfCountersCollection::PerfCountersCollection(CephContext *cct)$/;"	f	class:PerfCountersCollection
PerfCountersCollection	perf_counters.h	/^class PerfCountersCollection$/;"	c
PerfHistogram	perf_histogram.h	/^  PerfHistogram(const PerfHistogram &other)$/;"	f	class:PerfHistogram
PerfHistogram	perf_histogram.h	/^  PerfHistogram(std::initializer_list<axis_config_d> axes_config) {$/;"	f	class:PerfHistogram
PerfHistogram	perf_histogram.h	/^class PerfHistogram : public PerfHistogramCommon {$/;"	c
PerfHistogramCommon	perf_histogram.h	/^class PerfHistogramCommon {$/;"	c
Plugin	PluginRegistry.h	/^    explicit Plugin(CephContext *cct) : library(NULL), cct(cct) {}$/;"	f	class:ceph::Plugin
Plugin	PluginRegistry.h	/^  class Plugin {$/;"	c	namespace:ceph
PluginRegistry	PluginRegistry.cc	/^PluginRegistry::PluginRegistry(CephContext *cct) :$/;"	f	class:PluginRegistry
PluginRegistry	PluginRegistry.h	/^  class PluginRegistry {$/;"	c	namespace:ceph
PointerWQ	WorkQueue.h	/^    PointerWQ(string n, time_t ti, time_t sti, ThreadPool* p)$/;"	f	class:ThreadPool::PointerWQ
PointerWQ	WorkQueue.h	/^  class PointerWQ : public WorkQueue_ {$/;"	c	class:ThreadPool
PrebufferedStreambuf	PrebufferedStreambuf.cc	/^PrebufferedStreambuf::PrebufferedStreambuf(char *buf, size_t len)$/;"	f	class:PrebufferedStreambuf
PrebufferedStreambuf	PrebufferedStreambuf.h	/^class PrebufferedStreambuf$/;"	c
Preforker	Preforker.h	/^  Preforker()$/;"	f	class:Preforker
Preforker	Preforker.h	/^class Preforker {$/;"	c
PriCache	PriorityCache.h	/^  struct PriCache {$/;"	s	namespace:PriorityCache
PrioritizedQueue	PrioritizedQueue.h	/^  PrioritizedQueue(unsigned max_per, unsigned min_c)$/;"	f	class:PrioritizedQueue
PrioritizedQueue	PrioritizedQueue.h	/^class PrioritizedQueue : public OpQueue <T, K> {$/;"	c
Priority	PriorityCache.h	/^  enum Priority {$/;"	g	namespace:PriorityCache
PriorityCache	PriorityCache.cc	/^namespace PriorityCache {$/;"	n	file:
PriorityCache	PriorityCache.h	/^namespace PriorityCache {$/;"	n
Put	Semaphore.h	/^  void Put()$/;"	f	class:Semaphore
Putter	TrackedOp.h	/^  struct Putter {$/;"	s	class:TrackedOp
QUEUE_RING_H	QueueRing.h	2;"	d
Queue	WeightedPriorityQueue.h	/^	Queue() :$/;"	f	class:WeightedPriorityQueue::Queue
Queue	WeightedPriorityQueue.h	/^    class Queue {$/;"	c	class:WeightedPriorityQueue
Queue	cohort_lru.h	/^		       bi::constant_time_size<true>> Queue;$/;"	t	class:cohort::lru::Object
Queue2	cohort_lru.h	/^			bi::constant_time_size<true>> Queue2;$/;"	t	class:cohort::lru::Object
QueueBucket	QueueRing.h	/^    QueueBucket() : lock("QueueRing::QueueBucket::lock") {}$/;"	f	struct:QueueRing::QueueBucket
QueueBucket	QueueRing.h	/^    QueueBucket(const QueueBucket& rhs) : lock("QueueRing::QueueBucket::lock") {$/;"	f	struct:QueueRing::QueueBucket
QueueBucket	QueueRing.h	/^  struct QueueBucket {$/;"	s	class:QueueRing
QueueRing	QueueRing.h	/^  QueueRing(int n) : buckets(n), num_buckets(n) {$/;"	f	class:QueueRing
QueueRing	QueueRing.h	/^class QueueRing {$/;"	c
REFLECT	crc32c_ppc_constants.h	10;"	d
RIGHT	TextTable.h	/^  enum Align {LEFT = 1, CENTER, RIGHT};$/;"	e	enum:TextTable::Align
RLocker	RWLock.h	/^   explicit  RLocker(const RWLock& lock) : m_lock(lock) {$/;"	f	class:final::RLocker
RLocker	RWLock.h	/^  class RLocker {$/;"	c	class:final
RWLock	RWLock.h	/^  RWLock(const std::string &n, bool track_lock=true, bool ld=true, bool prioritize_write=false)$/;"	f	class:final
RandomCache	random_cache.hpp	/^  RandomCache(size_t max_size=20) : lock("RandomCache::lock"),$/;"	f	class:RandomCache
RandomCache	random_cache.hpp	/^class RandomCache {$/;"	c
Readahead	Readahead.cc	/^Readahead::Readahead()$/;"	f	class:Readahead
Readahead	Readahead.h	/^class Readahead {$/;"	c
Record	dns_resolve.h	/^    struct Record {$/;"	s	class:ceph::DNSResolver
Ref	Graylog.h	/^  typedef ceph::shared_ptr<Graylog> Ref;$/;"	t	class:ceph::logging::Graylog
Ref	LogClient.h	/^  typedef shared_ptr<LogChannel> Ref;$/;"	t	class:LogChannel
RefCountedCond	RefCountedObj.h	/^  RefCountedCond() : complete(false), lock("RefCountedCond"), rval(0) {}$/;"	f	struct:RefCountedCond
RefCountedCond	RefCountedObj.h	/^struct RefCountedCond : public RefCountedObject {$/;"	s
RefCountedObject	RefCountedObj.h	/^  RefCountedObject(CephContext *c = NULL, int n=1) : nref(n), cct(c) {}$/;"	f	struct:RefCountedObject
RefCountedObject	RefCountedObj.h	/^struct RefCountedObject {$/;"	s
RefCountedWaitObject	RefCountedObj.h	/^  RefCountedWaitObject() {$/;"	f	struct:RefCountedWaitObject
RefCountedWaitObject	RefCountedObj.h	/^struct RefCountedWaitObject {$/;"	s
Reference	bit_vector.hpp	/^    Reference(bufferlist::iterator&& data_iterator, uint64_t shift)$/;"	f	class:ceph::BitVector::Reference
Reference	bit_vector.hpp	/^    Reference(const bufferlist::iterator& data_iterator, uint64_t shift)$/;"	f	class:ceph::BitVector::Reference
Reference	bit_vector.hpp	/^  class Reference : public ReferenceImpl<bufferlist::iterator> {$/;"	c	class:ceph::BitVector
ReferenceImpl	bit_vector.hpp	/^    ReferenceImpl(DataIterator&& data_iterator, uint64_t shift)$/;"	f	class:ceph::BitVector::ReferenceImpl
ReferenceImpl	bit_vector.hpp	/^    ReferenceImpl(const DataIterator& data_iterator, uint64_t shift)$/;"	f	class:ceph::BitVector::ReferenceImpl
ReferenceImpl	bit_vector.hpp	/^  class ReferenceImpl {$/;"	c	class:ceph::BitVector
Reservation	AsyncReserver.h	/^    Reservation() {}$/;"	f	struct:AsyncReserver::Reservation
Reservation	AsyncReserver.h	/^    Reservation(T i, unsigned pr, Context *g, Context *p = 0)$/;"	f	struct:AsyncReserver::Reservation
Reservation	AsyncReserver.h	/^  struct Reservation {$/;"	s	class:AsyncReserver
ResolvHWrapper	dns_resolve.h	/^class ResolvHWrapper {$/;"	c	namespace:ceph
Restart	ceph_crypto.h	/^      void Restart() {$/;"	f	class:ceph::crypto::Digest
Restart	ceph_crypto.h	/^      void Restart() {$/;"	f	class:ceph::crypto::HMAC
Result	Throttle.h	/^    Result(Context *_on_finish = NULL)$/;"	f	struct:OrderedThrottle::Result
Result	Throttle.h	/^  struct Result {$/;"	s	class:OrderedThrottle
SAFE_OPTION	config.cc	103;"	d	file:
SAFE_OPTION	config.cc	106;"	d	file:
SAFE_OPTION	config.h	291;"	d
SAFE_OPTION	config.h	306;"	d
SCTP_CRC32C	sctp_crc32.c	732;"	d	file:
SENTINEL_REFCNT	cohort_lru.h	/^      static constexpr uint32_t SENTINEL_REFCNT = 1;$/;"	m	class:cohort::lru::LRU
SET_DST	armor.c	53;"	d	file:
SGL_QUOTE_XESCAPE	escape.c	30;"	d	file:
SHA1	ceph_crypto.h	/^      SHA1 () : Digest(SEC_OID_SHA1, CEPH_CRYPTO_SHA1_DIGESTSIZE) { }$/;"	f	class:ceph::crypto::SHA1
SHA1	ceph_crypto.h	/^    class SHA1 : public Digest {$/;"	c	namespace:ceph::crypto
SHA256	ceph_crypto.h	/^      SHA256 () : Digest(SEC_OID_SHA256, CEPH_CRYPTO_SHA256_DIGESTSIZE) { }$/;"	f	class:ceph::crypto::SHA256
SHA256	ceph_crypto.h	/^    class SHA256 : public Digest {$/;"	c	namespace:ceph::crypto
SRV_Protocol	dns_resolve.h	/^    enum class SRV_Protocol {$/;"	c	class:ceph::DNSResolver
SSTRING_HH_	sstring.hh	27;"	d
SSTRL	escape.c	25;"	d	file:
STATE_HISTORY	TrackedOp.h	/^    STATE_HISTORY$/;"	e	enum:TrackedOp::__anon2
STATE_LIVE	TrackedOp.h	/^    STATE_LIVE,$/;"	e	enum:TrackedOp::__anon2
STATE_UNTRACKED	TrackedOp.h	/^    STATE_UNTRACKED = 0,$/;"	e	enum:TrackedOp::__anon2
STATIC_ASSERT	static_assert.h	22;"	d
STRINGIFY	BackTrace.cc	9;"	d	file:
STRINGIFY	common_init.cc	24;"	d	file:
STRINGIFY	config.cc	51;"	d	file:
STRINGIFY	version.cc	24;"	d	file:
STR_TO_ENTITY_TYPE	entity_name.cc	/^static const str_to_entity_type_t STR_TO_ENTITY_TYPE[] = {$/;"	v	file:
SUBSYS	config.cc	179;"	d	file:
SUBSYS	config.cc	184;"	d	file:
SUBSYS	config.h	353;"	d
SUBSYS	config.h	357;"	d
SUB_PROCESS_H	SubProcess.h	18;"	d
SafeTimer	Timer.cc	/^SafeTimer::SafeTimer(CephContext *cct_, Mutex &l, bool safe_callbacks)$/;"	f	class:SafeTimer
SafeTimer	Timer.h	/^class SafeTimer$/;"	c
SafeTimerThread	Timer.cc	/^  explicit SafeTimerThread(SafeTimer *s) : parent(s) {}$/;"	f	class:SafeTimerThread
SafeTimerThread	Timer.cc	/^class SafeTimerThread : public Thread {$/;"	c	file:
SchedCompare	ceph_timer.h	/^      struct SchedCompare {$/;"	s	class:ceph::timer_detail::timer
Semaphore	Semaphore.h	/^  Semaphore() : m("Semaphore::m")$/;"	f	class:Semaphore
Semaphore	Semaphore.h	/^class Semaphore$/;"	c
ShardedThreadPool	WorkQueue.cc	/^ShardedThreadPool::ShardedThreadPool(CephContext *pcct_, string nm, string tn,$/;"	f	class:ShardedThreadPool
ShardedThreadPool	WorkQueue.h	/^class ShardedThreadPool {$/;"	c
ShardedTrackingData	TrackedOp.cc	/^  explicit ShardedTrackingData(string lock_name):$/;"	f	struct:ShardedTrackingData
ShardedTrackingData	TrackedOp.cc	/^struct ShardedTrackingData {$/;"	s	file:
ShardedWQ	WorkQueue.h	/^    ShardedWQ(time_t ti, time_t sti, ShardedThreadPool* tp): BaseShardedWQ(ti, sti), $/;"	f	class:ShardedThreadPool::ShardedWQ
ShardedWQ	WorkQueue.h	/^  class ShardedWQ: public BaseShardedWQ {$/;"	c	class:ShardedThreadPool
SharedLRU	shared_cache.hpp	/^  SharedLRU(CephContext *cct = NULL, size_t max_size = 20)$/;"	f	class:SharedLRU
SharedLRU	shared_cache.hpp	/^class SharedLRU {$/;"	c
SharedPtrRegistry	sharedptr_registry.hpp	/^  SharedPtrRegistry() :$/;"	f	class:SharedPtrRegistry
SharedPtrRegistry	sharedptr_registry.hpp	/^class SharedPtrRegistry {$/;"	c
Signal	Cond.h	/^  int Signal() { $/;"	f	class:Cond
SignalAll	Cond.h	/^  int SignalAll() { $/;"	f	class:Cond
SignalOne	Cond.h	/^  int SignalOne() { $/;"	f	class:Cond
SimpleLRU	simple_cache.hpp	/^  SimpleLRU(size_t max_size) : lock("SimpleLRU::lock"), max_size(max_size) {$/;"	f	class:SimpleLRU
SimpleLRU	simple_cache.hpp	/^class SimpleLRU {$/;"	c
SimpleThrottle	Throttle.cc	/^SimpleThrottle::SimpleThrottle(uint64_t max, bool ignore_enoent)$/;"	f	class:SimpleThrottle
SimpleThrottle	Throttle.h	/^class SimpleThrottle {$/;"	c
Singleton	TracepointProvider.h	/^    Singleton(CephContext *cct, const char *library, const char *config_key)$/;"	f	class:TracepointProvider::Singleton
Singleton	TracepointProvider.h	/^  class Singleton {$/;"	c	class:TracepointProvider
SingletonWrapper	ceph_context.h	/^  struct SingletonWrapper : boost::noncopyable {$/;"	s	class:CephContext
Sit	WeightedPriorityQueue.h	/^      typedef typename SubQueues::iterator Sit;$/;"	t	class:WeightedPriorityQueue::Queue
SloppyCRCMap	SloppyCRCMap.h	/^  SloppyCRCMap(uint32_t b=0) {$/;"	f	class:SloppyCRCMap
SloppyCRCMap	SloppyCRCMap.h	/^class SloppyCRCMap {$/;"	c
SloppySignal	Cond.h	/^  int SloppySignal() { $/;"	f	class:Cond
SnapContext	snap_types.h	/^  SnapContext() {}$/;"	f	struct:SnapContext
SnapContext	snap_types.h	/^  SnapContext(snapid_t s, const vector<snapid_t>& v) : seq(s), snaps(v) {}    $/;"	f	struct:SnapContext
SnapContext	snap_types.h	/^struct SnapContext {$/;"	s
SnapRealmInfo	snap_types.h	/^  SnapRealmInfo() {$/;"	f	struct:SnapRealmInfo
SnapRealmInfo	snap_types.h	/^  SnapRealmInfo(inodeno_t ino_, snapid_t created_, snapid_t seq_, snapid_t current_parent_since_) {$/;"	f	struct:SnapRealmInfo
SnapRealmInfo	snap_types.h	/^struct SnapRealmInfo {$/;"	s
SortPerfCountersByName	perf_counters.h	/^class SortPerfCountersByName {$/;"	c
StoreDriver	map_cacher.hpp	/^class StoreDriver {$/;"	c	namespace:MapCacher
SubProcess	SubProcess.h	/^class SubProcess {$/;"	c
SubProcess	SubProcess.h	/^inline SubProcess::SubProcess(const char *cmd_, std_fd_op stdin_op_, std_fd_op stdout_op_, std_fd_op stderr_op_) :$/;"	f	class:SubProcess
SubProcessTimed	SubProcess.h	/^class SubProcessTimed : public SubProcess {$/;"	c
SubProcessTimed	SubProcess.h	/^inline SubProcessTimed::SubProcessTimed(const char *cmd, std_fd_op stdin_op,$/;"	f	class:SubProcessTimed
SubQueue	PrioritizedQueue.h	/^    SubQueue()$/;"	f	struct:PrioritizedQueue::SubQueue
SubQueue	PrioritizedQueue.h	/^    SubQueue(const SubQueue &other)$/;"	f	struct:PrioritizedQueue::SubQueue
SubQueue	PrioritizedQueue.h	/^  struct SubQueue {$/;"	s	class:PrioritizedQueue
SubQueue	WeightedPriorityQueue.h	/^	SubQueue(unsigned& p) :$/;"	f	class:WeightedPriorityQueue::SubQueue
SubQueue	WeightedPriorityQueue.h	/^    class SubQueue : public bi::set_base_hook<>$/;"	c	class:WeightedPriorityQueue
SubQueue	mClockPriorityQueue.h	/^      SubQueue()$/;"	f	struct:ceph::mClockQueue::SubQueue
SubQueue	mClockPriorityQueue.h	/^      SubQueue(const SubQueue &other)$/;"	f	struct:ceph::mClockQueue::SubQueue
SubQueue	mClockPriorityQueue.h	/^    struct SubQueue {$/;"	s	class:ceph::mClockQueue
SubQueues	PrioritizedQueue.h	/^  typedef std::map<unsigned, SubQueue> SubQueues;$/;"	t	class:PrioritizedQueue
SubQueues	WeightedPriorityQueue.h	/^      typedef bi::rbtree<SubQueue> SubQueues;$/;"	t	class:WeightedPriorityQueue::Queue
TAB_JESCAPE	escape.c	117;"	d	file:
TCP	dns_resolve.h	/^      TCP, UDP$/;"	m	class:ceph::DNSResolver::SRV_Protocol
TEXT_TABLE_H_	TextTable.h	16;"	d
TPHandle	WorkQueue.h	/^    TPHandle($/;"	f	class:ThreadPool::TPHandle
TPHandle	WorkQueue.h	/^  class TPHandle {$/;"	c	class:ThreadPool
TRACEPOINT_DEFINE	EventTrace.cc	23;"	d	file:
TRACEPOINT_DEFINE	EventTrace.cc	27;"	d	file:
TRACEPOINT_PROBE_DYNAMIC_LINKAGE	EventTrace.cc	24;"	d	file:
TRACEPOINT_PROBE_DYNAMIC_LINKAGE	EventTrace.cc	26;"	d	file:
TRACKEDREQUEST_H_	TrackedOp.h	15;"	d
TYPE_ADDR	options.h	/^    TYPE_ADDR,$/;"	e	enum:Option::type_t
TYPE_BOOL	options.h	/^    TYPE_BOOL,$/;"	e	enum:Option::type_t
TYPE_FLOAT	options.h	/^    TYPE_FLOAT,$/;"	e	enum:Option::type_t
TYPE_INT	options.h	/^    TYPE_INT,$/;"	e	enum:Option::type_t
TYPE_STR	options.h	/^    TYPE_STR,$/;"	e	enum:Option::type_t
TYPE_UINT	options.h	/^    TYPE_UINT,$/;"	e	enum:Option::type_t
TYPE_UUID	options.h	/^    TYPE_UUID,$/;"	e	enum:Option::type_t
TableFormatter	Formatter.cc	/^TableFormatter::TableFormatter(bool keyval) : m_keyval(keyval)$/;"	f	class:ceph::TableFormatter
TableFormatter	Formatter.h	/^  class TableFormatter : public Formatter {$/;"	c	namespace:ceph
TakenForRead	RWLock.h	/^      TakenForRead = 1,$/;"	e	enum:final::Context::LockState
TakenForWrite	RWLock.h	/^      TakenForWrite = 2,$/;"	e	enum:final::Context::LockState
TextTable	TextTable.h	/^  TextTable(): curcol(0), currow(0), indent(0) {}$/;"	f	class:TextTable
TextTable	TextTable.h	/^class TextTable {$/;"	c
TextTableColumn	TextTable.h	/^    TextTableColumn() {}$/;"	f	struct:TextTable::TextTableColumn
TextTableColumn	TextTable.h	/^    TextTableColumn(std::string h, int w, Align ha, Align ca) :$/;"	f	struct:TextTable::TextTableColumn
TextTableColumn	TextTable.h	/^  struct TextTableColumn {$/;"	s	class:TextTable
Thread	Thread.cc	/^Thread::Thread()$/;"	f	class:Thread
Thread	Thread.h	/^class Thread {$/;"	c
ThreadPool	WorkQueue.cc	/^ThreadPool::ThreadPool(CephContext *cct_, string nm, string tn, int n, const char *option)$/;"	f	class:ThreadPool
ThreadPool	WorkQueue.h	/^class ThreadPool : public md_config_obs_t {$/;"	c
Throttle	Throttle.cc	/^Throttle::Throttle(CephContext *cct, const std::string& n, int64_t m, bool _use_perf)$/;"	f	class:Throttle
Throttle	Throttle.h	/^class Throttle {$/;"	c
TidResult	Throttle.h	/^  typedef std::map<uint64_t, Result> TidResult;$/;"	t	class:OrderedThrottle
Trace	zipkin_trace.h	/^  Trace() {}$/;"	f	class:ZTracer::Trace
Trace	zipkin_trace.h	/^  Trace(const char *name, const Endpoint *ep, const Trace *parent = NULL) {}$/;"	f	class:ZTracer::Trace
Trace	zipkin_trace.h	/^  Trace(const char *name, const Endpoint *ep,$/;"	f	class:ZTracer::Trace
Trace	zipkin_trace.h	/^class Trace {$/;"	c	namespace:ZTracer
TracepointProvider	TracepointProvider.cc	/^TracepointProvider::TracepointProvider(CephContext *cct, const char *library,$/;"	f	class:TracepointProvider
TracepointProvider	TracepointProvider.h	/^class TracepointProvider : public md_config_obs_t, boost::noncopyable {$/;"	c
TrackedIntPtr	tracked_int_ptr.hpp	/^  TrackedIntPtr() : ptr(NULL), id(0) {}$/;"	f	class:TrackedIntPtr
TrackedIntPtr	tracked_int_ptr.hpp	/^  TrackedIntPtr(T *ptr) : ptr(ptr), id(ptr ? get_with_id(ptr) : 0) {}$/;"	f	class:TrackedIntPtr
TrackedIntPtr	tracked_int_ptr.hpp	/^  TrackedIntPtr(const TrackedIntPtr &rhs) :$/;"	f	class:TrackedIntPtr
TrackedIntPtr	tracked_int_ptr.hpp	/^class TrackedIntPtr {$/;"	c
TrackedOp	TrackedOp.h	/^  TrackedOp(OpTracker *_tracker, const utime_t& initiated) :$/;"	f	class:TrackedOp
TrackedOp	TrackedOp.h	/^class TrackedOp : public boost::intrusive::list_base_hook<> {$/;"	c
TrackedOpRef	TrackedOp.h	/^typedef boost::intrusive_ptr<TrackedOp> TrackedOpRef;$/;"	t
Traits	TracepointProvider.h	/^    Traits(const char *library, const char *config_key)$/;"	f	struct:TracepointProvider::Traits
Traits	TracepointProvider.h	/^  struct Traits {$/;"	s	class:TracepointProvider
TransHolder	map_cacher.hpp	/^  typedef ContainerContext<set<VPtr> > TransHolder;$/;"	t	class:MapCacher::MapCacher
Transaction	map_cacher.hpp	/^class Transaction {$/;"	c	namespace:MapCacher
TreeX	cohort_lru.h	/^      TreeX(int n_part=1, int csz=127) : n_part(n_part), csz(csz) {$/;"	f	class:cohort::lru::TreeX
TreeX	cohort_lru.h	/^    class TreeX$/;"	c	namespace:cohort::lru
TryLock	Mutex.h	/^  bool TryLock() {$/;"	f	class:Mutex
Tub	Tub.h	/^  Tub(): occupied(false) {}$/;"	f	class:Tub
Tub	Tub.h	/^  Tub(ElementType&& other) \/\/ NOLINT$/;"	f	class:Tub
Tub	Tub.h	/^  Tub(Tub<ElementType>&& other) \/\/ NOLINT$/;"	f	class:Tub
Tub	Tub.h	/^  Tub(const ElementType& other) \/\/ NOLINT$/;"	f	class:Tub
Tub	Tub.h	/^  Tub(const Tub<ElementType>& other) \/\/ NOLINT$/;"	f	class:Tub
Tub	Tub.h	/^class Tub {$/;"	c
TypedSingleton	TracepointProvider.h	/^    explicit TypedSingleton(CephContext *cct)$/;"	f	class:TracepointProvider::TypedSingleton
TypedSingleton	TracepointProvider.h	/^  class TypedSingleton : public Singleton {$/;"	c	class:TracepointProvider
TypedSingletonWrapper	ceph_context.h	/^    TypedSingletonWrapper(T *p) : singleton(p) {$/;"	f	struct:CephContext::TypedSingletonWrapper
TypedSingletonWrapper	ceph_context.h	/^  struct TypedSingletonWrapper : public SingletonWrapper {$/;"	s	class:CephContext
UINT64_MAX	hobject.h	31;"	d
UINT8_MAX	types.cc	22;"	d	file:
UUID_LEN	blkdev.cc	23;"	d	file:
Unlock	Mutex.cc	/^void Mutex::Unlock() {$/;"	f	class:Mutex
Untaken	RWLock.h	/^      Untaken = 0,$/;"	e	enum:final::Context::LockState
Update	ceph_crypto.h	/^      void Update (const byte *input, size_t length) {$/;"	f	class:ceph::crypto::Digest
Update	ceph_crypto.h	/^      void Update (const byte *input, size_t length) {$/;"	f	class:ceph::crypto::HMAC
UpdateContext	lru_map.h	/^  class UpdateContext {$/;"	c	class:lru_map
VMX_ALIGN	crc32c_ppc.c	20;"	d	file:
VMX_ALIGN_MASK	crc32c_ppc.c	21;"	d	file:
VPERM	crc32c_ppc_asm.S	/^#define VPERM(A, B, C, D) vperm	A, B, C, D$/;"	d
VPERM	crc32c_ppc_asm.S	/^#define VPERM(A, B, C, D)$/;"	d
VPMSUMD	ppc-opcode.h	27;"	d
VPMSUMW	ppc-opcode.h	26;"	d
VPtr	map_cacher.hpp	/^  typedef typename SharedPtrRegistry<K, boost::optional<V> >::VPtr VPtr;$/;"	t	class:MapCacher::MapCacher
VPtr	shared_cache.hpp	/^  typedef ceph::shared_ptr<V> VPtr;$/;"	t	class:SharedLRU
VPtr	sharedptr_registry.hpp	/^  typedef ceph::shared_ptr<V> VPtr;$/;"	t	class:SharedPtrRegistry
VSX_XX1	ppc-opcode.h	19;"	d
VSX_XX3	ppc-opcode.h	18;"	d
VersionHook	admin_socket.cc	/^class VersionHook : public AdminSocketHook {$/;"	c	file:
WARN_UNUSED_RESULT	compiler_extensions.h	24;"	d
WARN_UNUSED_RESULT	compiler_extensions.h	27;"	d
WLocker	RWLock.h	/^    explicit WLocker(RWLock& lock) : m_lock(lock) {$/;"	f	class:final::WLocker
WLocker	RWLock.h	/^  class WLocker {$/;"	c	class:final
WP_QUEUE_H	WeightedPriorityQueue.h	16;"	d
Wait	Cond.h	/^  int Wait(Mutex &mutex)  { $/;"	f	class:Cond
WaitInterval	Cond.h	/^  int WaitInterval(Mutex &mutex, Duration interval) {$/;"	f	class:Cond
WaitInterval	Cond.h	/^  int WaitInterval(Mutex &mutex, utime_t interval) {$/;"	f	class:Cond
WaitUntil	Cond.h	/^  int WaitUntil(Mutex &mutex, utime_t when) {$/;"	f	class:Cond
WeakVPtr	shared_cache.hpp	/^  typedef ceph::weak_ptr<V> WeakVPtr;$/;"	t	class:SharedLRU
WeakVPtr	sharedptr_registry.hpp	/^  typedef ceph::weak_ptr<V> WeakVPtr;$/;"	t	class:SharedPtrRegistry
WeightedPriorityQueue	WeightedPriorityQueue.h	/^    WeightedPriorityQueue(unsigned max_per, unsigned min_c) :$/;"	f	class:WeightedPriorityQueue
WeightedPriorityQueue	WeightedPriorityQueue.h	/^class WeightedPriorityQueue :  public OpQueue <T, K>$/;"	c
WorkQueue	WorkQueue.h	/^    WorkQueue(string n, time_t ti, time_t sti, ThreadPool* p)$/;"	f	class:ThreadPool::WorkQueue
WorkQueue	WorkQueue.h	/^  class WorkQueue : public WorkQueue_ {$/;"	c	class:ThreadPool
WorkQueueVal	WorkQueue.h	/^    WorkQueueVal(string n, time_t ti, time_t sti, ThreadPool *p)$/;"	f	class:ThreadPool::WorkQueueVal
WorkQueueVal	WorkQueue.h	/^  class WorkQueueVal : public WorkQueue_ {$/;"	c	class:ThreadPool
WorkQueue_	WorkQueue.h	/^    WorkQueue_(string n, time_t ti, time_t sti)$/;"	f	struct:ThreadPool::WorkQueue_
WorkQueue_	WorkQueue.h	/^  struct WorkQueue_ {$/;"	s	class:ThreadPool
WorkThread	WorkQueue.h	/^    WorkThread(ThreadPool *p) : pool(p) {}$/;"	f	struct:ThreadPool::WorkThread
WorkThread	WorkQueue.h	/^  struct WorkThread : public Thread {$/;"	s	class:ThreadPool
WorkThreadSharded	WorkQueue.h	/^    WorkThreadSharded(ShardedThreadPool *p, uint32_t pthread_index): pool(p),$/;"	f	struct:ShardedThreadPool::WorkThreadSharded
WorkThreadSharded	WorkQueue.h	/^  struct WorkThreadSharded : public Thread {$/;"	s	class:ShardedThreadPool
XMLFormatter	Formatter.cc	/^XMLFormatter::XMLFormatter(bool pretty, bool lowercased, bool underscored)$/;"	f	class:ceph::XMLFormatter
XMLFormatter	Formatter.h	/^  class XMLFormatter : public Formatter {$/;"	c	namespace:ceph
XML_1_DTD	Formatter.cc	/^const char *XMLFormatter::XML_1_DTD =$/;"	m	class:ceph::XMLFormatter	file:
XML_1_DTD	Formatter.h	/^    static const char *XML_1_DTD;$/;"	m	class:ceph::XMLFormatter
Y	iso_8601.h	/^  Y, YM, YMD, YMDh, YMDhm, YMDhms, YMDhmsn$/;"	m	class:ceph::iso_8601_format
YM	iso_8601.h	/^  Y, YM, YMD, YMDh, YMDhm, YMDhms, YMDhmsn$/;"	m	class:ceph::iso_8601_format
YMD	iso_8601.h	/^  Y, YM, YMD, YMDh, YMDhm, YMDhms, YMDhmsn$/;"	m	class:ceph::iso_8601_format
YMDh	iso_8601.h	/^  Y, YM, YMD, YMDh, YMDhm, YMDhms, YMDhmsn$/;"	m	class:ceph::iso_8601_format
YMDhm	iso_8601.h	/^  Y, YM, YMD, YMDh, YMDhm, YMDhms, YMDhmsn$/;"	m	class:ceph::iso_8601_format
YMDhms	iso_8601.h	/^  Y, YM, YMD, YMDh, YMDhm, YMDhms, YMDhmsn$/;"	m	class:ceph::iso_8601_format
ZTracer	zipkin_trace.h	/^namespace ZTracer$/;"	n
_ASSERT_H	ceph_json.h	12;"	d
_EventTrace_h_	EventTrace.h	19;"	d
_G	options.cc	/^constexpr unsigned long long operator"" _G (unsigned long long n) {$/;"	f
_K	options.cc	/^constexpr unsigned long long operator"" _K (unsigned long long n) {$/;"	f
_M	options.cc	/^constexpr unsigned long long operator"" _M (unsigned long long n) {$/;"	f
_STR	BackTrace.cc	8;"	d	file:
_STR	common_init.cc	23;"	d	file:
_STR	config.cc	50;"	d	file:
_STR	version.cc	23;"	d	file:
__ASSEMBLY__	crc32c_ppc_asm.S	/^#define __ASSEMBLY__$/;"	d
__CEPH_COMMON_BLKDEV_H	blkdev.h	2;"	d
__CEPH_LOG_GRAYLOG_H	Graylog.h	5;"	d
__CEPH_OS_HOBJECT_H	hobject.h	16;"	d
__CEPH_OS_REVERSE_H	reverse.h	16;"	d
__CEPH_SNAP_TYPES_H	snap_types.h	2;"	d
__CEPH_TYPES_H	types.cc	17;"	d	file:
__OPCODES_H	ppc-opcode.h	10;"	d
__PPC_RA	ppc-opcode.h	12;"	d
__PPC_RB	ppc-opcode.h	13;"	d
__PPC_XA	ppc-opcode.h	14;"	d
__PPC_XB	ppc-opcode.h	15;"	d
__PPC_XS	ppc-opcode.h	16;"	d
__PPC_XT	ppc-opcode.h	17;"	d
__ceph_assert_fail	assert.cc	/^  void __ceph_assert_fail(const char *assertion, const char *file, int line,$/;"	f	namespace:ceph
__ceph_assert_warn	assert.cc	/^  void __ceph_assert_warn(const char *assertion, const char *file,$/;"	f	namespace:ceph
__ceph_assertf_fail	assert.cc	/^  void __ceph_assertf_fail(const char *assertion, const char *file, int line,$/;"	f	namespace:ceph
_add	lru_map.h	/^void lru_map<K, V>::_add(const K& key, V& value)$/;"	f	class:lru_map
_add	simple_cache.hpp	/^  void _add(K key, V&& value) {$/;"	f	class:SimpleLRU
_admin_hook	ceph_context.h	/^  CephContextHook *_admin_hook;$/;"	m	class:CephContext
_admin_socket	ceph_context.h	/^  AdminSocket *_admin_socket;$/;"	m	class:CephContext
_aio_cb	obj_bencher.cc	/^void _aio_cb(void *cb, void *arg) {$/;"	f
_apply_changes	config.cc	/^void md_config_t::_apply_changes(std::ostream *oss)$/;"	f	class:md_config_t
_associated_objs	ceph_context.h	/^  std::map<std::string, SingletonWrapper*> _associated_objs;$/;"	m	class:CephContext
_associated_objs_lock	ceph_context.h	/^  ceph_spinlock_t _associated_objs_lock;$/;"	m	class:CephContext
_backport14	backport14.h	/^namespace _backport14 {$/;"	n	namespace:ceph
_backport17	backport14.h	/^namespace _backport17 {$/;"	n	namespace:ceph
_bad_endl_use_dendl_t	dout.h	/^class _bad_endl_use_dendl_t { public: _bad_endl_use_dendl_t(int) {} };$/;"	c
_bad_endl_use_dendl_t	dout.h	/^class _bad_endl_use_dendl_t { public: _bad_endl_use_dendl_t(int) {} };$/;"	f	class:_bad_endl_use_dendl_t
_c	Cond.h	/^  pthread_cond_t _c;$/;"	m	class:Cond
_calc_hash	LogEntry.h	/^  void _calc_hash() {$/;"	f	struct:LogEntryKey
_cct	ceph_context.cc	/^  CephContext *_cct;$/;"	m	class:CephContextServiceThread	file:
_cct_obs	ceph_context.h	/^  CephContextObs *_cct_obs;$/;"	m	class:CephContext
_cct_perf	ceph_context.h	/^  PerfCounters *_cct_perf;$/;"	m	class:CephContext
_cct_perf_lock	ceph_context.h	/^  ceph_spinlock_t _cct_perf_lock;$/;"	m	class:CephContext
_check	HeartbeatMap.cc	/^bool HeartbeatMap::_check(const heartbeat_handle_d *h, const char *who, time_t now)$/;"	f	class:ceph::HeartbeatMap
_compute_readahead	Readahead.cc	/^Readahead::extent_t Readahead::_compute_readahead(uint64_t limit) {$/;"	f	class:Readahead
_cond	WorkQueue.h	/^  Cond _cond;$/;"	m	class:ThreadPool
_cond	ceph_context.cc	/^  Cond _cond;$/;"	m	class:CephContextServiceThread	file:
_conf	ceph_context.h	/^  md_config_t *_conf;$/;"	m	class:CephContext
_conf_keys	WorkQueue.h	/^  const char **_conf_keys;$/;"	m	class:ThreadPool
_continue_function	Continuation.h	/^  bool _continue_function(int r, int n) {$/;"	f	class:Continuation
_contract	histogram.h	/^  void _contract() {$/;"	f	struct:pow2_hist_t
_crypto_aes	ceph_context.h	/^  CryptoHandler *_crypto_aes;$/;"	m	class:CephContext
_crypto_inited	ceph_context.h	/^  bool _crypto_inited;$/;"	m	class:CephContext
_crypto_none	ceph_context.h	/^  CryptoHandler *_crypto_none;$/;"	m	class:CephContext
_day	options.cc	/^constexpr unsigned long long operator"" _day (unsigned long long day) {$/;"	f
_done	Continuation.h	/^   virtual void _done() {$/;"	f	class:Continuation
_draining	WorkQueue.h	/^  int _draining;$/;"	m	class:ThreadPool
_dump	AsyncReserver.h	/^  void _dump(Formatter *f) {$/;"	f	class:AsyncReserver
_dump	TrackedOp.h	/^  virtual void _dump(Formatter *f) const {}$/;"	f	class:TrackedOp
_dump_bit_str	bit_str.cc	/^static void _dump_bit_str($/;"	f	file:
_entry_func	Thread.cc	/^void *Thread::_entry_func(void *arg) {$/;"	f	class:Thread
_event_marked	TrackedOp.h	/^  virtual void _event_marked() {}$/;"	f	class:TrackedOp
_exit_thread	ceph_context.cc	/^  bool _exit_thread;$/;"	m	class:CephContextServiceThread	file:
_expand_to	histogram.h	/^  void _expand_to(unsigned s) {$/;"	f	struct:pow2_hist_t
_experimental_features	ceph_context.h	/^  std::set<std::string> _experimental_features;$/;"	m	class:CephContext
_feature_lock	ceph_context.h	/^  ceph_spinlock_t _feature_lock;$/;"	m	class:CephContext
_find	lru_map.h	/^bool lru_map<K, V>::_find(const K& key, V *value, UpdateContext *ctx)$/;"	f	class:lru_map
_fork_function_dummy_sighandler	fork_function.h	/^static void _fork_function_dummy_sighandler(int sig) {}$/;"	f
_fork_watchers	ceph_context.h	/^  std::vector<ForkWatcher*> _fork_watchers;$/;"	m	class:CephContext
_fork_watchers_lock	ceph_context.h	/^  ceph_spinlock_t _fork_watchers_lock;$/;"	m	class:CephContext
_gen_desc	TrackedOp.h	/^  void _gen_desc() const {$/;"	f	class:TrackedOp
_get_bits_of	page.cc	/^  int _get_bits_of(int v) {$/;"	f	namespace:ceph
_get_delay	Throttle.cc	/^std::chrono::duration<double> BackoffThrottle::_get_delay(uint64_t c) const$/;"	f	class:BackoffThrottle
_get_mon_log_message	LogClient.cc	/^Message *LogClient::_get_mon_log_message()$/;"	f	class:LogClient
_get_my_sections	config.cc	/^void md_config_t::_get_my_sections(std::vector <std::string> &sections) const$/;"	f	class:md_config_t
_get_val	config.cc	/^Option::value_t md_config_t::_get_val(const std::string &key) const$/;"	f	class:md_config_t
_get_val	config.cc	/^int md_config_t::_get_val(const std::string &key, char **buf, int len) const$/;"	f	class:md_config_t
_get_val	config.cc	/^int md_config_t::_get_val(const std::string &key, std::string *value) const {$/;"	f	class:md_config_t
_get_val_from_conf_file	config.cc	/^int md_config_t::_get_val_from_conf_file(const std::vector <std::string> &sections,$/;"	f	class:md_config_t
_hash	LogEntry.h	/^  uint64_t _hash = 0;$/;"	m	struct:LogEntryKey
_heartbeat_map	ceph_context.h	/^  ceph::HeartbeatMap *_heartbeat_map;$/;"	m	class:CephContext
_hr	options.cc	/^constexpr unsigned long long operator"" _hr (unsigned long long hr) {$/;"	f
_impl	deleter.h	/^  deleter(deleter&& x) noexcept : _impl(x._impl) { x._impl = nullptr; }$/;"	f	class:final
_impl	deleter.h	/^  impl* _impl = nullptr;$/;"	m	class:final
_init_flags	ceph_context.h	/^  int _init_flags;$/;"	m	class:CephContext
_internal_field	config.cc	/^bool md_config_t::_internal_field(const string& s)$/;"	f	class:md_config_t
_kick_waiters	Throttle.h	/^  void _kick_waiters() {$/;"	f	class:BackoffThrottle
_len	buffer.cc	/^  buffer::ptr::ptr(ptr&& p) noexcept : _raw(p._raw), _off(p._off), _len(p._len)$/;"	f
_lock	WorkQueue.h	/^    Mutex _lock;$/;"	m	class:ThreadPool::WorkQueueVal
_lock	WorkQueue.h	/^  Mutex _lock;$/;"	m	class:ThreadPool
_lock	ceph_context.cc	/^  Mutex _lock;$/;"	m	class:CephContextServiceThread	file:
_lockdep_obs	ceph_context.h	/^  md_config_obs_t *_lockdep_obs;$/;"	m	class:CephContext
_lockdep_register	lockdep.cc	/^static int _lockdep_register(const char *name)$/;"	f	file:
_locked	Mutex.h	/^  void _locked() {    \/\/ just locked$/;"	f	class:Mutex
_locked	mutex_debug.cc	/^void mutex_debugging_base::_locked() {    \/\/ just locked$/;"	f	class:ceph::mutex_debug_detail::mutex_debugging_base
_log	ceph_context.h	/^  ceph::logging::Log *_log;$/;"	m	class:CephContext
_log_obs	ceph_context.h	/^  md_config_obs_t *_log_obs;$/;"	m	class:CephContext
_m	Mutex.h	/^  pthread_mutex_t _m;$/;"	m	class:Mutex
_min	options.cc	/^constexpr unsigned long long operator"" _min (unsigned long long min) {$/;"	f
_module_type	ceph_context.h	/^  uint32_t _module_type;$/;"	m	class:CephContext
_num_threads	WorkQueue.h	/^  unsigned _num_threads;$/;"	m	class:ThreadPool
_observe_read	Readahead.cc	/^void Readahead::_observe_read(uint64_t offset, uint64_t length) {$/;"	f	class:Readahead
_old_threads	WorkQueue.h	/^  list<WorkThread*> _old_threads;  \/\/\/< need to be joined$/;"	m	class:ThreadPool
_page_mask	page.cc	/^  unsigned long _page_mask = ~(unsigned long)(_page_size - 1);$/;"	m	namespace:ceph	file:
_page_shift	page.cc	/^  unsigned _page_shift = _get_bits_of(_page_size - 1);$/;"	m	namespace:ceph	file:
_page_size	page.cc	/^  unsigned _page_size = sysconf(_SC_PAGESIZE);$/;"	m	namespace:ceph	file:
_pause	WorkQueue.h	/^  int _pause;$/;"	m	class:ThreadPool
_perf_counters_collection	ceph_context.h	/^  PerfCountersCollection *_perf_counters_collection;$/;"	m	class:CephContext
_perf_counters_conf_obs	ceph_context.h	/^  md_config_obs_t *_perf_counters_conf_obs;$/;"	m	class:CephContext
_plugin_registry	ceph_context.h	/^  PluginRegistry *_plugin_registry;$/;"	m	class:CephContext
_post_lock	Mutex.h	/^  void _post_lock() {$/;"	f	class:Mutex
_post_lock	mutex_debug.h	/^  void _post_lock() {$/;"	f	class:ceph::mutex_debug_detail::mutex_debugging
_pre_unlock	Mutex.h	/^  void _pre_unlock() {$/;"	f	class:Mutex
_pre_unlock	mutex_debug.h	/^  void _pre_unlock() {$/;"	f	class:ceph::mutex_debug_detail::mutex_debugging
_prefix	LogClient.cc	/^static ostream& _prefix(std::ostream *_dout, LogChannel *lc) {$/;"	f	file:
_prefix	LogClient.cc	/^static ostream& _prefix(std::ostream *_dout, LogClient *logc) {$/;"	f	file:
_prefix	TrackedOp.cc	/^static ostream& _prefix(std::ostream* _dout)$/;"	f	file:
_process_finish	WorkQueue.h	/^    virtual void _process_finish(T *) {}$/;"	f	class:ThreadPool::WorkQueue
_process_finish	WorkQueue.h	/^    virtual void _process_finish(U) {}$/;"	f	class:ThreadPool::WorkQueueVal
_process_finish	WorkQueue.h	/^    virtual void _process_finish(const list<T*> &) {}$/;"	f	class:ThreadPool::BatchWorkQueue
_push_waiter	Throttle.h	/^  std::list<std::condition_variable*>::iterator _push_waiter() {$/;"	f	class:BackoffThrottle
_queue	WorkQueue.h	/^  list<GenContext<ThreadPool::TPHandle&>*> _queue;$/;"	m	class:GenContextWQ
_register	Mutex.h	/^  void _register() {$/;"	f	class:Mutex
_register	mutex_debug.cc	/^void mutex_debugging_base::_register() {$/;"	f	class:ceph::mutex_debug_detail::mutex_debugging_base
_reopen_logs	ceph_context.cc	/^  bool _reopen_logs;$/;"	m	class:CephContextServiceThread	file:
_reset_max	Throttle.cc	/^void Throttle::_reset_max(int64_t m)$/;"	f	class:Throttle
_reverse_bits	hobject.h	/^  static uint32_t _reverse_bits(uint32_t v) {$/;"	f	struct:hobject_t
_reverse_nibbles	hobject.h	/^  static uint32_t _reverse_nibbles(uint32_t retval) {$/;"	f	struct:hobject_t
_sample	MemoryModel.cc	/^void MemoryModel::_sample(snap *psnap)$/;"	f	class:MemoryModel
_send_to_mon	LogClient.cc	/^void LogClient::_send_to_mon()$/;"	f	class:LogClient
_service_thread	ceph_context.h	/^  CephContextServiceThread *_service_thread;$/;"	m	class:CephContext
_service_thread_lock	ceph_context.h	/^  ceph_spinlock_t _service_thread_lock;$/;"	m	class:CephContext
_set_affinity	Thread.cc	/^static int _set_affinity(int id)$/;"	f	file:
_set_gid	ceph_context.h	/^  gid_t _set_gid; \/\/\/< gid to drop privs to$/;"	m	class:CephContext
_set_gid_string	ceph_context.h	/^  std::string _set_gid_string;$/;"	m	class:CephContext
_set_len	buffer.cc	/^    void _set_len(unsigned l) {$/;"	f	class:buffer::raw
_set_uid	ceph_context.h	/^  uid_t _set_uid; \/\/\/< uid to drop privs to$/;"	m	class:CephContext
_set_uid_string	ceph_context.h	/^  std::string _set_uid_string;$/;"	m	class:CephContext
_should_wait	Throttle.h	/^  bool _should_wait(int64_t c) const {$/;"	f	class:Throttle
_show_config	config.cc	/^void md_config_t::_show_config(std::ostream *out, Formatter *f)$/;"	f	class:md_config_t
_stop	WorkQueue.h	/^  bool _stop;$/;"	m	class:ThreadPool
_thread_num_option	WorkQueue.h	/^  string _thread_num_option;$/;"	m	class:ThreadPool
_threads	WorkQueue.h	/^  set<WorkThread*> _threads;$/;"	m	class:ThreadPool
_unregistered	TrackedOp.h	/^  virtual void _unregistered() {}$/;"	f	class:TrackedOp
_wait	Throttle.cc	/^bool Throttle::_wait(int64_t c)$/;"	f	class:Throttle
_wait	WorkQueue.h	/^    void _wait() {$/;"	f	class:ThreadPool::WorkQueue
_wait	WorkQueue.h	/^  void _wait() {$/;"	f	class:ThreadPool
_wait_cond	WorkQueue.h	/^  Cond _wait_cond;$/;"	m	class:ThreadPool
_wake	WorkQueue.h	/^    void _wake() {$/;"	f	class:ThreadPool::BatchWorkQueue
_wake	WorkQueue.h	/^    void _wake() {$/;"	f	class:ThreadPool::WorkQueue
_wake	WorkQueue.h	/^  void _wake() {$/;"	f	class:ThreadPool
_will_lock	Mutex.h	/^  void _will_lock() { \/\/ about to lock$/;"	f	class:Mutex
_will_lock	mutex_debug.cc	/^void mutex_debugging_base::_will_lock() { \/\/ about to lock$/;"	f	class:ceph::mutex_debug_detail::mutex_debugging_base
_will_unlock	Mutex.h	/^  void _will_unlock() {  \/\/ about to unlock$/;"	f	class:Mutex
_will_unlock	mutex_debug.cc	/^void mutex_debugging_base::_will_unlock() {  \/\/ about to unlock$/;"	f	class:ceph::mutex_debug_detail::mutex_debugging_base
abs	ceph_time.h	/^    inline timespan abs(signedspan z) {$/;"	f	namespace:std::__anon17
accept_cloexec	compat.cc	/^int accept_cloexec(int sockfd, struct sockaddr* addr, socklen_t* addrlen)$/;"	f
acquire_shared_t	shunique_lock.h	/^struct acquire_shared_t { };$/;"	s	namespace:ceph
acquire_unique_t	shunique_lock.h	/^struct acquire_unique_t { };$/;"	s	namespace:ceph
add	LogEntry.h	/^  void add(const LogEntry& e) {$/;"	f	struct:LogSummary
add	PluginRegistry.cc	/^int PluginRegistry::add(const std::string& type,$/;"	f	class:PluginRegistry
add	histogram.h	/^  void add(const pow2_hist_t& o) {$/;"	f	struct:pow2_hist_t
add	histogram.h	/^  void add(int32_t v) {$/;"	f	struct:pow2_hist_t
add	lru_map.h	/^void lru_map<K, V>::add(const K& key, V& value)$/;"	f	class:lru_map
add	perf_counters.cc	/^void PerfCountersCollection::add(class PerfCounters *l)$/;"	f	class:PerfCountersCollection
add	random_cache.hpp	/^  void add(K key, V value) {$/;"	f	class:RandomCache
add	shared_cache.hpp	/^  VPtr add(const K& key, V *value, bool *existed = NULL) {$/;"	f	class:SharedLRU
add	simple_cache.hpp	/^  void add(K key, V value) {$/;"	f	class:SimpleLRU
add_child	ceph_json.cc	/^void JSONObj::add_child(string el, JSONObj *obj)$/;"	f	class:JSONObj
add_cleanup_file	OutputDataSocket.cc	/^static void add_cleanup_file(const char *file)$/;"	f	file:
add_cleanup_file	admin_socket.cc	/^static void add_cleanup_file(const char *file)$/;"	f	file:
add_cmd_arg	SubProcess.h	/^inline void SubProcess::add_cmd_arg(const char *arg) {$/;"	f	class:SubProcess
add_cmd_args	SubProcess.h	/^inline void SubProcess::add_cmd_args(const char *arg, ...) {$/;"	f	class:SubProcess
add_event	ceph_timer.h	/^      uint64_t add_event(typename TC::duration duration,$/;"	f	class:ceph::timer_detail::timer
add_event	ceph_timer.h	/^      uint64_t add_event(typename TC::time_point when,$/;"	f	class:ceph::timer_detail::timer
add_event_after	Timer.cc	/^Context* SafeTimer::add_event_after(double seconds, Context *callback)$/;"	f	class:SafeTimer
add_event_at	Timer.cc	/^Context* SafeTimer::add_event_at(utime_t when, Context *callback)$/;"	f	class:SafeTimer
add_impl	perf_counters.cc	/^void PerfCountersBuilder::add_impl($/;"	f	class:PerfCountersBuilder
add_observer	config.cc	/^void md_config_t::add_observer(md_config_obs_t* observer_)$/;"	f	class:md_config_t
add_see_also	options.h	/^  Option& add_see_also(const char* t) {$/;"	f	struct:Option
add_see_also	options.h	/^  Option& add_see_also(std::initializer_list<const char*> ts) {$/;"	f	struct:Option
add_service	options.h	/^  Option& add_service(const char* service) {$/;"	f	struct:Option
add_service	options.h	/^  Option& add_service(std::initializer_list<const char*> ss) {$/;"	f	struct:Option
add_shard	scrub_types.cc	/^void inconsistent_obj_wrapper::add_shard(const pg_shard_t& pgs,$/;"	f	class:inconsistent_obj_wrapper
add_tag	options.h	/^  Option& add_tag(const char* tag) {$/;"	f	struct:Option
add_tag	options.h	/^  Option& add_tag(std::initializer_list<const char*> ts) {$/;"	f	struct:Option
add_time	perf_counters.cc	/^void PerfCountersBuilder::add_time($/;"	f	class:PerfCountersBuilder
add_time_avg	perf_counters.cc	/^void PerfCountersBuilder::add_time_avg($/;"	f	class:PerfCountersBuilder
add_u64	perf_counters.cc	/^void PerfCountersBuilder::add_u64($/;"	f	class:PerfCountersBuilder
add_u64_avg	perf_counters.cc	/^void PerfCountersBuilder::add_u64_avg($/;"	f	class:PerfCountersBuilder
add_u64_counter	perf_counters.cc	/^void PerfCountersBuilder::add_u64_counter($/;"	f	class:PerfCountersBuilder
add_u64_counter_histogram	perf_counters.cc	/^void PerfCountersBuilder::add_u64_counter_histogram($/;"	f	class:PerfCountersBuilder
add_work_queue	WorkQueue.h	/^  void add_work_queue(WorkQueue_* wq) {$/;"	f	class:ThreadPool
add_worker	HeartbeatMap.cc	/^heartbeat_handle_d *HeartbeatMap::add_worker(const string& name, pthread_t thread_id)$/;"	f	class:ceph::HeartbeatMap
addr	dns_resolve.h	/^      entity_addr_t addr;$/;"	m	struct:ceph::DNSResolver::Record
adjust	DecayCounter.h	/^  void adjust(double a) {$/;"	f	class:DecayCounter
adjust	DecayCounter.h	/^  void adjust(utime_t now, const DecayRate& rate, double a) {$/;"	f	class:DecayCounter
adjust_count	mempool.cc	/^void mempool::pool_t::adjust_count(ssize_t items, ssize_t bytes)$/;"	f	class:mempool::pool_t
adjust_event	ceph_timer.h	/^      bool adjust_event(uint64_t id, typename TC::duration duration) {$/;"	f	class:ceph::timer_detail::timer
adjust_event	ceph_timer.h	/^      bool adjust_event(uint64_t id, typename TC::time_point when) {$/;"	f	class:ceph::timer_detail::timer
advance	buffer.cc	/^  void buffer::list::iterator::advance(int o)$/;"	f	class:buffer::list::iterator
advance	buffer.cc	/^  void buffer::list::iterator_impl<is_const>::advance(int o)$/;"	f	class:buffer::list::iterator_impl
after_lock_blocks	mutex_debug.cc	/^void mutex_debugging_base::after_lock_blocks(ceph::mono_time start,$/;"	f	class:ceph::mutex_debug_detail::mutex_debugging_base
aio_bench	obj_bencher.cc	/^int ObjBencher::aio_bench($/;"	f	class:ObjBencher
align	buffer.cc	/^    unsigned align;$/;"	m	class:buffer::raw_hack_aligned	file:
align	buffer.cc	/^    unsigned align;$/;"	m	class:buffer::raw_posix_aligned	file:
align_down	align.h	/^inline constexpr T align_down(T v, T align) {$/;"	f
align_loop	crc32c_intel_fast_asm.s	/^align_loop:$/;"	l
align_up	align.h	/^inline constexpr T align_up(T v, T align) {$/;"	f
alignment	buffer.cc	/^    size_t alignment;$/;"	m	class:buffer::raw_combined	file:
allocated_bytes	mempool.cc	/^size_t mempool::pool_t::allocated_bytes() const$/;"	f	class:mempool::pool_t
allocated_items	mempool.cc	/^size_t mempool::pool_t::allocated_items() const$/;"	f	class:mempool::pool_t
always_false	hobject.h	/^struct always_false {$/;"	s
am_self	Thread.cc	/^bool Thread::am_self() const$/;"	f	class:Thread
append	buffer.cc	/^  unsigned buffer::ptr::append(char c)$/;"	f	class:buffer::ptr
append	buffer.cc	/^  unsigned buffer::ptr::append(const char *p, unsigned l)$/;"	f	class:buffer::ptr
append	buffer.cc	/^  void buffer::list::append(char c)$/;"	f	class:buffer::list
append	buffer.cc	/^  void buffer::list::append(const char *data, unsigned len)$/;"	f	class:buffer::list
append	buffer.cc	/^  void buffer::list::append(const list& bl)$/;"	f	class:buffer::list
append	buffer.cc	/^  void buffer::list::append(const ptr& bp)$/;"	f	class:buffer::list
append	buffer.cc	/^  void buffer::list::append(const ptr& bp, unsigned off, unsigned len)$/;"	f	class:buffer::list
append	buffer.cc	/^  void buffer::list::append(ptr&& bp)$/;"	f	class:buffer::list
append	buffer.cc	/^  void buffer::list::append(std::istream& in)$/;"	f	class:buffer::list
append	deleter.h	/^inline void deleter::append(deleter d) {$/;"	f	class:deleter
append	sstring.hh	/^    basic_sstring& append (const char_type* s, size_t n) {$/;"	f	class:basic_sstring
append_escaped	hobject.cc	/^static void append_escaped(const string &in, string *out)$/;"	f	file:
append_out_escaped	hobject.cc	/^static void append_out_escaped(const string &in, string *out)$/;"	f	file:
append_output	OutputDataSocket.cc	/^void OutputDataSocket::append_output(bufferlist& bl)$/;"	f	class:OutputDataSocket
append_zero	buffer.cc	/^  void buffer::list::append_zero(unsigned len)$/;"	f	class:buffer::list
append_zeros	crc32c_ppc.c	/^unsigned int append_zeros(unsigned int crc, unsigned long length) {$/;"	f
apply	inline_variant.h	/^	struct apply$/;"	s	struct:detail::as_map::insert_helper
apply	inline_variant.h	/^    struct apply : boost::function_types::result_type<typename signature_of<Function>::type>$/;"	s	struct:function_return_extractor
apply	inline_variant.h	/^    struct apply {$/;"	s	struct:detail::make_pair
apply	inline_variant.h	/^    struct apply$/;"	s	struct:check_same
apply	inline_variant.h	/^    struct apply$/;"	s	struct:detail::check_in
apply	inline_variant.h	/^    struct apply$/;"	s	struct:detail::function_arg_extractor
apply_changes	config.cc	/^void md_config_t::apply_changes(std::ostream *oss)$/;"	f	class:md_config_t
apply_helper	inline_variant.h	/^    Result apply_helper(const T& object, boost::mpl::false_) const {$/;"	f	struct:detail::generic_visitor
apply_helper	inline_variant.h	/^    Result apply_helper(const T& object, boost::mpl::true_) const {$/;"	f	struct:detail::generic_visitor
approx_unique_element_count	bloom_filter.hpp	/^  virtual inline double approx_unique_element_count() const {$/;"	f	class:bloom_filter
are_pending	LogClient.cc	/^bool LogClient::are_pending()$/;"	f	class:LogClient
arg_types	inline_variant.h	/^    typedef typename boost::mpl::transform<function_types, function_arg_extractor>::type arg_types;$/;"	t	struct:detail::generic_visitor
argv_to_vec	ceph_argparse.cc	/^void argv_to_vec(int argc, const char **argv,$/;"	f
arity	inline_variant.h	/^        typedef typename boost::function_types::function_arity<normalized_function_type>::type arity;$/;"	t	struct:detail::function_arg_extractor::apply
arrived	TrackedOp.h	/^  set<pair<utime_t, TrackedOpRef> > arrived;$/;"	m	class:OpHistory
as_map	inline_variant.h	/^struct as_map$/;"	s	namespace:detail
asok_connect	admin_socket_client.cc	/^static std::string asok_connect(const std::string &path, int *fd)$/;"	f	file:
asok_request	admin_socket_client.cc	/^static std::string asok_request(int socket_fd, std::string request)$/;"	f	file:
assign	autovector.h	/^autovector<T, kSize>& autovector<T, kSize>::assign(const autovector& other) {$/;"	f	class:ceph::autovector
assign_visitor	config.cc	/^  assign_visitor(md_config_t *conf_, Option::value_t val_)$/;"	f	class:assign_visitor
assign_visitor	config.cc	/^class assign_visitor : public boost::static_visitor<>$/;"	c	file:
at	autovector.h	/^  const_reference at(size_type n) const {$/;"	f	class:ceph::autovector
at	autovector.h	/^  reference at(size_type n) {$/;"	f	class:ceph::autovector
at	sstring.hh	/^    char_type& at(size_t pos) {$/;"	f	class:basic_sstring
at	sstring.hh	/^    const char_type& at(size_t pos) const {$/;"	f	class:basic_sstring
at_buffer_tail	buffer.cc	/^  bool buffer::ptr::at_buffer_tail() const { return _off + _len == _raw->len; }$/;"	f	class:buffer::ptr
attr_map	ceph_json.h	/^  map<string, string> attr_map;$/;"	m	class:JSONObj
attrs	Formatter.h	/^    std::list< std::pair<std::string, std::string> > attrs;$/;"	m	struct:ceph::FormatterAttrs
autovector	autovector.h	/^  autovector(const autovector& other) { assign(other); }$/;"	f	class:ceph::autovector
autovector	autovector.h	/^  autovector(std::initializer_list<T> init_list) {$/;"	f	class:ceph::autovector
autovector	autovector.h	/^class autovector {$/;"	c	namespace:ceph
avg_latency	obj_bencher.h	/^  double avg_latency;$/;"	m	struct:bench_data
avg_tracker	perf_counters.h	/^    avg_tracker() : last(0, 0), cur(0, 0) {}$/;"	f	struct:PerfCounters::avg_tracker
avg_tracker	perf_counters.h	/^  struct avg_tracker {$/;"	s	class:PerfCounters
avgcount	perf_counters.h	/^    std::atomic<uint64_t> avgcount = { 0 };$/;"	m	struct:PerfCounters::perf_counter_data_any_d
avgcount2	perf_counters.h	/^    std::atomic<uint64_t> avgcount2 = { 0 };$/;"	m	struct:PerfCounters::perf_counter_data_any_d
axis_config_d	perf_histogram.h	/^    axis_config_d(const char* name,$/;"	f	struct:PerfHistogramCommon::axis_config_d
axis_config_d	perf_histogram.h	/^  struct axis_config_d {$/;"	s	class:PerfHistogramCommon
back	autovector.h	/^  const_reference back() const {$/;"	f	class:ceph::autovector
back	autovector.h	/^  reference back() {$/;"	f	class:ceph::autovector
backtrace	Mutex.h	/^  bool backtrace;  \/\/ gather backtrace on lock acquisition$/;"	m	class:Mutex
backtrace	mutex_debug.h	/^  bool backtrace; \/\/ gather backtrace on lock acquisition$/;"	m	class:ceph::mutex_debug_detail::mutex_debugging_base
bandwidth	obj_bencher.h	/^  vector<double> bandwidth;$/;"	m	struct:bench_history
bare_function_types	inline_variant.h	/^    >::type bare_function_types;$/;"	t	struct:get_generic_visitor
bare_type	inline_variant.h	/^        typedef typename boost::remove_const< typename boost::remove_reference<Function>::type >::type bare_type;$/;"	t	struct:detail::function_arg_extractor::apply
base	function_signature.h	/^    typedef typename boost::mpl::pop_front<parameter_types>::type base;$/;"	t	struct:signature_of_member
basic_sstring	sstring.hh	/^    basic_sstring(InputIterator first, InputIterator last)$/;"	f	class:basic_sstring
basic_sstring	sstring.hh	/^    basic_sstring(const basic_sstring& x) {$/;"	f	class:basic_sstring
basic_sstring	sstring.hh	/^    basic_sstring(const char* x) : basic_sstring(reinterpret_cast<const char_type*>(x), std::strlen(x)) {}$/;"	f	class:basic_sstring
basic_sstring	sstring.hh	/^    basic_sstring(const char_type* b, const char_type* e) : basic_sstring(b, e - b) {}$/;"	f	class:basic_sstring
basic_sstring	sstring.hh	/^    basic_sstring(const char_type* x, size_t size) {$/;"	f	class:basic_sstring
basic_sstring	sstring.hh	/^    basic_sstring(const std::basic_string<char_type>& s)$/;"	f	class:basic_sstring
basic_sstring	sstring.hh	/^    basic_sstring(initialized_later, size_t size) {$/;"	f	class:basic_sstring
basic_sstring	sstring.hh	/^    basic_sstring(size_t size, char_type x) : basic_sstring(initialized_later(), size) {$/;"	f	class:basic_sstring
basic_sstring	sstring.hh	/^    basic_sstring(std::basic_string<char_type>& x) : basic_sstring(x.c_str(), x.size()) {}$/;"	f	class:basic_sstring
basic_sstring	sstring.hh	/^    basic_sstring(std::initializer_list<char_type> x) : basic_sstring(x.begin(), x.end() - x.begin()) {}$/;"	f	class:basic_sstring
basic_sstring	sstring.hh	/^class basic_sstring {$/;"	c
bdout	buffer.cc	47;"	d	file:
before_lock_blocks	mutex_debug.cc	/^ceph::mono_time mutex_debugging_base::before_lock_blocks() {$/;"	f	class:ceph::mutex_debug_detail::mutex_debugging_base
begin	Continuation.h	/^  void begin() { stages_in_flight.insert(0); continue_function(0, 0); }$/;"	f	class:Continuation
begin	autovector.h	/^  const_iterator begin() const { return const_iterator(this, 0); }$/;"	f	class:ceph::autovector
begin	autovector.h	/^  iterator begin() { return iterator(this, 0); }$/;"	f	class:ceph::autovector
begin	bit_vector.hpp	/^  inline ConstIterator begin() const {$/;"	f	class:ceph::BitVector
begin	bit_vector.hpp	/^  inline Iterator begin() {$/;"	f	class:ceph::BitVector
begin	interval_map.h	/^  const_iterator begin() const {$/;"	f	class:interval_map
begin	sstring.hh	/^    char_type* begin() { return str(); }$/;"	f	class:basic_sstring
begin	sstring.hh	/^    const char_type* begin() const { return str(); }$/;"	f	class:basic_sstring
bench_data	obj_bencher.h	/^struct bench_data {$/;"	s
bench_history	obj_bencher.h	/^struct bench_history {$/;"	s
bench_interval_data	obj_bencher.h	/^struct bench_interval_data {$/;"	s
bendl	buffer.cc	48;"	d	file:
bind_and_listen	OutputDataSocket.cc	/^std::string OutputDataSocket::bind_and_listen(const std::string &sock_path, int *fd)$/;"	f	class:OutputDataSocket
bind_and_listen	admin_socket.cc	/^std::string AdminSocket::bind_and_listen(const std::string &sock_path, int *fd)$/;"	f	class:AdminSocket
bit1	crc32c_intel_fast_asm.s	/^bit1:$/;"	l
bit1	crc32c_intel_fast_zero_asm.s	/^bit1:$/;"	l
bit2	crc32c_intel_fast_asm.s	/^bit2:$/;"	l
bit2	crc32c_intel_fast_zero_asm.s	/^bit2:$/;"	l
bit3	crc32c_intel_fast_asm.s	/^bit3:$/;"	l
bit3	crc32c_intel_fast_zero_asm.s	/^bit3:$/;"	l
bit4	crc32c_intel_fast_asm.s	/^bit4:$/;"	l
bit4	crc32c_intel_fast_zero_asm.s	/^bit4:$/;"	l
bit5	crc32c_intel_fast_asm.s	/^bit5:$/;"	l
bit5	crc32c_intel_fast_zero_asm.s	/^bit5:$/;"	l
bit6	crc32c_intel_fast_asm.s	/^bit6:$/;"	l
bit6	crc32c_intel_fast_zero_asm.s	/^bit6:$/;"	l
bit7	crc32c_intel_fast_asm.s	/^bit7:$/;"	l
bit7	crc32c_intel_fast_zero_asm.s	/^bit7:$/;"	l
bit8	crc32c_intel_fast_asm.s	/^bit8:$/;"	l
bit8	crc32c_intel_fast_zero_asm.s	/^bit8:$/;"	l
bit_mask	bloom_filter.hpp	/^static const unsigned char bit_mask[bits_per_char] = {$/;"	v
bit_table_	bloom_filter.hpp	/^  unsigned char*       bit_table_;   \/\/\/< pointer to bit map$/;"	m	class:bloom_filter
bits_per_char	bloom_filter.hpp	/^static const std::size_t bits_per_char = 0x08;    \/\/ 8 bits in 1 char(unsigned)$/;"	v
blkin_trace_info	zipkin_trace.h	/^struct blkin_trace_info {$/;"	s
block_device_discard	blkdev.cc	/^int block_device_discard(int fd, int64_t offset, int64_t len)$/;"	f
block_device_is_rotational	blkdev.cc	/^bool block_device_is_rotational(const char *devname)$/;"	f
block_device_model	blkdev.cc	/^int block_device_model(const char *devname, char *model, size_t max)$/;"	f
block_device_support_discard	blkdev.cc	/^bool block_device_support_discard(const char *devname)$/;"	f
block_signals	signal.cc	/^void block_signals(const int *siglist, sigset_t *old_sigset)$/;"	f
block_size	SloppyCRCMap.h	/^  uint32_t block_size;$/;"	m	class:SloppyCRCMap
bloom_filter	bloom_filter.hpp	/^  bloom_filter()$/;"	f	class:bloom_filter
bloom_filter	bloom_filter.hpp	/^  bloom_filter(const bloom_filter& filter)$/;"	f	class:bloom_filter
bloom_filter	bloom_filter.hpp	/^  bloom_filter(const std::size_t& predicted_inserted_element_count,$/;"	f	class:bloom_filter
bloom_filter	bloom_filter.hpp	/^  bloom_filter(const std::size_t& salt_count,$/;"	f	class:bloom_filter
bloom_filter	bloom_filter.hpp	/^class bloom_filter$/;"	c
bloom_type	bloom_filter.hpp	/^  typedef unsigned int bloom_type;$/;"	t	class:bloom_filter
bound	bounded_key_counter.h	/^  const size_t bound;$/;"	m	class:BoundedKeyCounter
bound_encode	sstring.hh	/^  static void bound_encode(const value_type& s, size_t& p, uint64_t f=0) {$/;"	f	struct:denc_traits
bounded	sstring.hh	/^  static constexpr bool bounded = false;$/;"	m	struct:denc_traits
buckets	QueueRing.h	/^  std::vector<QueueBucket> buckets;$/;"	m	class:QueueRing
buf_len	ceph_json.h	/^  int buf_len;$/;"	m	class:JSONParser
buffer_debug_lock	buffer.cc	/^static std::atomic_flag buffer_debug_lock = ATOMIC_FLAG_INIT;$/;"	v	file:
buffer_track_alloc	buffer.cc	/^  const bool buffer_track_alloc = get_env_bool("CEPH_BUFFER_TRACK");$/;"	v
buffer_track_c_str	buffer.cc	/^  static bool buffer_track_c_str = get_env_bool("CEPH_BUFFER_TRACK");$/;"	v	file:
buffer_track_crc	buffer.cc	/^  static bool buffer_track_crc = get_env_bool("CEPH_BUFFER_TRACK");$/;"	v	file:
build_hash_cache	hobject.h	/^  void build_hash_cache() {$/;"	f	struct:hobject_t
build_options	options.cc	/^static std::vector<Option> build_options()$/;"	f	file:
bulkkey	ceph_crypto_cms.cc	/^    PK11SymKey *bulkkey;$/;"	m	struct:decodeOptionsStr	file:
by_path	perf_counters.h	/^  CounterMap by_path; $/;"	m	class:PerfCountersCollection
byte	ceph_crypto.h	/^typedef unsigned char byte;$/;"	t
bytes2str	util.cc	/^std::string bytes2str(uint64_t count) {$/;"	f
byteswap	crc32c_ppc_asm.S	/^#define byteswap	v26$/;"	d
c	RefCountedObj.h	/^  RefCountedCond *c;$/;"	m	struct:RefCountedWaitObject
c	Semaphore.h	/^  Cond c;$/;"	m	class:Semaphore
c	WorkQueue.h	/^  GenContext<ThreadPool::TPHandle&> *c;$/;"	m	class:C_QueueInWQ
c_str	TrackedOp.h	/^    const char *c_str() const {$/;"	f	struct:TrackedOp::Event
c_str	buffer.cc	/^  char *buffer::list::c_str()$/;"	f	class:buffer::list
c_str	buffer.cc	/^  char *buffer::ptr::c_str() {$/;"	f	class:buffer::ptr
c_str	buffer.cc	/^  const char *buffer::ptr::c_str() const {$/;"	f	class:buffer::ptr
c_str	sstring.hh	/^    const char_type* c_str() const {$/;"	f	class:basic_sstring
cache	cohort_lru.h	/^	T** cache;$/;"	m	struct:cohort::lru::TreeX::Partition
cache	shared_cache.hpp	/^    SharedLRU<K, V, C> *cache;$/;"	m	class:SharedLRU::Cleanup
cached_hostname	obj_bencher.cc	/^static char cached_hostname[30] = {0};$/;"	v	file:
cached_key_lower_bound	shared_cache.hpp	/^  K cached_key_lower_bound() {$/;"	f	class:SharedLRU
cached_pid	obj_bencher.cc	/^int cached_pid = 0;$/;"	v
calc	Checksummer.h	/^    static value_t calc($/;"	f	struct:Checksummer::crc32c
calc	Checksummer.h	/^    static value_t calc($/;"	f	struct:Checksummer::crc32c_16
calc	Checksummer.h	/^    static value_t calc($/;"	f	struct:Checksummer::crc32c_8
calc	Checksummer.h	/^    static value_t calc($/;"	f	struct:Checksummer::xxhash32
calc	Checksummer.h	/^    static value_t calc($/;"	f	struct:Checksummer::xxhash64
calculate	Checksummer.h	/^  static int calculate($/;"	f	class:Checksummer
calculate	iso_8601.cc	/^optional<real_time> calculate(const tm& t, uint32_t n = 0) {$/;"	f	namespace:ceph::__anon1
call_all_observers	config.cc	/^void md_config_t::call_all_observers()$/;"	f	class:md_config_t
callbacks	Continuation.h	/^  std::map<int, Continuation::stagePtr> callbacks;$/;"	m	class:Continuation
can_reclaim	cohort_lru.h	/^      bool can_reclaim(Object* o) {$/;"	f	class:cohort::lru::LRU
can_zero_copy	buffer.cc	/^    virtual bool can_zero_copy() const {$/;"	f	class:buffer::raw
can_zero_copy	buffer.cc	/^  bool buffer::list::can_zero_copy() const$/;"	f	class:buffer::list
can_zero_copy	buffer.cc	/^  bool buffer::ptr::can_zero_copy() const$/;"	f	class:buffer::ptr
cancel_all_events	Timer.cc	/^void SafeTimer::cancel_all_events()$/;"	f	class:SafeTimer
cancel_all_events	ceph_timer.h	/^      void cancel_all_events() {$/;"	f	class:ceph::timer_detail::timer
cancel_event	Timer.cc	/^bool SafeTimer::cancel_event(Context *callback)$/;"	f	class:SafeTimer
cancel_event	ceph_timer.h	/^      bool cancel_event(const uint64_t id) {$/;"	f	class:ceph::timer_detail::timer
cancel_reservation	AsyncReserver.h	/^  void cancel_reservation($/;"	f	class:AsyncReserver
cbegin	sstring.hh	/^    const char_type* cbegin() const { return str(); }$/;"	f	class:basic_sstring
cct	AsyncReserver.h	/^  CephContext *cct;$/;"	m	class:AsyncReserver
cct	Finisher.h	/^  CephContext *cct;$/;"	m	class:Finisher
cct	LogClient.h	/^  CephContext *cct;$/;"	m	class:LogChannel
cct	LogClient.h	/^  CephContext *cct;$/;"	m	class:LogClient
cct	MemoryModel.h	/^  CephContext *cct;$/;"	m	class:MemoryModel
cct	Mutex.h	/^  CephContext *cct;$/;"	m	class:Mutex
cct	PluginRegistry.h	/^    CephContext *cct;$/;"	m	class:ceph::Plugin
cct	PluginRegistry.h	/^    CephContext *cct;$/;"	m	class:ceph::PluginRegistry
cct	RefCountedObj.h	/^  CephContext *cct;$/;"	m	struct:RefCountedObject
cct	Throttle.h	/^  CephContext *cct;$/;"	m	class:BackoffThrottle
cct	Throttle.h	/^  CephContext *cct;$/;"	m	class:Throttle
cct	Timer.h	/^  CephContext *cct;$/;"	m	class:SafeTimer
cct	TrackedOp.h	/^  CephContext *cct;$/;"	m	class:OpTracker
cct	WorkQueue.h	/^    CephContext *cct;$/;"	m	class:ThreadPool::TPHandle
cct	WorkQueue.h	/^  CephContext *cct;$/;"	m	class:ShardedThreadPool
cct	WorkQueue.h	/^  CephContext *cct;$/;"	m	class:ThreadPool
cct	ceph_context.cc	/^  CephContext *cct;$/;"	m	class:CephContextObs	file:
cct	ceph_context.cc	/^  CephContext *cct;$/;"	m	class:__anon6::MempoolObs	file:
cct	mutex_debug.h	/^  CephContext *cct;$/;"	m	class:ceph::mutex_debug_detail::mutex_debugging_base
cct	obj_bencher.h	/^  CephContext *cct;$/;"	m	class:ObjBencher
cct	shared_cache.hpp	/^  CephContext *cct;$/;"	m	class:SharedLRU
cell_type	bloom_filter.hpp	/^  typedef unsigned char cell_type;$/;"	t	class:bloom_filter
cend	sstring.hh	/^    const char_type* cend() const { return str() + size(); }$/;"	f	class:basic_sstring
ceph	BackTrace.cc	/^namespace ceph {$/;"	n	file:
ceph	BackTrace.h	/^namespace ceph {$/;"	n
ceph	ContextCompletion.cc	/^namespace ceph$/;"	n	file:
ceph	ContextCompletion.h	/^namespace ceph {$/;"	n
ceph	Formatter.cc	/^namespace ceph {$/;"	n	file:
ceph	Formatter.h	/^namespace ceph {$/;"	n
ceph	Graylog.cc	/^namespace ceph {$/;"	n	file:
ceph	Graylog.h	/^namespace ceph {$/;"	n
ceph	HTMLFormatter.cc	/^namespace ceph {$/;"	n	file:
ceph	HTMLFormatter.h	/^namespace ceph {$/;"	n
ceph	HeartbeatMap.cc	/^namespace ceph {$/;"	n	file:
ceph	HeartbeatMap.h	/^namespace ceph {$/;"	n
ceph	LogClient.h	/^namespace ceph {$/;"	n
ceph	LogEntry.h	/^namespace ceph {$/;"	n
ceph	OpQueue.h	/^namespace ceph {$/;"	n
ceph	PluginRegistry.h	/^namespace ceph {$/;"	n
ceph	assert.cc	/^namespace ceph {$/;"	n	file:
ceph	autovector.h	/^namespace ceph {$/;"	n
ceph	backport14.h	/^namespace ceph {$/;"	n
ceph	bit_str.h	/^namespace ceph {$/;"	n
ceph	bit_vector.hpp	/^namespace ceph {$/;"	n
ceph	ceph_context.h	/^namespace ceph {$/;"	n
ceph	ceph_crypto.h	/^namespace ceph {$/;"	n
ceph	ceph_time.cc	/^namespace ceph {$/;"	n	file:
ceph	ceph_time.h	/^namespace ceph {$/;"	n
ceph	ceph_timer.h	/^namespace ceph {$/;"	n
ceph	dns_resolve.cc	/^namespace ceph {$/;"	n	file:
ceph	dns_resolve.h	/^namespace ceph {$/;"	n
ceph	histogram.h	/^namespace ceph {$/;"	n
ceph	hobject.h	/^namespace ceph {$/;"	n
ceph	iso_8601.cc	/^namespace ceph {$/;"	n	file:
ceph	iso_8601.h	/^namespace ceph {$/;"	n
ceph	mClockPriorityQueue.h	/^namespace ceph {$/;"	n
ceph	mutex_debug.cc	/^namespace ceph {$/;"	n	file:
ceph	mutex_debug.h	/^namespace ceph {$/;"	n
ceph	page.cc	/^namespace ceph {$/;"	n	file:
ceph	shunique_lock.h	/^namespace ceph {$/;"	n
ceph	snap_types.h	/^namespace ceph {$/;"	n
ceph_arg_value_type	ceph_argparse.cc	/^void ceph_arg_value_type(const char * nextargstr, bool *bool_option, bool *bool_numeric)$/;"	f
ceph_argparse_binary_flag	ceph_argparse.cc	/^bool ceph_argparse_binary_flag(std::vector<const char*> &args,$/;"	f
ceph_argparse_double_dash	ceph_argparse.cc	/^bool ceph_argparse_double_dash(std::vector<const char*> &args,$/;"	f
ceph_argparse_early_args	ceph_argparse.cc	/^CephInitParameters ceph_argparse_early_args$/;"	f
ceph_argparse_flag	ceph_argparse.cc	/^bool ceph_argparse_flag(std::vector<const char*> &args,$/;"	f
ceph_argparse_witharg	ceph_argparse.cc	/^bool ceph_argparse_witharg(std::vector<const char*> &args,$/;"	f
ceph_armor	armor.c	/^int ceph_armor(char *dst, const char *dst_end, const char *src, const char *end)$/;"	f
ceph_armor_line_break	armor.c	/^int ceph_armor_line_break(char *dst, const char *dst_end, const char *src, const char *end, int line_width)$/;"	f
ceph_cap_op_name	ceph_strings.cc	/^const char *ceph_cap_op_name(int op)$/;"	f
ceph_caps_for_mode	ceph_fs.cc	/^int ceph_caps_for_mode(int mode)$/;"	f
ceph_choose_crc32	crc32c.cc	/^ceph_crc32c_func_t ceph_choose_crc32(void)$/;"	f
ceph_clock_gettime	Clock.cc	/^time_t ceph_clock_gettime()$/;"	f
ceph_clock_now	Clock.cc	/^utime_t ceph_clock_now()$/;"	f
ceph_crc32c_aarch64	crc32c_aarch64.c	/^uint32_t ceph_crc32c_aarch64(uint32_t crc, unsigned char const *buffer, unsigned len)$/;"	f
ceph_crc32c_aarch64	crc32c_aarch64.h	/^static inline uint32_t ceph_crc32c_aarch64(uint32_t crc, unsigned char const *buffer, unsigned len)$/;"	f
ceph_crc32c_func	crc32c.cc	/^ceph_crc32c_func_t ceph_crc32c_func = ceph_choose_crc32();$/;"	v
ceph_crc32c_intel_baseline	crc32c_intel_baseline.c	/^uint32_t ceph_crc32c_intel_baseline(uint32_t crc_init2, unsigned char const *buffer, unsigned len)$/;"	f
ceph_crc32c_intel_fast	crc32c_intel_fast.c	/^uint32_t ceph_crc32c_intel_fast(uint32_t crc, unsigned char const *buffer, unsigned len)$/;"	f
ceph_crc32c_intel_fast	crc32c_intel_fast.h	/^static inline uint32_t ceph_crc32c_intel_fast(uint32_t crc, unsigned char const *buffer, unsigned len)$/;"	f
ceph_crc32c_intel_fast_exists	crc32c_intel_fast.c	/^int ceph_crc32c_intel_fast_exists(void)$/;"	f
ceph_crc32c_ppc	crc32c_ppc.c	/^uint32_t ceph_crc32c_ppc(uint32_t crc, unsigned char const *data, unsigned len)$/;"	f
ceph_crc32c_sctp	sctp_crc32.c	/^uint32_t ceph_crc32c_sctp(uint32_t crc, unsigned char const *data, unsigned length)$/;"	f
ceph_crc32c_zeros	crc32c.cc	/^uint32_t ceph_crc32c_zeros(uint32_t crc, unsigned len)$/;"	f
ceph_decode_cms	ceph_crypto_cms.cc	/^int ceph_decode_cms(CephContext *cct, bufferlist& cms_bl, bufferlist& decoded_bl)$/;"	f
ceph_entity_type_name	ceph_strings.cc	/^const char *ceph_entity_type_name(int type)$/;"	f
ceph_flags_sys2wire	ceph_fs.cc	/^int ceph_flags_sys2wire(int flags)$/;"	f
ceph_flags_to_mode	ceph_fs.cc	/^int ceph_flags_to_mode(int flags)$/;"	f
ceph_frag_compare	ceph_frag.cc	/^int ceph_frag_compare(__u32 a, __u32 b)$/;"	f
ceph_get_hostname	hostname.cc	/^std::string ceph_get_hostname()$/;"	f
ceph_get_short_hostname	hostname.cc	/^std::string ceph_get_short_hostname()$/;"	f
ceph_gettid	io_priority.cc	/^pid_t ceph_gettid(void)$/;"	f
ceph_ioprio_set	io_priority.cc	/^int ceph_ioprio_set(int whence, int who, int ioprio)$/;"	f
ceph_ioprio_string_to_class	io_priority.cc	/^int ceph_ioprio_string_to_class(const std::string& s)$/;"	f
ceph_lease_op_name	ceph_strings.cc	/^const char *ceph_lease_op_name(int o)$/;"	f
ceph_mds_op_name	ceph_strings.cc	/^const char *ceph_mds_op_name(int op)$/;"	f
ceph_mds_state_name	ceph_strings.cc	/^const char *ceph_mds_state_name(int s)$/;"	f
ceph_options	options.cc	/^const std::vector<Option> ceph_options = build_options();$/;"	v
ceph_os_fgetxattr	xattr.c	/^ceph_os_fgetxattr(int fd, const char *name, void *value,$/;"	f
ceph_os_flistxattr	xattr.c	/^ceph_os_flistxattr(int fd, char *list, size_t size)$/;"	f
ceph_os_fremovexattr	xattr.c	/^ceph_os_fremovexattr(int fd, const char *name)$/;"	f
ceph_os_fsetxattr	xattr.c	/^ceph_os_fsetxattr(int fd, const char *name, const void *value,$/;"	f
ceph_os_getxattr	xattr.c	/^ceph_os_getxattr(const char *path, const char *name,$/;"	f
ceph_os_listxattr	xattr.c	/^ceph_os_listxattr(const char *path, char *list, size_t size)$/;"	f
ceph_os_removexattr	xattr.c	/^ceph_os_removexattr(const char *path, const char *name)$/;"	f
ceph_os_setxattr	xattr.c	/^ceph_os_setxattr(const char *path, const char *name,$/;"	f
ceph_osd_alloc_hint_flag_name	ceph_strings.cc	/^const char *ceph_osd_alloc_hint_flag_name(int f)$/;"	f
ceph_osd_backoff_op_name	ceph_strings.cc	/^const char *ceph_osd_backoff_op_name(int op)$/;"	f
ceph_osd_op_name	ceph_strings.cc	/^const char *ceph_osd_op_name(int op)$/;"	f
ceph_osd_state_name	ceph_strings.cc	/^const char *ceph_osd_state_name(int s)$/;"	f
ceph_osd_watch_op_name	ceph_strings.cc	/^const char *ceph_osd_watch_op_name(int o)$/;"	f
ceph_pool_op_name	ceph_strings.cc	/^const char *ceph_pool_op_name(int op)$/;"	f
ceph_posix_fallocate	compat.cc	/^int ceph_posix_fallocate(int fd, off_t offset, off_t len) {$/;"	f
ceph_release	version.cc	/^unsigned ceph_release(void)$/;"	f
ceph_release_features	ceph_strings.cc	/^uint64_t ceph_release_features(int r)$/;"	f
ceph_release_from_features	ceph_strings.cc	/^int ceph_release_from_features(uint64_t features)$/;"	f
ceph_release_from_name	ceph_strings.cc	/^int ceph_release_from_name(const char *s)$/;"	f
ceph_release_name	ceph_strings.cc	/^const char *ceph_release_name(int r)$/;"	f
ceph_release_type	version.cc	/^const char *ceph_release_type(void)$/;"	f
ceph_resolve_file_search	config.cc	/^int ceph_resolve_file_search(const std::string& filename_list,$/;"	f
ceph_session_op_name	ceph_strings.cc	/^const char *ceph_session_op_name(int op)$/;"	f
ceph_snap_op_name	ceph_strings.cc	/^const char *ceph_snap_op_name(int o)$/;"	f
ceph_str_hash	ceph_hash.cc	/^unsigned ceph_str_hash(int type, const char *s, unsigned len)$/;"	f
ceph_str_hash_linux	ceph_hash.cc	/^unsigned ceph_str_hash_linux(const char *str, unsigned length)$/;"	f
ceph_str_hash_name	ceph_hash.cc	/^const char *ceph_str_hash_name(int type)$/;"	f
ceph_str_hash_rjenkins	ceph_hash.cc	/^unsigned ceph_str_hash_rjenkins(const char *str, unsigned length)$/;"	f
ceph_str_hash_valid	ceph_hash.cc	/^bool ceph_str_hash_valid(int type)$/;"	f
ceph_subsys_	config.h	/^  ceph_subsys_,   \/\/ default$/;"	e	enum:config_subsys_id
ceph_subsys_max	config.h	/^  ceph_subsys_max$/;"	e	enum:config_subsys_id
ceph_sys2wire	ceph_fs.cc	73;"	d	file:
ceph_sys2wire	ceph_fs.cc	81;"	d	file:
ceph_to_hostos_conv	freebsd_errno.cc	/^static const __s32 ceph_to_hostos_conv[256] = {$/;"	v	file:
ceph_to_hostos_errno	aix_errno.cc	/^__s32 ceph_to_hostos_errno(__s32 r) $/;"	f
ceph_to_hostos_errno	darwin_errno.cc	/^__s32 ceph_to_hostos_errno(__s32 r)$/;"	f
ceph_to_hostos_errno	freebsd_errno.cc	/^__s32 ceph_to_hostos_errno(__s32 r)$/;"	f
ceph_to_hostos_errno	solaris_errno.cc	/^__s32 ceph_to_hostos_errno(__s32 r) $/;"	f
ceph_unarmor	armor.c	/^int ceph_unarmor(char *dst, const char *dst_end, const char *src, const char *end)$/;"	f
ceph_version_to_str	version.cc	/^const char *ceph_version_to_str(void)$/;"	f
ceph_watch_event_name	ceph_strings.cc	/^const char *ceph_watch_event_name(int e)$/;"	f
certHandle	ceph_crypto_cms.cc	/^    CERTCertDBHandle *certHandle;$/;"	m	struct:optionsStr	file:
certUsage	ceph_crypto_cms.cc	/^    SECCertUsage certUsage;$/;"	m	struct:optionsStr	file:
cf	config.h	/^  ConfFile cf;$/;"	m	struct:md_config_t
changed	config.h	/^  changed_set_t changed;$/;"	m	struct:md_config_t
changed_set_t	config.h	/^  typedef std::set < std::string > changed_set_t;$/;"	t	struct:md_config_t
channel	LogEntry.h	/^  string channel;$/;"	m	struct:LogEntry
channel_lock	LogClient.h	/^  Mutex channel_lock;$/;"	m	class:LogChannel
channels	LogClient.h	/^  std::map<std::string, LogChannelRef> channels;$/;"	m	class:LogClient
check_end	WeightedPriorityQueue.h	/^      void check_end() {$/;"	f	class:WeightedPriorityQueue::SubQueue
check_experimental_feature_enabled	ceph_context.cc	/^bool CephContext::check_experimental_feature_enabled(const std::string& feat)$/;"	f	class:CephContext
check_experimental_feature_enabled	ceph_context.cc	/^bool CephContext::check_experimental_feature_enabled(const std::string& feat,$/;"	f	class:CephContext
check_for_control_characters	utf8.c	/^int check_for_control_characters(const char *buf, int len)$/;"	f
check_for_control_characters_cstr	utf8.c	/^int check_for_control_characters_cstr(const char *buf)$/;"	f
check_in	inline_variant.h	/^struct check_in$/;"	s	namespace:detail
check_ops_in_flight	TrackedOp.cc	/^bool OpTracker::check_ops_in_flight(std::vector<string> &warning_vector, int *slow)$/;"	f	class:OpTracker
check_result	cohort_lru.h	/^      typedef std::pair<iterator, bool> check_result;$/;"	t	class:cohort::lru::TreeX
check_same	inline_variant.h	/^struct check_same$/;"	s
check_touch_file	HeartbeatMap.cc	/^void HeartbeatMap::check_touch_file()$/;"	f	class:ceph::HeartbeatMap
check_utf8	utf8.c	/^int check_utf8(const char *buf, int len)$/;"	f
check_utf8_cstr	utf8.c	/^int check_utf8_cstr(const char *buf)$/;"	f
childpid	Preforker.h	/^  pid_t childpid;$/;"	m	class:Preforker
children	ceph_json.h	/^  multimap<string, JSONObj *> children;$/;"	m	class:JSONObj
chmod	admin_socket.cc	/^void AdminSocket::chmod(mode_t mode)$/;"	f	class:AdminSocket
chown	admin_socket.cc	/^void AdminSocket::chown(uid_t uid, gid_t gid)$/;"	f	class:AdminSocket
chrono	ceph_time.h	/^  namespace chrono {$/;"	n	namespace:std
claim	buffer.cc	/^  void buffer::list::claim(list& bl, unsigned int flags)$/;"	f	class:buffer::list
claim_append	buffer.cc	/^  void buffer::list::claim_append(list& bl, unsigned int flags)$/;"	f	class:buffer::list
claim_append_piecewise	buffer.cc	/^  void buffer::list::claim_append_piecewise(list& bl)$/;"	f	class:buffer::list
claim_buffer	buffer.cc	/^  buffer::raw* buffer::claim_buffer(unsigned len, char *buf, deleter del) {$/;"	f	class:buffer
claim_char	buffer.cc	/^  buffer::raw* buffer::claim_char(unsigned len, char *buf) {$/;"	f	class:buffer
claim_malloc	buffer.cc	/^  buffer::raw* buffer::claim_malloc(unsigned len, char *buf) {$/;"	f	class:buffer
claim_prepend	buffer.cc	/^  void buffer::list::claim_prepend(list& bl, unsigned int flags)$/;"	f	class:buffer::list
clean_up	obj_bencher.cc	/^int ObjBencher::clean_up(const std::string& orig_prefix, int concurrentios, const std::string& run_name) {$/;"	f	class:ObjBencher
clean_up	obj_bencher.cc	/^int ObjBencher::clean_up(int num_objects, int prevPid, int concurrentios) {$/;"	f	class:ObjBencher
clean_up_slow	obj_bencher.cc	/^int ObjBencher::clean_up_slow(const std::string& prefix, int concurrentios) {$/;"	f	class:ObjBencher
cleanbin	util.cc	/^string cleanbin(bufferlist &bl, bool &base64)$/;"	f
cleanbin	util.cc	/^string cleanbin(string &str)$/;"	f
cleanup	TrackedOp.cc	/^void OpHistory::cleanup(utime_t now)$/;"	f	class:OpHistory
cleanup_atexit	OutputDataSocket.cc	/^static bool cleanup_atexit = false;$/;"	v	file:
cleanup_atexit	admin_socket.cc	/^static bool cleanup_atexit = false;$/;"	v	file:
cleanup_files	OutputDataSocket.cc	/^static std::vector <const char*> cleanup_files;$/;"	v	file:
cleanup_files	admin_socket.cc	/^static std::vector <const char*> cleanup_files;$/;"	v	file:
cleanup_lock	OutputDataSocket.cc	/^static pthread_mutex_t cleanup_lock = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
cleanup_lock	admin_socket.cc	/^static pthread_mutex_t cleanup_lock = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
clear	CommandTable.h	/^  void clear() {$/;"	f	class:CommandTable
clear	ConfUtils.cc	/^clear()$/;"	f	class:ConfFile
clear	TextTable.cc	/^void TextTable::clear() {$/;"	f	class:TextTable
clear	WorkQueue.h	/^    void clear() {$/;"	f	class:ThreadPool::BatchWorkQueue
clear	WorkQueue.h	/^    void clear() {$/;"	f	class:ThreadPool::WorkQueue
clear	autovector.h	/^  void clear() {$/;"	f	class:ceph::autovector
clear	bit_vector.hpp	/^void BitVector<_b>::clear() {$/;"	f	class:ceph::BitVector
clear	bloom_filter.hpp	/^  inline void clear()$/;"	f	class:bloom_filter
clear	bounded_key_counter.h	/^  void clear()$/;"	f	class:BoundedKeyCounter
clear	histogram.h	/^  void clear() {$/;"	f	struct:pow2_hist_t
clear	interval_map.h	/^  void clear() {$/;"	f	class:interval_map
clear	perf_counters.cc	/^void PerfCountersCollection::clear()$/;"	f	class:PerfCountersCollection
clear	random_cache.hpp	/^  void clear(K key) {$/;"	f	class:RandomCache
clear	shared_cache.hpp	/^  void clear() {$/;"	f	class:SharedLRU
clear	shared_cache.hpp	/^  void clear(const K& key) {$/;"	f	class:SharedLRU
clear	simple_cache.hpp	/^  void clear(K key) {$/;"	f	class:SimpleLRU
clear	snap_types.h	/^  void clear() {$/;"	f	struct:SnapContext
clear_data_digest_mismatch_info	scrub_types.h	/^  void clear_data_digest_mismatch_info() {$/;"	f	struct:shard_info_wrapper
clear_g_str_vec	ceph_argparse.cc	/^void clear_g_str_vec()$/;"	f
clear_pinned	simple_cache.hpp	/^  void clear_pinned(K e) {$/;"	f	class:SimpleLRU
clear_timeout	HeartbeatMap.cc	/^void HeartbeatMap::clear_timeout(heartbeat_handle_d *h)$/;"	f	class:ceph::HeartbeatMap
clock_gettime	ceph_time.cc	/^int clock_gettime(int clk_id, struct timespec *tp)$/;"	f
clog_type	LogEntry.h	/^} clog_type;$/;"	t	typeref:enum:__anon9
clog_type_to_string	LogEntry.cc	/^string clog_type_to_string(clog_type t)$/;"	f
clog_type_to_syslog_level	LogEntry.cc	/^int clog_type_to_syslog_level(clog_type t)$/;"	f
clone	buffer.cc	/^    raw *clone() {$/;"	f	class:buffer::raw
clone	buffer.cc	/^  buffer::raw *buffer::ptr::clone()$/;"	f	class:buffer::ptr
clone_empty	buffer.cc	/^    raw* clone_empty() {$/;"	f	class:buffer::raw_hack_aligned
clone_empty	buffer.cc	/^    raw* clone_empty() {$/;"	f	class:buffer::xio_mempool
clone_empty	buffer.cc	/^    raw* clone_empty() {$/;"	f	class:buffer::xio_msg_buffer
clone_range	SloppyCRCMap.cc	/^void SloppyCRCMap::clone_range(uint64_t offset, uint64_t len,$/;"	f	class:SloppyCRCMap
close	SubProcess.h	/^inline void SubProcess::close(int &fd) {$/;"	f	class:SubProcess
close_connection	OutputDataSocket.cc	/^void OutputDataSocket::close_connection(int fd)$/;"	f	class:OutputDataSocket
close_pipe	buffer.cc	/^    static void close_pipe(const int *fds) {$/;"	f	class:buffer::raw_pipe	file:
close_section	Formatter.cc	/^void JSONFormatter::close_section()$/;"	f	class:ceph::JSONFormatter
close_section	Formatter.cc	/^void TableFormatter::close_section()$/;"	f	class:ceph::TableFormatter
close_section	Formatter.cc	/^void XMLFormatter::close_section()$/;"	f	class:ceph::XMLFormatter
close_stderr	SubProcess.h	/^inline void SubProcess::close_stderr() {$/;"	f	class:SubProcess
close_stdin	SubProcess.h	/^inline void SubProcess::close_stdin() {$/;"	f	class:SubProcess
close_stdout	SubProcess.h	/^inline void SubProcess::close_stdout() {$/;"	f	class:SubProcess
cluster	config.h	/^  string cluster;$/;"	m	struct:md_config_t
cmd	CommandTable.h	/^  std::vector<std::string> cmd;$/;"	m	class:CommandOp
cmd	SubProcess.h	/^  std::string cmd;$/;"	m	class:SubProcess
cmd_args	SubProcess.h	/^  std::vector<std::string> cmd_args;$/;"	m	class:SubProcess
cmd_getval	cmdparse.h	/^cmd_getval(CephContext *cct, const cmdmap_t& cmdmap, const std::string& k, T& val)$/;"	f
cmd_getval	cmdparse.h	/^cmd_getval(CephContext *cct, const cmdmap_t& cmdmap, const std::string& k, T& val, const T& defval)$/;"	f
cmd_putval	cmdparse.h	/^cmd_putval(CephContext *cct, cmdmap_t& cmdmap, const std::string& k, const T& val)$/;"	f
cmd_vartype	cmdparse.h	/^		       std::vector<double>>  cmd_vartype;$/;"	t
cmd_vartype_stringify	cmdparse.cc	/^cmd_vartype_stringify(const cmd_vartype &v)$/;"	f
cmddesc_get_prefix	cmdparse.cc	/^std::string cmddesc_get_prefix(const std::string &cmddesc)$/;"	f
cmdmap_dump	cmdparse.cc	/^void cmdmap_dump(const cmdmap_t &cmdmap, Formatter *f)$/;"	f
cmdmap_from_json	cmdparse.cc	/^cmdmap_from_json(vector<string> cmd, map<string, cmd_vartype> *mapp, stringstream &ss)$/;"	f
cmdmap_t	cmdparse.h	/^typedef std::map<std::string, cmd_vartype> cmdmap_t;$/;"	t
cmp	buffer.cc	/^  int buffer::ptr::cmp(const ptr& o) const$/;"	f	class:buffer::ptr
cmp	hobject.cc	/^int cmp(const ghobject_t& l, const ghobject_t& r)$/;"	f
cmp	hobject.cc	/^int cmp(const hobject_t& l, const hobject_t& r)$/;"	f
cmp	hobject.h	/^static inline int cmp(const T&, const hobject_t&r) {$/;"	f
cmp	hobject.h	/^static inline int cmp(const hobject_t &l, const T&) {$/;"	f
cms_verbose	ceph_crypto_cms.cc	/^static int cms_verbose = 0;$/;"	v	file:
coarse_mono_clock	ceph_time.h	/^    class coarse_mono_clock {$/;"	c	namespace:ceph::time_detail
coarse_mono_time	ceph_time.h	/^  typedef coarse_mono_clock::time_point coarse_mono_time;$/;"	t	namespace:ceph
coarse_real_clock	ceph_time.h	/^    class coarse_real_clock {$/;"	c	namespace:ceph::time_detail
coarse_real_time	ceph_time.h	/^  typedef coarse_real_clock::time_point coarse_real_time;$/;"	t	namespace:ceph
code_environment_t	code_environment.h	/^enum code_environment_t {$/;"	g
code_environment_to_str	code_environment.cc	/^extern "C" const char *code_environment_to_str(enum code_environment_t e)$/;"	f
cohort	cohort_lru.h	/^namespace cohort {$/;"	n
col	TextTable.h	/^  std::vector<TextTableColumn> col;	\/\/ column definitions$/;"	m	class:TextTable
col_align	TextTable.h	/^    Align col_align;$/;"	m	struct:TextTable::TextTableColumn
collect_sys_info	util.cc	/^void collect_sys_info(map<string, string> *m, CephContext *cct)$/;"	f
commands	CommandTable.h	/^  std::map<ceph_tid_t, T> commands;$/;"	m	class:CommandTable
commit_data	cohort_lru.h	/^	insert_commit_data commit_data;$/;"	m	struct:cohort::lru::TreeX::Latch
common_init_finish	common_init.cc	/^void common_init_finish(CephContext *cct)$/;"	f
common_init_flags_t	common_init.h	/^enum common_init_flags_t {$/;"	g
common_preinit	common_init.cc	/^CephContext *common_preinit(const CephInitParameters &iparams,$/;"	f
compare	TrackedOp.h	/^    int compare(const char *s) const {$/;"	f	struct:TrackedOp::Event
compare	sstring.hh	/^    int compare(size_t pos, size_t sz, const basic_sstring& x) const {$/;"	f	class:basic_sstring
complain_about_parse_errors	common_init.cc	/^void complain_about_parse_errors(CephContext *cct,$/;"	f
complain_about_parse_errors	config.cc	/^void md_config_t::complain_about_parse_errors(CephContext *cct)$/;"	f	class:md_config_t
complaint_time	TrackedOp.h	/^  float complaint_time;$/;"	m	class:OpTracker
complete	RefCountedObj.h	/^  bool complete;$/;"	m	struct:RefCountedCond
complete_pending_ops	Throttle.cc	/^void OrderedThrottle::complete_pending_ops() {$/;"	f	class:OrderedThrottle
compress	bloom_filter.hpp	/^  inline bool compress(const double& target_ratio)$/;"	f	class:compressible_bloom_filter
compressible_bloom_filter	bloom_filter.hpp	/^  compressible_bloom_filter() : bloom_filter() {}$/;"	f	class:compressible_bloom_filter
compressible_bloom_filter	bloom_filter.hpp	/^  compressible_bloom_filter(const std::size_t& predicted_element_count,$/;"	f	class:compressible_bloom_filter
compressible_bloom_filter	bloom_filter.hpp	/^  compressible_bloom_filter(const std::size_t& salt_count,$/;"	f	class:compressible_bloom_filter
compressible_bloom_filter	bloom_filter.hpp	/^class compressible_bloom_filter : public bloom_filter$/;"	c
compute_index	bit_vector.hpp	/^void BitVector<_b>::compute_index(uint64_t offset, uint64_t *index, uint64_t *shift) {$/;"	f	class:ceph::BitVector
compute_indices	bloom_filter.hpp	/^  inline virtual void compute_indices(const bloom_type& hash, std::size_t& bit_index, std::size_t& bit) const$/;"	f	class:bloom_filter
con	CommandTable.h	/^  ConnectionRef con;$/;"	m	class:CommandOp
con	Finisher.h	/^  Context *con;$/;"	m	class:C_OnFinisher
cond	Cond.h	/^  Cond *cond;     \/\/\/< Cond to signal$/;"	m	class:C_SafeCond
cond	Cond.h	/^  Cond *cond;   \/\/\/< Cond to signal$/;"	m	class:C_Cond
cond	Cond.h	/^  Cond cond;     \/\/\/< Cond to signal$/;"	m	class:C_SaferCond
cond	OutputDataSocket.h	/^  Cond cond;$/;"	m	class:OutputDataSocket
cond	QueueRing.h	/^    Cond cond;$/;"	m	struct:QueueRing::QueueBucket
cond	RefCountedObj.h	/^  Cond cond;$/;"	m	struct:RefCountedCond
cond	Throttle.h	/^  list<Cond*> cond;$/;"	m	class:Throttle
cond	Timer.h	/^  Cond cond;$/;"	m	class:SafeTimer
cond	obj_bencher.cc	/^  Cond cond;$/;"	m	struct:lock_cond	file:
cond	shared_cache.hpp	/^  Cond cond;$/;"	m	class:SharedLRU
cond	sharedptr_registry.hpp	/^  Cond cond;$/;"	m	class:SharedPtrRegistry
conds	Throttle.h	/^  vector<std::condition_variable> conds;$/;"	m	class:BackoffThrottle
conf	config.cc	/^  md_config_t *conf;$/;"	m	class:assign_visitor	file:
config_key	TracepointProvider.h	/^    const char *config_key;$/;"	m	struct:TracepointProvider::Traits
config_options	config.cc	/^void md_config_t::config_options(Formatter *f)$/;"	f	class:md_config_t
config_subsys_id	config.h	/^enum config_subsys_id {$/;"	g
const1	crc32c_ppc_asm.S	/^#define const1		v24$/;"	d
const2	crc32c_ppc_asm.S	/^#define const2		v25$/;"	d
const_iterator	autovector.h	/^  typedef iterator_impl<const autovector, const value_type> const_iterator;$/;"	t	class:ceph::autovector
const_iterator	interval_map.h	/^    const_iterator(cmapiter &&it) : it(std::move(it)) {}$/;"	f	class:interval_map::const_iterator
const_iterator	interval_map.h	/^    const_iterator(const cmapiter &it) : it(it) {}$/;"	f	class:interval_map::const_iterator
const_iterator	interval_map.h	/^  class const_iterator {$/;"	c	class:interval_map
const_line_iter_t	ConfUtils.h	/^  typedef std::set <ConfLine>::const_iterator const_line_iter_t;$/;"	t	class:ConfSection
const_pointer	autovector.h	/^  typedef const value_type* const_pointer;$/;"	t	class:ceph::autovector
const_pointer_iterator	bounded_key_counter.h	/^    const_pointer_iterator(typename map_type::const_iterator i)$/;"	f	struct:BoundedKeyCounter::const_pointer_iterator
const_pointer_iterator	bounded_key_counter.h	/^  struct const_pointer_iterator : public map_type::const_iterator {$/;"	s	class:BoundedKeyCounter
const_reference	autovector.h	/^  typedef const value_type& const_reference;$/;"	t	class:ceph::autovector
const_reverse_iterator	autovector.h	/^  typedef std::reverse_iterator<const_iterator> const_reverse_iterator;$/;"	t	class:ceph::autovector
const_section_iter_t	ConfUtils.h	/^  typedef std::map <std::string, ConfSection>::const_iterator const_section_iter_t;$/;"	t	class:ConfFile
construct	Tub.h	/^  ElementType* construct(Args&&... args) {$/;"	f	class:Tub
construct_suspended_t	ceph_timer.h	/^  struct construct_suspended_t { };$/;"	s	namespace:ceph
consume_next	perf_counters.h	/^    void consume_next(const pair<uint64_t, T> &next) {$/;"	f	struct:PerfCounters::avg_tracker
container_type	cohort_lru.h	/^      typedef TTree container_type;$/;"	t	class:cohort::lru::TreeX
contains	LogEntry.h	/^  bool contains(const LogEntryKey& k) const {$/;"	f	struct:LogSummary
contains	bloom_filter.hpp	/^  inline bool contains(const T& t) const$/;"	f	class:bloom_filter
contains	bloom_filter.hpp	/^  inline bool contains(const char* data, const std::size_t& length) const$/;"	f	class:bloom_filter
contains	bloom_filter.hpp	/^  inline bool contains(const std::string& key) const$/;"	f	class:bloom_filter
contains	bloom_filter.hpp	/^  inline virtual bool contains(const unsigned char* key_begin, const std::size_t length) const$/;"	f	class:bloom_filter
contains	bloom_filter.hpp	/^  inline virtual bool contains(uint32_t val) const$/;"	f	class:bloom_filter
contains_all	bloom_filter.hpp	/^  inline InputIterator contains_all(const InputIterator begin, const InputIterator end) const$/;"	f	class:bloom_filter
contains_none	bloom_filter.hpp	/^  inline InputIterator contains_none(const InputIterator begin, const InputIterator end) const$/;"	f	class:bloom_filter
content	ceph_crypto_cms.cc	/^    SECItem            content;$/;"	m	struct:decodeOptionsStr	file:
contents	random_cache.hpp	/^  ceph::unordered_map<K, pair<uint64_t, V> > contents;$/;"	m	class:RandomCache
contents	shared_cache.hpp	/^  ceph::unordered_map<K, typename list<pair<K, VPtr> >::iterator, H> contents;$/;"	m	class:SharedLRU
contents	sharedptr_registry.hpp	/^  map<K, pair<WeakVPtr, V*>, C> contents;$/;"	m	class:SharedPtrRegistry
contents	simple_cache.hpp	/^  ceph::unordered_map<K, typename list<pair<K, V> >::iterator, H> contents;$/;"	m	class:SimpleLRU
contents	sstring.hh	/^    union contents {$/;"	u	class:basic_sstring
contents_equal	buffer.cc	/^  bool buffer::list::contents_equal(buffer::list& other)$/;"	f	class:buffer::list
contents_equal	buffer.cc	/^  bool buffer::list::contents_equal(const ceph::buffer::list& other) const$/;"	f	class:buffer::list
continuation	Continuation.h	/^    Continuation *continuation;$/;"	m	class:Continuation::Callback
continue_function	Continuation.h	/^  void continue_function(int r, int stage) {$/;"	f	class:Continuation
copy	buffer.cc	/^  buffer::raw* buffer::copy(const char *c, unsigned len) {$/;"	f	class:buffer
copy	buffer.cc	/^  void buffer::list::copy(unsigned off, unsigned len, char *dest) const$/;"	f	class:buffer::list
copy	buffer.cc	/^  void buffer::list::copy(unsigned off, unsigned len, list &dest) const$/;"	f	class:buffer::list
copy	buffer.cc	/^  void buffer::list::copy(unsigned off, unsigned len, std::string& dest) const$/;"	f	class:buffer::list
copy	buffer.cc	/^  void buffer::list::iterator::copy(unsigned len, char *dest)$/;"	f	class:buffer::list::iterator
copy	buffer.cc	/^  void buffer::list::iterator::copy(unsigned len, list &dest)$/;"	f	class:buffer::list::iterator
copy	buffer.cc	/^  void buffer::list::iterator::copy(unsigned len, ptr &dest)$/;"	f	class:buffer::list::iterator
copy	buffer.cc	/^  void buffer::list::iterator::copy(unsigned len, std::string &dest)$/;"	f	class:buffer::list::iterator
copy	buffer.cc	/^  void buffer::list::iterator_impl<is_const>::copy(unsigned len, char *dest)$/;"	f	class:buffer::list::iterator_impl
copy	buffer.cc	/^  void buffer::list::iterator_impl<is_const>::copy(unsigned len, list &dest)$/;"	f	class:buffer::list::iterator_impl
copy	buffer.cc	/^  void buffer::list::iterator_impl<is_const>::copy(unsigned len, ptr &dest)$/;"	f	class:buffer::list::iterator_impl
copy	buffer.cc	/^  void buffer::list::iterator_impl<is_const>::copy(unsigned len, std::string &dest)$/;"	f	class:buffer::list::iterator_impl
copy_address_from	zipkin_trace.h	/^  void copy_address_from(const Endpoint *endpoint) {}$/;"	f	class:ZTracer::Endpoint
copy_all	buffer.cc	/^  void buffer::list::iterator::copy_all(list &dest)$/;"	f	class:buffer::list::iterator
copy_all	buffer.cc	/^  void buffer::list::iterator_impl<is_const>::copy_all(list &dest)$/;"	f	class:buffer::list::iterator_impl
copy_deep	buffer.cc	/^  void buffer::list::iterator::copy_deep(unsigned len, ptr &dest)$/;"	f	class:buffer::list::iterator
copy_deep	buffer.cc	/^  void buffer::list::iterator_impl<is_const>::copy_deep(unsigned len, ptr &dest)$/;"	f	class:buffer::list::iterator_impl
copy_in	buffer.cc	/^  void buffer::list::copy_in(unsigned off, unsigned len, const char *src)$/;"	f	class:buffer::list
copy_in	buffer.cc	/^  void buffer::list::copy_in(unsigned off, unsigned len, const char *src, bool crc_reset)$/;"	f	class:buffer::list
copy_in	buffer.cc	/^  void buffer::list::copy_in(unsigned off, unsigned len, const list& src)$/;"	f	class:buffer::list
copy_in	buffer.cc	/^  void buffer::list::iterator::copy_in(unsigned len, const char *src)$/;"	f	class:buffer::list::iterator
copy_in	buffer.cc	/^  void buffer::list::iterator::copy_in(unsigned len, const char *src, bool crc_reset)$/;"	f	class:buffer::list::iterator
copy_in	buffer.cc	/^  void buffer::list::iterator::copy_in(unsigned len, const list& otherl)$/;"	f	class:buffer::list::iterator
copy_in	buffer.cc	/^  void buffer::ptr::copy_in(unsigned o, unsigned l, const char *src)$/;"	f	class:buffer::ptr
copy_in	buffer.cc	/^  void buffer::ptr::copy_in(unsigned o, unsigned l, const char *src, bool crc_reset)$/;"	f	class:buffer::ptr
copy_ip	zipkin_trace.h	/^  void copy_ip(const std::string &newip) {}$/;"	f	class:ZTracer::Endpoint
copy_name	zipkin_trace.h	/^  void copy_name(const std::string &newname) {}$/;"	f	class:ZTracer::Endpoint
copy_name	zipkin_trace.h	/^  void copy_name(const std::string &newname) {}$/;"	f	class:ZTracer::Trace
copy_out	buffer.cc	/^  void buffer::ptr::copy_out(unsigned o, unsigned l, char *dest) const {$/;"	f	class:buffer::ptr
copy_pipe	buffer.cc	/^    char *copy_pipe(int *fds) {$/;"	f	class:buffer::raw_pipe	file:
copy_shallow	buffer.cc	/^  void buffer::list::iterator::copy_shallow(unsigned len, ptr &dest)$/;"	f	class:buffer::list::iterator
copy_shallow	buffer.cc	/^  void buffer::list::iterator_impl<is_const>::copy_shallow(unsigned len,$/;"	f	class:buffer::list::iterator_impl
copy_str_to	sstring.hh	/^char* copy_str_to(char* dst) {$/;"	f
copy_str_to	sstring.hh	/^char* copy_str_to(char* dst, const Head& head, const Tail&... tail) {$/;"	f
correct_key	inline_variant.h	/^        typedef typename boost::mpl::has_key<fmap, T>::type correct_key;$/;"	m	struct:detail::generic_visitor
cost	WeightedPriorityQueue.h	/^        unsigned cost;$/;"	m	class:WeightedPriorityQueue::ListPair
count	Semaphore.h	/^  int count;$/;"	m	class:Semaphore
count	Throttle.h	/^  std::atomic<int64_t> count = { 0 }, max = { 0 };$/;"	m	class:Throttle
counters	bounded_key_counter.h	/^  map_type counters;$/;"	m	class:BoundedKeyCounter
cpp_strerror	errno.cc	/^std::string cpp_strerror(int err)$/;"	f
cpuid	Thread.h	/^  int cpuid;$/;"	m	class:Thread
crc32_align	crc32c_ppc.c	/^static unsigned int crc32_align(unsigned int crc, unsigned char const *p,$/;"	f	file:
crc32_iscsi_00	crc32c_intel_fast_asm.s	/^crc32_iscsi_00:$/;"	l
crc32_iscsi_zero_00	crc32c_intel_fast_zero_asm.s	/^crc32_iscsi_zero_00:$/;"	l
crc32_table_iscsi_base	crc32c_intel_baseline.c	/^unsigned long crc32_table_iscsi_base[256] = {$/;"	v
crc32_vpmsum	crc32c_ppc.c	/^static uint32_t crc32_vpmsum(uint32_t crc, unsigned char const *data,$/;"	f	file:
crc32c	Checksummer.h	/^  struct crc32c {$/;"	s	class:Checksummer
crc32c	buffer.cc	/^  uint32_t buffer::list::iterator_impl<is_const>::crc32c($/;"	f	class:buffer::list::iterator_impl
crc32c	buffer.cc	/^__u32 buffer::list::crc32c(__u32 crc) const$/;"	f	class:buffer::list
crc32c_16	Checksummer.h	/^  struct crc32c_16 {$/;"	s	class:Checksummer
crc32c_8	Checksummer.h	/^  struct crc32c_8 {$/;"	s	class:Checksummer
crc_iv	SloppyCRCMap.h	/^  static const int crc_iv = 0xffffffff;$/;"	m	class:SloppyCRCMap
crc_map	SloppyCRCMap.h	/^  std::map<uint64_t, uint32_t> crc_map;  \/\/ offset -> crc(-1)$/;"	m	class:SloppyCRCMap
crc_map	buffer.cc	/^    map<pair<size_t, size_t>, pair<uint32_t, uint32_t> > crc_map;$/;"	m	class:buffer::raw	file:
crc_spinlock	buffer.cc	/^    mutable std::atomic_flag crc_spinlock = ATOMIC_FLAG_INIT;$/;"	m	class:buffer::raw	file:
crc_table	crc32c_ppc_constants.h	/^static const unsigned int crc_table[] = {$/;"	v
crc_turbo_table	crc32c.cc	/^static uint32_t crc_turbo_table[32][32] =$/;"	v	file:
crc_zero	crc32c_ppc_constants.h	/^unsigned int crc_zero[] = {$/;"	v
create	Formatter.cc	/^Formatter *Formatter::create(boost::string_view type,$/;"	f	class:ceph::Formatter
create	Formatter.h	/^    static Formatter *create(boost::string_view type) {$/;"	f	class:ceph::Formatter
create	Formatter.h	/^    static Formatter *create(boost::string_view type,$/;"	f	class:ceph::Formatter
create	Thread.cc	/^void Thread::create(const char *name, size_t stacksize)$/;"	f	class:Thread
create	buffer.cc	/^    static raw_combined *create(unsigned len,$/;"	f	class:buffer::raw_combined
create	buffer.cc	/^  buffer::raw* buffer::create(unsigned len) {$/;"	f	class:buffer
create_aligned	buffer.cc	/^  buffer::raw* buffer::create_aligned($/;"	f	class:buffer
create_aligned_in_mempool	buffer.cc	/^  buffer::raw* buffer::create_aligned_in_mempool($/;"	f	class:buffer
create_channel	LogClient.h	/^  LogChannelRef create_channel() {$/;"	f	class:LogClient
create_channel	LogClient.h	/^  LogChannelRef create_channel(const std::string& name) {$/;"	f	class:LogClient
create_in_mempool	buffer.cc	/^  buffer::raw* buffer::create_in_mempool(unsigned len, int mempool) {$/;"	f	class:buffer
create_malloc	buffer.cc	/^  buffer::raw* buffer::create_malloc(unsigned len) {$/;"	f	class:buffer
create_msg	buffer.cc	/^  buffer::raw* buffer::create_msg($/;"	f	class:buffer
create_page_aligned	buffer.cc	/^  buffer::raw* buffer::create_page_aligned(unsigned len) {$/;"	f	class:buffer
create_perf_counters	perf_counters.cc	/^PerfCounters *PerfCountersBuilder::create_perf_counters()$/;"	f	class:PerfCountersBuilder
create_queue	PrioritizedQueue.h	/^  SubQueue *create_queue(unsigned priority) {$/;"	f	class:PrioritizedQueue
create_request	TrackedOp.h	/^  typename T::Ref create_request(U params)$/;"	f	class:OpTracker
create_shutdown_pipe	OutputDataSocket.cc	/^std::string OutputDataSocket::create_shutdown_pipe(int *pipe_rd, int *pipe_wr)$/;"	f	class:OutputDataSocket
create_shutdown_pipe	admin_socket.cc	/^std::string AdminSocket::create_shutdown_pipe(int *pipe_rd, int *pipe_wr)$/;"	f	class:AdminSocket
create_static	buffer.cc	/^  buffer::raw* buffer::create_static(unsigned len, char *buf) {$/;"	f	class:buffer
create_turbo_table	crc32c.cc	/^void create_turbo_table(uint32_t table[32][32])$/;"	f
create_unshareable	buffer.cc	/^  buffer::raw* buffer::create_unshareable(unsigned len) {$/;"	f	class:buffer
create_zero_copy	buffer.cc	/^  buffer::raw* buffer::create_zero_copy(unsigned len, int fd, int64_t *offset) {$/;"	f	class:buffer
created	snap_types.h	/^  snapid_t created() const { return snapid_t(h.created); }$/;"	f	struct:SnapRealmInfo
crush_location	ceph_context.h	/^  CrushLocation crush_location;$/;"	m	class:CephContext
crypto	ceph_crypto.h	/^  namespace crypto {$/;"	n	namespace:ceph
crypto_context	ceph_crypto.cc	/^static NSSInitContext *crypto_context = NULL;$/;"	v	file:
crypto_init_mutex	ceph_crypto.cc	/^static pthread_mutex_t crypto_init_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
crypto_init_pid	ceph_crypto.cc	/^static pid_t crypto_init_pid = 0;$/;"	v	file:
crypto_refs	ceph_crypto.cc	/^static uint32_t crypto_refs = 0;$/;"	v	file:
cstr	TrackedOp.h	/^    const char *cstr = nullptr;$/;"	m	struct:TrackedOp::Event
csz	cohort_lru.h	/^	int csz;$/;"	m	struct:cohort::lru::TreeX::Partition
csz	cohort_lru.h	/^      int csz;$/;"	m	class:cohort::lru::TreeX
ctx	EventTrace.h	/^  CephContext *ctx;$/;"	m	class:EventTrace
ctx	ceph_crypto.h	/^      PK11Context *ctx;$/;"	m	class:ceph::crypto::Digest
ctx	ceph_crypto.h	/^      PK11Context *ctx;$/;"	m	class:ceph::crypto::HMAC
cur	PrioritizedQueue.h	/^    typename Classes::iterator cur;$/;"	m	struct:PrioritizedQueue::SubQueue
cur	ceph_json.h	/^  map_iter_t cur;$/;"	m	class:JSONObjIter
cur	mClockPriorityQueue.h	/^      typename Classes::iterator cur;$/;"	m	struct:ceph::mClockQueue::SubQueue
cur	perf_counters.h	/^    pair<uint64_t, T> cur;$/;"	m	struct:PerfCounters::avg_tracker
cur_latency	obj_bencher.h	/^  utime_t cur_latency; \/\/latency of last completed transaction$/;"	m	struct:bench_data
cur_read_bucket	QueueRing.h	/^  std::atomic<int64_t> cur_read_bucket = { 0 };$/;"	m	class:QueueRing
cur_write_bucket	QueueRing.h	/^  std::atomic<int64_t> cur_write_bucket = { 0 };$/;"	m	class:QueueRing
curcol	TextTable.h	/^  unsigned int curcol, currow;		\/\/ col, row being inserted into$/;"	m	class:TextTable
current	Throttle.h	/^  uint64_t current = 0;$/;"	m	class:BackoffThrottle
current	TrackedOp.h	/^  const char *current = 0; \/\/\/< the current state the event is in$/;"	m	class:TrackedOp
current_avg	perf_counters.h	/^    T current_avg() const {$/;"	f	struct:PerfCounters::avg_tracker
current_maxid	lockdep.cc	/^unsigned current_maxid;$/;"	v
currow	TextTable.h	/^  unsigned int curcol, currow;		\/\/ col, row being inserted into$/;"	m	class:TextTable
cycles_per_sec	Cycles.cc	/^double Cycles::cycles_per_sec = 0;$/;"	m	class:Cycles	file:
cycles_per_sec	Cycles.h	/^  static double cycles_per_sec;$/;"	m	class:Cycles
daemon_value	options.h	/^  value_t daemon_value;$/;"	m	struct:Option
daemonize	Preforker.h	/^  void daemonize() {$/;"	f	class:Preforker
dashes_to_underscores	ceph_argparse.cc	/^static void dashes_to_underscores(const char *input, char *output)$/;"	f	file:
data	MemoryModel.h	/^    long data;$/;"	m	struct:MemoryModel::snap
data	OutputDataSocket.h	/^  std::list<bufferlist> data;$/;"	m	class:OutputDataSocket
data	buffer.cc	/^    char *data;$/;"	m	class:buffer::raw	file:
data	ceph_json.h	/^  Value data;$/;"	m	class:JSONObj
data	obj_bencher.h	/^  struct bench_data data;$/;"	m	class:ObjBencher	typeref:struct:ObjBencher::bench_data
data	perf_counters.h	/^    PerfCounters::perf_counter_data_any_d *data;$/;"	m	class:PerfCountersCollection::PerfCounterRef
data_dir_option	config.h	/^  string data_dir_option;  \/\/\/< data_dir config option, if any$/;"	m	struct:md_config_t
data_max_backlog	OutputDataSocket.h	/^  uint64_t data_max_backlog;$/;"	m	class:OutputDataSocket
data_size	OutputDataSocket.h	/^  uint64_t data_size;$/;"	m	class:OutputDataSocket
data_string	ceph_json.h	/^  string data_string;$/;"	m	class:JSONObj
debug	LogClient.h	/^  LogClientTemp debug() {$/;"	f	class:LogChannel
debug	LogClient.h	/^  void debug(std::stringstream &s) {$/;"	f	class:LogChannel
debug_mode	mempool.cc	/^bool mempool::debug_mode = false;$/;"	m	class:mempool	file:
dec	perf_counters.cc	/^void PerfCounters::dec(int idx, uint64_t amt)$/;"	f	class:PerfCounters
dec_pending	Readahead.cc	/^void Readahead::dec_pending(int count) {$/;"	f	class:Readahead
dec_total_alloc	buffer.cc	/^  void dec_total_alloc(unsigned len) {$/;"	f	namespace:__anon5
decay	DecayCounter.cc	/^void DecayCounter::decay(utime_t now, const DecayRate &rate)$/;"	f	class:DecayCounter
decay	histogram.cc	/^void pow2_hist_t::decay(int bits)$/;"	f	class:pow2_hist_t
decltype	backport14.h	/^constexpr auto size(const C& c) -> decltype(c.size()) {$/;"	f	namespace:ceph::_backport17
decode	DecayCounter.cc	/^void DecayCounter::decode(const utime_t &t, bufferlist::iterator &p)$/;"	f	class:DecayCounter
decode	DecayCounter.h	/^  void decode(bufferlist::iterator& p) {$/;"	f	class:DecayCounter
decode	DecayCounter.h	/^inline void decode(DecayCounter &c, bufferlist::iterator &p) {$/;"	f
decode	DecayCounter.h	/^inline void decode(DecayCounter &c, const utime_t &t, bufferlist::iterator &p) {$/;"	f
decode	LogEntry.cc	/^void LogEntry::decode(bufferlist::iterator& bl)$/;"	f	class:LogEntry
decode	LogEntry.cc	/^void LogEntryKey::decode(bufferlist::iterator& bl)$/;"	f	class:LogEntryKey
decode	LogEntry.cc	/^void LogSummary::decode(bufferlist::iterator& bl)$/;"	f	class:LogSummary
decode	SloppyCRCMap.cc	/^void SloppyCRCMap::decode(bufferlist::iterator& bl)$/;"	f	class:SloppyCRCMap
decode	bit_vector.hpp	/^void BitVector<_b>::decode(bufferlist::iterator& it) {$/;"	f	class:ceph::BitVector
decode	bloom_filter.cc	/^void bloom_filter::decode(bufferlist::iterator& p)$/;"	f	class:bloom_filter
decode	bloom_filter.cc	/^void compressible_bloom_filter::decode(bufferlist::iterator& p)$/;"	f	class:compressible_bloom_filter
decode	ceph_crypto_cms.cc	/^decode(CephContext *cct, SECItem *input, const struct decodeOptionsStr *decodeOptions, bufferlist& out)$/;"	f	file:
decode	ceph_time.h	/^    void decode(time_point<Clock, Duration>& t, bufferlist::iterator &p) {$/;"	f	namespace:std::chrono
decode	ceph_time.h	/^void decode(std::chrono::time_point<Clock, Duration>& t,$/;"	f
decode	entity_name.h	/^  void decode(bufferlist::iterator& bl) {$/;"	f	struct:EntityName
decode	fs_types.cc	/^void file_layout_t::decode(bufferlist::iterator& p)$/;"	f	class:file_layout_t
decode	histogram.cc	/^void pow2_hist_t::decode(bufferlist::iterator& p)$/;"	f	class:pow2_hist_t
decode	hobject.cc	/^void ghobject_t::decode(bufferlist::iterator& bl)$/;"	f	class:ghobject_t
decode	hobject.cc	/^void ghobject_t::decode(json_spirit::Value& v)$/;"	f	class:ghobject_t
decode	hobject.cc	/^void hobject_t::decode(bufferlist::iterator& bl)$/;"	f	class:hobject_t
decode	hobject.cc	/^void hobject_t::decode(json_spirit::Value& v)$/;"	f	class:hobject_t
decode	scrub_types.cc	/^void inconsistent_obj_wrapper::decode(bufferlist::iterator& bp)$/;"	f	class:inconsistent_obj_wrapper
decode	scrub_types.cc	/^void inconsistent_snapset_wrapper::decode(bufferlist::iterator& bp)$/;"	f	class:inconsistent_snapset_wrapper
decode	scrub_types.cc	/^void object_id_wrapper::decode(bufferlist::iterator& bp)$/;"	f	class:object_id_wrapper
decode	scrub_types.cc	/^void osd_shard_wrapper::decode(bufferlist::iterator& bp)$/;"	f	class:osd_shard_wrapper
decode	scrub_types.cc	/^void scrub_ls_arg_t::decode(bufferlist::iterator& bp)$/;"	f	class:scrub_ls_arg_t
decode	scrub_types.cc	/^void scrub_ls_result_t::decode(bufferlist::iterator& bp)$/;"	f	class:scrub_ls_result_t
decode	scrub_types.cc	/^void shard_info_wrapper::decode(bufferlist::iterator& bp)$/;"	f	class:shard_info_wrapper
decode	scrub_types.h	/^  inline void decode(librados::inconsistent_snapset_t& snapset,$/;"	f	namespace:librados
decode	scrub_types.h	/^  inline void decode(librados::osd_shard_t& shard, bufferlist::iterator& bp) {$/;"	f	namespace:librados
decode	scrub_types.h	/^  inline void decode(librados::shard_info_t& shard,$/;"	f	namespace:librados
decode	scrub_types.h	/^inline void decode(librados::inconsistent_obj_t& obj,$/;"	f
decode	scrub_types.h	/^inline void decode(librados::object_id_t& obj, bufferlist::iterator& bp) {$/;"	f
decode	snap_types.cc	/^void SnapRealmInfo::decode(bufferlist::iterator& bl)$/;"	f	class:SnapRealmInfo
decode	snap_types.h	/^  void decode(bufferlist::iterator& bl) {$/;"	f	struct:SnapContext
decode	sstring.hh	/^  static void decode(value_type& s,$/;"	f	struct:denc_traits
decode	zipkin_trace.h	/^static inline void decode(blkin_trace_info& b, bufferlist::iterator& p)$/;"	f
decodeOptionsStr	ceph_crypto_cms.cc	/^struct decodeOptionsStr {$/;"	s	file:
decode_base64	buffer.cc	/^void buffer::list::decode_base64(buffer::list& e)$/;"	f	class:buffer::list
decode_bits	armor.c	/^static int decode_bits(char c)$/;"	f	file:
decode_data	bit_vector.hpp	/^void BitVector<_b>::decode_data(bufferlist::iterator& it, uint64_t byte_offset) {$/;"	f	class:ceph::BitVector
decode_footer	bit_vector.hpp	/^void BitVector<_b>::decode_footer(bufferlist::iterator& it) {$/;"	f	class:ceph::BitVector
decode_header	bit_vector.hpp	/^void BitVector<_b>::decode_header(bufferlist::iterator& it) {$/;"	f	class:ceph::BitVector
decode_json	ceph_json.h	/^bool JSONDecoder::decode_json(const char *name, C& container, void (*cb)(C&, JSONObj *), JSONObj *obj, bool mandatory)$/;"	f	class:JSONDecoder
decode_json	ceph_json.h	/^bool JSONDecoder::decode_json(const char *name, T& val, JSONObj *obj, bool mandatory)$/;"	f	class:JSONDecoder
decode_json	ceph_json.h	/^void JSONDecoder::decode_json(const char *name, T& val, const T& default_val, JSONObj *obj)$/;"	f	class:JSONDecoder
decode_json_obj	ceph_json.cc	/^void decode_json_obj(bool& val, JSONObj *obj)$/;"	f
decode_json_obj	ceph_json.cc	/^void decode_json_obj(bufferlist& val, JSONObj *obj)$/;"	f
decode_json_obj	ceph_json.cc	/^void decode_json_obj(int& val, JSONObj *obj)$/;"	f
decode_json_obj	ceph_json.cc	/^void decode_json_obj(long long& val, JSONObj *obj)$/;"	f
decode_json_obj	ceph_json.cc	/^void decode_json_obj(long& val, JSONObj *obj)$/;"	f
decode_json_obj	ceph_json.cc	/^void decode_json_obj(unsigned long long& val, JSONObj *obj)$/;"	f
decode_json_obj	ceph_json.cc	/^void decode_json_obj(unsigned long& val, JSONObj *obj)$/;"	f
decode_json_obj	ceph_json.cc	/^void decode_json_obj(unsigned& val, JSONObj *obj)$/;"	f
decode_json_obj	ceph_json.cc	/^void decode_json_obj(utime_t& val, JSONObj *obj)$/;"	f
decode_json_obj	ceph_json.h	/^static inline void decode_json_obj(string& val, JSONObj *obj)$/;"	f
decode_json_obj	ceph_json.h	/^void decode_json_obj(C& container, void (*cb)(C&, JSONObj *obj), JSONObj *obj)$/;"	f
decode_json_obj	ceph_json.h	/^void decode_json_obj(T& val, JSONObj *obj)$/;"	f
decode_json_obj	ceph_json.h	/^void decode_json_obj(deque<T>& l, JSONObj *obj)$/;"	f
decode_json_obj	ceph_json.h	/^void decode_json_obj(list<T>& l, JSONObj *obj)$/;"	f
decode_json_obj	ceph_json.h	/^void decode_json_obj(map<K, V, C>& m, JSONObj *obj)$/;"	f
decode_json_obj	ceph_json.h	/^void decode_json_obj(multimap<K, V>& m, JSONObj *obj)$/;"	f
decode_json_obj	ceph_json.h	/^void decode_json_obj(set<T>& l, JSONObj *obj)$/;"	f
decode_json_obj	ceph_json.h	/^void decode_json_obj(vector<T>& l, JSONObj *obj)$/;"	f
decode_nohead	sstring.hh	/^  static void decode_nohead(size_t len, value_type& s,$/;"	f	struct:denc_traits
decode_out_escaped	hobject.cc	/^static const char *decode_out_escaped(const char *in, string *out)$/;"	f	file:
decode_utf8	utf8.c	/^unsigned long decode_utf8(unsigned char *buf, int nbytes)$/;"	f
define_column	TextTable.cc	/^void TextTable::define_column(const string &heading,$/;"	f	class:TextTable
del	buffer.cc	/^    deleter del;$/;"	m	class:buffer::raw_claim_buffer	file:
del	deleter.h	/^  Deleter del;$/;"	m	struct:final
deleter	deleter.h	/^  deleter(raw_object_tag tag, void* object)$/;"	f	class:final
deleter	deleter.h	/^  explicit deleter(impl* i) : _impl(i) {}$/;"	f	class:final
delim	OutputDataSocket.h	/^  bufferlist delim;$/;"	m	class:OutputDataSocket
delta	DecayCounter.h	/^  double delta;         \/\/ delta since last decay$/;"	m	class:DecayCounter
denc_traits	sstring.hh	/^struct denc_traits<basic_sstring<Char, Size, Max>> {$/;"	s
dendl	ceph_argparse.cc	33;"	d	file:
dendl	config.cc	36;"	d	file:
dendl	dout.h	84;"	d
dendl_impl	dout.h	79;"	d
density	bloom_filter.hpp	/^  inline double density() const$/;"	f	class:bloom_filter
dequeue	QueueRing.h	/^    void dequeue(T *entry) {$/;"	f	struct:QueueRing::QueueBucket
dequeue	QueueRing.h	/^  void dequeue(T *entry) {$/;"	f	class:QueueRing
dequeue	WorkQueue.h	/^    void dequeue(T *item) {$/;"	f	class:ThreadPool::BatchWorkQueue
dequeue	WorkQueue.h	/^    void dequeue(T *item) {$/;"	f	class:ThreadPool::WorkQueue
derr	ceph_argparse.cc	31;"	d	file:
derr	config.cc	33;"	d	file:
derr	debug.h	31;"	d
desc	TrackedOp.h	/^  mutable const char *desc = nullptr;  \/\/\/< readable without lock$/;"	m	class:TrackedOp
desc	options.h	/^  std::string desc;$/;"	m	struct:Option
desc_str	TrackedOp.h	/^  mutable string desc_str;   \/\/\/< protected by lock$/;"	m	class:TrackedOp
description	perf_counters.h	/^    const char *description;$/;"	m	struct:PerfCounters::perf_counter_data_any_d
destroy	Tub.h	/^  void destroy() {$/;"	f	class:Tub
destroy_channel	LogClient.h	/^  void destroy_channel(const std::string& name) {$/;"	f	class:LogClient
destroy_shutdown_pipe	admin_socket.cc	/^std::string AdminSocket::destroy_shutdown_pipe()$/;"	f	class:AdminSocket
detach	Thread.cc	/^int Thread::detach()$/;"	f	class:Thread
detail	inline_variant.h	/^namespace detail {$/;"	n
diff	config.cc	/^void md_config_t::diff($/;"	f	class:md_config_t
diff_helper	config.cc	/^void md_config_t::diff_helper($/;"	f	class:md_config_t
difference_type	autovector.h	/^    typedef typename TAutoVector::difference_type difference_type;$/;"	t	class:ceph::autovector::iterator_impl
difference_type	autovector.h	/^  typedef typename std::vector<T>::difference_type difference_type;$/;"	t	class:ceph::autovector
digest_size	ceph_crypto.h	/^      size_t digest_size;$/;"	m	class:ceph::crypto::Digest
digest_size	ceph_crypto.h	/^      unsigned int digest_size;$/;"	m	class:ceph::crypto::HMAC
digit	iso_8601.cc	/^uint16_t digit(char c) {$/;"	f	namespace:ceph::__anon1
disable_dlclose	PluginRegistry.h	/^    bool disable_dlclose;$/;"	m	class:ceph::PluginRegistry
disable_perf_counter	ceph_context.cc	/^void CephContext::disable_perf_counter()$/;"	f	class:CephContext
distribute_tokens	PrioritizedQueue.h	/^  void distribute_tokens(unsigned cost) {$/;"	f	class:PrioritizedQueue
distro_detect	util.cc	/^static void distro_detect(map<string, string> *m, CephContext *cct)$/;"	f	file:
dkcb	ceph_crypto_cms.cc	/^    NSSCMSGetDecryptKeyCallback dkcb;$/;"	m	struct:decodeOptionsStr	file:
dlog_p	debug.h	27;"	d
do_accept	OutputDataSocket.cc	/^bool OutputDataSocket::do_accept()$/;"	f	class:OutputDataSocket
do_accept	admin_socket.cc	/^bool AdminSocket::do_accept()$/;"	f	class:AdminSocket
do_command	ceph_context.cc	/^void CephContext::do_command(std::string command, cmdmap_t& cmdmap,$/;"	f	class:CephContext
do_log	LogClient.cc	/^void LogChannel::do_log(clog_type prio, const std::string& s)$/;"	f	class:LogChannel
do_log	LogClient.cc	/^void LogChannel::do_log(clog_type prio, std::stringstream& ss)$/;"	f	class:LogChannel
do_log_to_graylog	LogClient.h	/^  bool do_log_to_graylog() {$/;"	f	class:LogChannel
do_log_to_syslog	LogClient.h	/^  bool do_log_to_syslog() {$/;"	f	class:LogChannel
do_queues	AsyncReserver.h	/^  void do_queues() {$/;"	f	class:AsyncReserver
do_request	admin_socket_client.cc	/^std::string AdminSocketClient::do_request(std::string request, std::string *result)$/;"	f	class:AdminSocketClient
do_return	crc32c_intel_fast_asm.s	/^do_return:$/;"	l
do_return	crc32c_intel_fast_zero_asm.s	/^do_return:$/;"	l
do_writev	buffer.cc	/^static int do_writev(int fd, struct iovec *vec, uint64_t offset, unsigned veclen, unsigned bytes)$/;"	f	file:
does_follow	lockdep.cc	/^static bool does_follow(int a, int b)$/;"	f	file:
done	Cond.h	/^  bool *done;     \/\/\/< true after finish() has been called$/;"	m	class:C_SafeCond
done	Cond.h	/^  bool *done;   \/\/\/< true if finish() has been called$/;"	m	class:C_Cond
done	Cond.h	/^  bool done;     \/\/\/< true after finish() has been called$/;"	m	class:C_SaferCond
done	RefCountedObj.h	/^  void done() {$/;"	f	struct:RefCountedCond
done	RefCountedObj.h	/^  void done(int r) {$/;"	f	struct:RefCountedCond
done	obj_bencher.h	/^  bool done; \/\/is the benchmark is done$/;"	m	struct:bench_data
dout	ceph_argparse.cc	29;"	d	file:
dout	config.cc	30;"	d	file:
dout	debug.h	23;"	d
dout_context	TrackedOp.cc	15;"	d	file:
dout_context	TrackedOp.cc	403;"	d	file:
dout_context	TrackedOp.cc	404;"	d	file:
dout_emergency	dout.cc	/^void dout_emergency(const char * const str)$/;"	f
dout_emergency	dout.cc	/^void dout_emergency(const std::string &str)$/;"	f
dout_impl	dout.h	49;"	d
dout_prefix	Finisher.cc	7;"	d	file:
dout_prefix	Finisher.cc	8;"	d	file:
dout_prefix	HeartbeatMap.cc	23;"	d	file:
dout_prefix	HeartbeatMap.cc	24;"	d	file:
dout_prefix	LogClient.cc	96;"	d	file:
dout_prefix	LogClient.cc	97;"	d	file:
dout_prefix	OutputDataSocket.cc	28;"	d	file:
dout_prefix	OutputDataSocket.cc	29;"	d	file:
dout_prefix	Throttle.cc	14;"	d	file:
dout_prefix	Throttle.cc	15;"	d	file:
dout_prefix	Timer.cc	20;"	d	file:
dout_prefix	Timer.cc	21;"	d	file:
dout_prefix	TrackedOp.cc	17;"	d	file:
dout_prefix	TrackedOp.cc	18;"	d	file:
dout_prefix	WorkQueue.cc	20;"	d	file:
dout_prefix	WorkQueue.cc	21;"	d	file:
dout_prefix	admin_socket.cc	31;"	d	file:
dout_prefix	admin_socket.cc	32;"	d	file:
dout_prefix	dout.h	47;"	d
dout_subsys	Finisher.cc	6;"	d	file:
dout_subsys	HeartbeatMap.cc	22;"	d	file:
dout_subsys	LogClient.cc	27;"	d	file:
dout_subsys	MemoryModel.cc	10;"	d	file:
dout_subsys	OutputDataSocket.cc	27;"	d	file:
dout_subsys	PluginRegistry.cc	30;"	d	file:
dout_subsys	Throttle.cc	12;"	d	file:
dout_subsys	Timer.cc	19;"	d	file:
dout_subsys	TrackedOp.cc	16;"	d	file:
dout_subsys	WorkQueue.cc	19;"	d	file:
dout_subsys	admin_socket.cc	30;"	d	file:
dout_subsys	ceph_crypto_cms.cc	48;"	d	file:
dout_subsys	ceph_json.cc	11;"	d	file:
dout_subsys	common_init.cc	21;"	d	file:
dout_subsys	dns_resolve.cc	21;"	d	file:
dout_subsys	pick_address.cc	23;"	d	file:
drain	WorkQueue.cc	/^void ShardedThreadPool::drain()$/;"	f	class:ShardedThreadPool
drain	WorkQueue.cc	/^void ThreadPool::drain(WorkQueue_* wq)$/;"	f	class:ThreadPool
drain	WorkQueue.h	/^    void drain() {$/;"	f	class:ShardedThreadPool::ShardedWQ
drain	WorkQueue.h	/^    void drain() {$/;"	f	class:ThreadPool::BatchWorkQueue
drain	WorkQueue.h	/^    void drain() {$/;"	f	class:ThreadPool::PointerWQ
drain	WorkQueue.h	/^    void drain() {$/;"	f	class:ThreadPool::WorkQueue
drain	WorkQueue.h	/^    void drain() {$/;"	f	class:ThreadPool::WorkQueueVal
drain	cohort_lru.h	/^      void drain(std::function<void(T*)> uref,$/;"	f	class:cohort::lru::TreeX
drain_threads	WorkQueue.h	/^  std::atomic<bool> drain_threads = { false };$/;"	m	class:ShardedThreadPool
driver	map_cacher.hpp	/^  StoreDriver<K, V> *driver;$/;"	m	class:MapCacher::MapCacher
dummy	inline_variant.h	/^    typedef typename boost::mpl::fold<fmap, void, check_in<typename Variant::types> >::type dummy;$/;"	t	struct:detail::generic_visitor
dummy	inline_variant.h	/^    typedef typename boost::mpl::fold<return_types, result_type, check_same>::type dummy;$/;"	t	struct:get_generic_visitor
dummy_sighandler	SubProcess.h	/^static void dummy_sighandler(int sig) {}$/;"	f
dump	AsyncReserver.h	/^    void dump(Formatter *f) const {$/;"	f	struct:AsyncReserver::Reservation
dump	AsyncReserver.h	/^  void dump(Formatter *f) {$/;"	f	class:AsyncReserver
dump	DecayCounter.cc	/^void DecayCounter::dump(Formatter *f) const$/;"	f	class:DecayCounter
dump	LogEntry.cc	/^void LogEntry::dump(Formatter *f) const$/;"	f	class:LogEntry
dump	LogEntry.cc	/^void LogEntryKey::dump(Formatter *f) const$/;"	f	class:LogEntryKey
dump	LogEntry.cc	/^void LogSummary::dump(Formatter *f) const$/;"	f	class:LogSummary
dump	PrioritizedQueue.h	/^    void dump(ceph::Formatter *f) const {$/;"	f	struct:PrioritizedQueue::SubQueue
dump	SloppyCRCMap.cc	/^void SloppyCRCMap::dump(Formatter *f) const$/;"	f	class:SloppyCRCMap
dump	Timer.cc	/^void SafeTimer::dump(const char *caller) const$/;"	f	class:SafeTimer
dump	TrackedOp.cc	/^void TrackedOp::dump(utime_t now, Formatter *f) const$/;"	f	class:TrackedOp
dump	TrackedOp.h	/^    void dump(Formatter *f) const {$/;"	f	struct:TrackedOp::Event
dump	WeightedPriorityQueue.h	/^	void dump(ceph::Formatter *f) const {$/;"	f	class:WeightedPriorityQueue::Queue
dump	WeightedPriorityQueue.h	/^      void dump(ceph::Formatter *f) const {$/;"	f	class:WeightedPriorityQueue::SubQueue
dump	bit_vector.hpp	/^void BitVector<_b>::dump(Formatter *f) const {$/;"	f	class:ceph::BitVector
dump	bloom_filter.cc	/^void bloom_filter::dump(Formatter *f) const$/;"	f	class:bloom_filter
dump	bloom_filter.cc	/^void compressible_bloom_filter::dump(Formatter *f) const$/;"	f	class:compressible_bloom_filter
dump	fs_types.cc	/^void dump(const ceph_dir_layout& l, Formatter *f)$/;"	f
dump	fs_types.cc	/^void dump(const ceph_file_layout& l, Formatter *f)$/;"	f
dump	fs_types.cc	/^void file_layout_t::dump(Formatter *f) const$/;"	f	class:file_layout_t
dump	histogram.cc	/^void pow2_hist_t::dump(Formatter *f) const$/;"	f	class:pow2_hist_t
dump	hobject.cc	/^void ghobject_t::dump(Formatter *f) const$/;"	f	class:ghobject_t
dump	hobject.cc	/^void hobject_t::dump(Formatter *f) const$/;"	f	class:hobject_t
dump	mClockPriorityQueue.h	/^      void dump(ceph::Formatter *f) const {$/;"	f	struct:ceph::mClockQueue::SubQueue
dump	mempool.cc	/^void mempool::dump(ceph::Formatter *f)$/;"	f	class:mempool
dump	mempool.cc	/^void mempool::pool_t::dump(ceph::Formatter *f, stats_t *ptotal) const$/;"	f	class:mempool::pool_t
dump	options.cc	/^void Option::dump(Formatter *f) const$/;"	f	class:Option
dump	snap_types.cc	/^void SnapContext::dump(Formatter *f) const$/;"	f	class:SnapContext
dump	snap_types.cc	/^void SnapRealmInfo::dump(Formatter *f) const$/;"	f	class:SnapRealmInfo
dump_bit_str	bit_str.cc	/^void dump_bit_str($/;"	f
dump_bool	Formatter.h	/^    virtual void dump_bool(const char *name, bool b)$/;"	f	class:ceph::Formatter
dump_cmd_and_help_to_json	cmdparse.cc	/^dump_cmd_and_help_to_json(Formatter *jf,$/;"	f
dump_cmd_to_json	cmdparse.cc	/^dump_cmd_to_json(Formatter *f, const string& cmd)$/;"	f
dump_cmddesc_to_json	cmdparse.cc	/^dump_cmddesc_to_json(Formatter *jf,$/;"	f
dump_data	OutputDataSocket.cc	/^int OutputDataSocket::dump_data(int fd)$/;"	f	class:OutputDataSocket
dump_float	Formatter.cc	/^void JSONFormatter::dump_float(const char *name, double d)$/;"	f	class:ceph::JSONFormatter
dump_float	Formatter.cc	/^void TableFormatter::dump_float(const char *name, double d)$/;"	f	class:ceph::TableFormatter
dump_float	Formatter.cc	/^void XMLFormatter::dump_float(const char *name, double d)$/;"	f	class:ceph::XMLFormatter
dump_float	HTMLFormatter.cc	/^void HTMLFormatter::dump_float(const char *name, double d)$/;"	f	class:ceph::HTMLFormatter
dump_format	Formatter.cc	/^void Formatter::dump_format(const char *name, const char *fmt, ...)$/;"	f	class:ceph::Formatter
dump_format_ns	Formatter.cc	/^void Formatter::dump_format_ns(const char *name, const char *ns, const char *fmt, ...)$/;"	f	class:ceph::Formatter
dump_format_unquoted	Formatter.cc	/^void Formatter::dump_format_unquoted(const char *name, const char *fmt, ...)$/;"	f	class:ceph::Formatter
dump_format_va	Formatter.cc	/^void JSONFormatter::dump_format_va(const char *name, const char *ns, bool quoted, const char *fmt, va_list ap)$/;"	f	class:ceph::JSONFormatter
dump_format_va	Formatter.cc	/^void TableFormatter::dump_format_va(const char* name, const char *ns, bool quoted, const char *fmt, va_list ap)$/;"	f	class:ceph::TableFormatter
dump_format_va	Formatter.cc	/^void XMLFormatter::dump_format_va(const char* name, const char *ns, bool quoted, const char *fmt, va_list ap)$/;"	f	class:ceph::XMLFormatter
dump_format_va	HTMLFormatter.cc	/^void HTMLFormatter::dump_format_va(const char* name, const char *ns, bool quoted, const char *fmt, va_list ap)$/;"	f	class:ceph::HTMLFormatter
dump_formatted	perf_counters.h	/^  void dump_formatted(ceph::Formatter *f, bool schema,$/;"	f	class:PerfCounters
dump_formatted	perf_counters.h	/^  void dump_formatted(ceph::Formatter *f, bool schema,$/;"	f	class:PerfCountersCollection
dump_formatted	perf_histogram.h	/^  void dump_formatted(ceph::Formatter *f) const {$/;"	f	class:PerfHistogram
dump_formatted_axis	perf_histogram.cc	/^void PerfHistogramCommon::dump_formatted_axis($/;"	f	class:PerfHistogramCommon
dump_formatted_generic	perf_counters.cc	/^void PerfCounters::dump_formatted_generic(Formatter *f, bool schema,$/;"	f	class:PerfCounters
dump_formatted_generic	perf_counters.cc	/^void PerfCountersCollection::dump_formatted_generic($/;"	f	class:PerfCountersCollection
dump_formatted_histograms	perf_counters.h	/^  void dump_formatted_histograms(ceph::Formatter *f, bool schema,$/;"	f	class:PerfCounters
dump_formatted_histograms	perf_counters.h	/^  void dump_formatted_histograms(ceph::Formatter *f, bool schema,$/;"	f	class:PerfCountersCollection
dump_formatted_values	perf_histogram.h	/^  void dump_formatted_values(ceph::Formatter *f) const {$/;"	f	class:PerfHistogram
dump_historic_ops	TrackedOp.cc	/^bool OpTracker::dump_historic_ops(Formatter *f, bool by_duration, set<string> filters)$/;"	f	class:OpTracker
dump_historic_slow_ops	TrackedOp.cc	/^bool OpTracker::dump_historic_slow_ops(Formatter *f, set<string> filters)$/;"	f	class:OpTracker
dump_int	Formatter.cc	/^void JSONFormatter::dump_int(const char *name, int64_t s)$/;"	f	class:ceph::JSONFormatter
dump_int	Formatter.cc	/^void TableFormatter::dump_int(const char *name, int64_t u)$/;"	f	class:ceph::TableFormatter
dump_int	Formatter.cc	/^void XMLFormatter::dump_int(const char *name, int64_t u)$/;"	f	class:ceph::XMLFormatter
dump_int	HTMLFormatter.cc	/^void HTMLFormatter::dump_int(const char *name, int64_t u)$/;"	f	class:ceph::HTMLFormatter
dump_object	Formatter.h	/^    void dump_object(const char *name, const T& foo) {$/;"	f	class:ceph::Formatter
dump_open_fds	fd.cc	/^void dump_open_fds(CephContext *cct)$/;"	f
dump_ops	TrackedOp.cc	/^void OpHistory::dump_ops(utime_t now, Formatter *f, set<string> filters)$/;"	f	class:OpHistory
dump_ops_by_duration	TrackedOp.cc	/^void OpHistory::dump_ops_by_duration(utime_t now, Formatter *f, set<string> filters)$/;"	f	class:OpHistory
dump_ops_in_flight	TrackedOp.cc	/^bool OpTracker::dump_ops_in_flight(Formatter *f, bool print_only_blocked, set<string> filters)$/;"	f	class:OpTracker
dump_services	util.cc	/^void dump_services(Formatter* f, const map<string, list<int> >& services, const char* type)$/;"	f
dump_slow_ops	TrackedOp.cc	/^void OpHistory::dump_slow_ops(utime_t now, Formatter *f, set<string> filters)$/;"	f	class:OpHistory
dump_stream	Formatter.cc	/^std::ostream& JSONFormatter::dump_stream(const char *name)$/;"	f	class:ceph::JSONFormatter
dump_stream	Formatter.cc	/^std::ostream& TableFormatter::dump_stream(const char *name)$/;"	f	class:ceph::TableFormatter
dump_stream	Formatter.cc	/^std::ostream& XMLFormatter::dump_stream(const char *name)$/;"	f	class:ceph::XMLFormatter
dump_stream	HTMLFormatter.cc	/^std::ostream& HTMLFormatter::dump_stream(const char *name)$/;"	f	class:ceph::HTMLFormatter
dump_string	Formatter.cc	/^void JSONFormatter::dump_string(const char *name, boost::string_view s)$/;"	f	class:ceph::JSONFormatter
dump_string	Formatter.cc	/^void TableFormatter::dump_string(const char *name, boost::string_view s)$/;"	f	class:ceph::TableFormatter
dump_string	Formatter.cc	/^void XMLFormatter::dump_string(const char *name, boost::string_view s)$/;"	f	class:ceph::XMLFormatter
dump_string	HTMLFormatter.cc	/^void HTMLFormatter::dump_string(const char *name, boost::string_view s)$/;"	f	class:ceph::HTMLFormatter
dump_string_with_attrs	Formatter.cc	/^void TableFormatter::dump_string_with_attrs(const char *name, boost::string_view s, const FormatterAttrs& attrs)$/;"	f	class:ceph::TableFormatter
dump_string_with_attrs	Formatter.cc	/^void XMLFormatter::dump_string_with_attrs(const char *name, boost::string_view s, const FormatterAttrs& attrs)$/;"	f	class:ceph::XMLFormatter
dump_string_with_attrs	Formatter.h	/^    virtual void dump_string_with_attrs(const char *name, boost::string_view s, const FormatterAttrs& attrs)$/;"	f	class:ceph::Formatter
dump_string_with_attrs	HTMLFormatter.cc	/^void HTMLFormatter::dump_string_with_attrs(const char *name, boost::string_view s, const FormatterAttrs& attrs)$/;"	f	class:ceph::HTMLFormatter
dump_template	HTMLFormatter.cc	/^void HTMLFormatter::dump_template(const char *name, T arg)$/;"	f	class:ceph::HTMLFormatter
dump_unsigned	Formatter.cc	/^void JSONFormatter::dump_unsigned(const char *name, uint64_t u)$/;"	f	class:ceph::JSONFormatter
dump_unsigned	Formatter.cc	/^void TableFormatter::dump_unsigned(const char *name, uint64_t u)$/;"	f	class:ceph::TableFormatter
dump_unsigned	Formatter.cc	/^void XMLFormatter::dump_unsigned(const char *name, uint64_t u)$/;"	f	class:ceph::XMLFormatter
dump_unsigned	HTMLFormatter.cc	/^void HTMLFormatter::dump_unsigned(const char *name, uint64_t u)$/;"	f	class:ceph::HTMLFormatter
dump_value	options.cc	/^void Option::dump_value(const char *field_name,$/;"	f	class:Option
dump_weak_refs	shared_cache.hpp	/^  void dump_weak_refs() {$/;"	f	class:SharedLRU
dump_weak_refs	shared_cache.hpp	/^  void dump_weak_refs(ostream& out) {$/;"	f	class:SharedLRU
duration	TrackedOp.h	/^  set<pair<double, TrackedOpRef> > duration;$/;"	m	class:OpHistory
duration	ceph_time.h	/^      typedef timespan duration;$/;"	t	class:ceph::time_detail::coarse_mono_clock
duration	ceph_time.h	/^      typedef timespan duration;$/;"	t	class:ceph::time_detail::coarse_real_clock
duration	ceph_time.h	/^      typedef timespan duration;$/;"	t	class:ceph::time_detail::mono_clock
duration	ceph_time.h	/^      typedef timespan duration;$/;"	t	class:ceph::time_detail::real_clock
early_expand_meta	config.h	/^  bool early_expand_meta(std::string &val,$/;"	f	struct:md_config_t
effective_fpp	bloom_filter.hpp	/^  inline double effective_fpp() const$/;"	f	class:bloom_filter
element_count	bloom_filter.hpp	/^  inline std::size_t element_count() const$/;"	f	class:bloom_filter
element_type	Tub.h	/^  typedef ElementType element_type;$/;"	t	class:Tub
emplace_back	autovector.h	/^  void emplace_back(Args&&... args) {$/;"	f	class:ceph::autovector
empty	AsyncOpTracker.cc	/^bool AsyncOpTracker::empty() {$/;"	f	class:AsyncOpTracker
empty	PrioritizedQueue.h	/^    bool empty() const {$/;"	f	struct:PrioritizedQueue::SubQueue
empty	WeightedPriorityQueue.h	/^	bool empty() const {$/;"	f	class:WeightedPriorityQueue::Queue
empty	WeightedPriorityQueue.h	/^      bool empty() const {$/;"	f	class:WeightedPriorityQueue::Klass
empty	WeightedPriorityQueue.h	/^      bool empty() const {$/;"	f	class:WeightedPriorityQueue::SubQueue
empty	WorkQueue.h	/^    bool empty() {$/;"	f	class:ThreadPool::PointerWQ
empty	autovector.h	/^  bool empty() const { return size() == 0; }$/;"	f	class:ceph::autovector
empty	histogram.h	/^  bool empty() const {$/;"	f	struct:pow2_hist_t
empty	interval_map.h	/^  bool empty() const {$/;"	f	class:interval_map
empty	mClockPriorityQueue.h	/^      bool empty() const {$/;"	f	struct:ceph::mClockQueue::SubQueue
empty	shared_cache.hpp	/^  bool empty() {$/;"	f	class:SharedLRU
empty	sharedptr_registry.hpp	/^  bool empty() {$/;"	f	class:SharedPtrRegistry
empty	snap_types.h	/^  bool empty() { return seq == 0; }$/;"	f	struct:SnapContext
enable_perf_counter	ceph_context.cc	/^void CephContext::enable_perf_counter()$/;"	f	class:CephContext
encode	DecayCounter.cc	/^void DecayCounter::encode(bufferlist& bl) const$/;"	f	class:DecayCounter
encode	DecayCounter.h	/^inline void encode(const DecayCounter &c, bufferlist &bl) { c.encode(bl); }$/;"	f
encode	LogEntry.cc	/^void LogEntry::encode(bufferlist& bl, uint64_t features) const$/;"	f	class:LogEntry
encode	LogEntry.cc	/^void LogEntryKey::encode(bufferlist& bl, uint64_t features) const$/;"	f	class:LogEntryKey
encode	LogEntry.cc	/^void LogSummary::encode(bufferlist& bl, uint64_t features) const$/;"	f	class:LogSummary
encode	SloppyCRCMap.cc	/^void SloppyCRCMap::encode(bufferlist& bl) const$/;"	f	class:SloppyCRCMap
encode	bit_vector.hpp	/^void BitVector<_b>::encode(bufferlist& bl) const {$/;"	f	class:ceph::BitVector
encode	bloom_filter.cc	/^void bloom_filter::encode(bufferlist& bl) const$/;"	f	class:bloom_filter
encode	bloom_filter.cc	/^void compressible_bloom_filter::encode(bufferlist& bl) const$/;"	f	class:compressible_bloom_filter
encode	ceph_time.h	/^    void encode(const time_point<Clock, Duration>& t,$/;"	f	namespace:std::chrono
encode	ceph_time.h	/^void encode(const std::chrono::time_point<Clock, Duration>& t,$/;"	f
encode	entity_name.h	/^  void encode(bufferlist& bl) const {$/;"	f	struct:EntityName
encode	fs_types.cc	/^void file_layout_t::encode(bufferlist& bl, uint64_t features) const$/;"	f	class:file_layout_t
encode	histogram.cc	/^void pow2_hist_t::encode(bufferlist& bl) const$/;"	f	class:pow2_hist_t
encode	hobject.cc	/^void ghobject_t::encode(bufferlist& bl) const$/;"	f	class:ghobject_t
encode	hobject.cc	/^void hobject_t::encode(bufferlist& bl) const$/;"	f	class:hobject_t
encode	scrub_types.cc	/^  static void encode(const osd_shard_t& shard, bufferlist& bl)$/;"	f	namespace:librados
encode	scrub_types.cc	/^  static void encode(const shard_info_t& shard, bufferlist& bl)$/;"	f	namespace:librados
encode	scrub_types.cc	/^static void encode(const object_id_t& obj, bufferlist& bl)$/;"	f	file:
encode	scrub_types.cc	/^void inconsistent_obj_wrapper::encode(bufferlist& bl) const$/;"	f	class:inconsistent_obj_wrapper
encode	scrub_types.cc	/^void inconsistent_snapset_wrapper::encode(bufferlist& bl) const$/;"	f	class:inconsistent_snapset_wrapper
encode	scrub_types.cc	/^void object_id_wrapper::encode(bufferlist& bl) const$/;"	f	class:object_id_wrapper
encode	scrub_types.cc	/^void osd_shard_wrapper::encode(bufferlist& bl) const$/;"	f	class:osd_shard_wrapper
encode	scrub_types.cc	/^void scrub_ls_arg_t::encode(bufferlist& bl) const$/;"	f	class:scrub_ls_arg_t
encode	scrub_types.cc	/^void scrub_ls_result_t::encode(bufferlist& bl) const$/;"	f	class:scrub_ls_result_t
encode	scrub_types.cc	/^void shard_info_wrapper::encode(bufferlist& bl) const$/;"	f	class:shard_info_wrapper
encode	snap_types.cc	/^void SnapRealmInfo::encode(bufferlist& bl) const$/;"	f	class:SnapRealmInfo
encode	snap_types.h	/^  void encode(bufferlist& bl) const {$/;"	f	struct:SnapContext
encode	sstring.hh	/^  static void encode(const value_type& s,$/;"	f	struct:denc_traits
encode	zipkin_trace.h	/^static inline void encode(const blkin_trace_info& b, bufferlist& bl)$/;"	f
encode_base64	buffer.cc	/^void buffer::list::encode_base64(buffer::list& o)$/;"	f	class:buffer::list
encode_bits	armor.c	/^static int encode_bits(int c)$/;"	f	file:
encode_data	bit_vector.hpp	/^void BitVector<_b>::encode_data(bufferlist& bl, uint64_t byte_offset,$/;"	f	class:ceph::BitVector
encode_footer	bit_vector.hpp	/^void BitVector<_b>::encode_footer(bufferlist& bl) const {$/;"	f	class:ceph::BitVector
encode_header	bit_vector.hpp	/^void BitVector<_b>::encode_header(bufferlist& bl) const {$/;"	f	class:ceph::BitVector
encode_json	ceph_json.cc	/^void encode_json(const char *name, bool val, Formatter *f)$/;"	f
encode_json	ceph_json.cc	/^void encode_json(const char *name, const bufferlist& bl, Formatter *f)$/;"	f
encode_json	ceph_json.cc	/^void encode_json(const char *name, const char *val, Formatter *f)$/;"	f
encode_json	ceph_json.cc	/^void encode_json(const char *name, const string& val, Formatter *f)$/;"	f
encode_json	ceph_json.cc	/^void encode_json(const char *name, const utime_t& val, Formatter *f)$/;"	f
encode_json	ceph_json.cc	/^void encode_json(const char *name, int val, Formatter *f)$/;"	f
encode_json	ceph_json.cc	/^void encode_json(const char *name, long long val, Formatter *f)$/;"	f
encode_json	ceph_json.cc	/^void encode_json(const char *name, long val, Formatter *f)$/;"	f
encode_json	ceph_json.cc	/^void encode_json(const char *name, unsigned long long val, Formatter *f)$/;"	f
encode_json	ceph_json.cc	/^void encode_json(const char *name, unsigned long val, Formatter *f)$/;"	f
encode_json	ceph_json.cc	/^void encode_json(const char *name, unsigned val, Formatter *f)$/;"	f
encode_json	ceph_json.h	/^static void encode_json(const char *name, const T& val, ceph::Formatter *f)$/;"	f
encode_json	ceph_json.h	/^static void encode_json(const char *name, const std::deque<T>& l, ceph::Formatter *f)$/;"	f
encode_json	ceph_json.h	/^static void encode_json(const char *name, const std::list<T>& l, ceph::Formatter *f)$/;"	f
encode_json	ceph_json.h	/^static void encode_json(const char *name, const std::map<K, V, C>& m, ceph::Formatter *f)$/;"	f
encode_json	ceph_json.h	/^static void encode_json(const char *name, const std::multimap<K, V>& m, ceph::Formatter *f)$/;"	f
encode_json	ceph_json.h	/^static void encode_json(const char *name, const std::set<T>& l, ceph::Formatter *f)$/;"	f
encode_json	ceph_json.h	/^static void encode_json(const char *name, const std::vector<T>& l, ceph::Formatter *f)$/;"	f
encode_json_map	ceph_json.h	/^void encode_json_map(const char *name, const char *index_name, const char *value_name,$/;"	f
encode_json_map	ceph_json.h	/^void encode_json_map(const char *name, const char *index_name,$/;"	f
encode_json_map	ceph_json.h	/^void encode_json_map(const char *name, const map<K, V>& m, ceph::Formatter *f)$/;"	f
encode_nohead	sstring.hh	/^  static void encode_nohead(const value_type& s,$/;"	f	struct:denc_traits
encode_utf8	utf8.c	/^int encode_utf8(unsigned long u, unsigned char *buf)$/;"	f
encoded_size	hobject.cc	/^size_t ghobject_t::encoded_size() const$/;"	f	class:ghobject_t
end	autovector.h	/^  const_iterator end() const { return const_iterator(this, this->size()); }$/;"	f	class:ceph::autovector
end	autovector.h	/^  iterator end() { return iterator(this, this->size()); }$/;"	f	class:ceph::autovector
end	bit_vector.hpp	/^  inline ConstIterator end() const {$/;"	f	class:ceph::BitVector
end	bit_vector.hpp	/^  inline Iterator end() {$/;"	f	class:ceph::BitVector
end	ceph_json.h	/^  bool end() const {$/;"	f	class:JSONObjIter
end	interval_map.h	/^  const_iterator end() const {$/;"	f	class:interval_map
end	sstring.hh	/^    char_type* end() { return str() + size(); }$/;"	f	class:basic_sstring
end	sstring.hh	/^    const char_type* end() const { return str() + size(); }$/;"	f	class:basic_sstring
end_c_str	buffer.cc	/^  char *buffer::ptr::end_c_str() {$/;"	f	class:buffer::ptr
end_c_str	buffer.cc	/^  const char *buffer::ptr::end_c_str() const {$/;"	f	class:buffer::ptr
end_op	Throttle.cc	/^void OrderedThrottle::end_op(int r) {$/;"	f	class:OrderedThrottle
end_op	Throttle.cc	/^void SimpleThrottle::end_op(int r)$/;"	f	class:SimpleThrottle
endl	dout.h	/^static const _bad_endl_use_dendl_t endl = 0;$/;"	v
endrow	TextTable.h	/^  static endrow_t endrow;$/;"	m	class:TextTable
endrow_t	TextTable.h	/^  struct endrow_t {};$/;"	s	class:TextTable
enqueue	PrioritizedQueue.h	/^    void enqueue(K cl, unsigned cost, T item) {$/;"	f	struct:PrioritizedQueue::SubQueue
enqueue	QueueRing.h	/^    void enqueue(const T& entry) {$/;"	f	struct:QueueRing::QueueBucket
enqueue	QueueRing.h	/^  void enqueue(const T& entry) {$/;"	f	class:QueueRing
enqueue	mClockPriorityQueue.h	/^      void enqueue(K cl, cost_t cost, T item) {$/;"	f	struct:ceph::mClockQueue::SubQueue
enqueue_front	PrioritizedQueue.h	/^    void enqueue_front(K cl, unsigned cost, T item) {$/;"	f	struct:PrioritizedQueue::SubQueue
enqueue_front	mClockPriorityQueue.h	/^      void enqueue_front(K cl, cost_t cost, T item) {$/;"	f	struct:ceph::mClockQueue::SubQueue
entity_addr_from_url	address_helper.cc	/^int entity_addr_from_url(entity_addr_t *addr \/* out *\/, const char *url)$/;"	f
entries	QueueRing.h	/^    typename std::list<T> entries;$/;"	m	struct:QueueRing::QueueBucket
entries	lru_map.h	/^  std::map<K, entry> entries;$/;"	m	class:lru_map
entries_lru	lru_map.h	/^  std::list<K> entries_lru;$/;"	m	class:lru_map
entry	OutputDataSocket.cc	/^void* OutputDataSocket::entry()$/;"	f	class:OutputDataSocket
entry	admin_socket.cc	/^void* AdminSocket::entry()$/;"	f	class:AdminSocket
entry	lru_map.h	/^  struct entry {$/;"	s	class:lru_map
entry_wrapper	Thread.cc	/^void *Thread::entry_wrapper()$/;"	f	class:Thread
enum_allowed	options.h	/^  std::list<std::string> enum_allowed;$/;"	m	struct:Option
env_to_vec	ceph_argparse.cc	/^void env_to_vec(std::vector<const char*>& args, const char *name)$/;"	f
erase	CommandTable.h	/^  void erase(ceph_tid_t tid)$/;"	f	class:CommandTable
erase	bounded_key_counter.h	/^  void erase(const Key& key)$/;"	f	class:BoundedKeyCounter
erase	interval_map.h	/^  void erase(K off, K len) {$/;"	f	class:interval_map
erase	lru_map.h	/^void lru_map<K, V>::erase(const K& key)$/;"	f	class:lru_map
erase	sstring.hh	/^    iterator erase(iterator first, iterator last) {$/;"	f	class:basic_sstring
err	SubProcess.h	/^inline const std::string SubProcess::err() const {$/;"	f	class:SubProcess
err	ceph_argparse.cc	/^  std::string *err;$/;"	m	struct:strict_str_convert	file:
err	ceph_json.h	/^    err(const string& m) : message(m) {}$/;"	f	struct:JSONDecoder::err
err	ceph_json.h	/^  struct err {$/;"	s	class:JSONDecoder
error	LogClient.h	/^  LogClientTemp error() {$/;"	f	class:LogChannel
error	LogClient.h	/^  void error(std::stringstream &s) {$/;"	f	class:LogChannel
error_code	buffer.cc	/^  buffer::error_code::error_code(int error) :$/;"	f	class:buffer::error_code
errstr	SubProcess.h	/^  std::ostringstream errstr;$/;"	m	class:SubProcess
escape_json_attr	escape.c	/^void escape_json_attr(const char *buf, size_t src_len, char *out)$/;"	f
escape_json_attr_len	escape.c	/^size_t escape_json_attr_len(const char *buf, size_t src_len)$/;"	f
escape_xml_attr	escape.c	/^void escape_xml_attr(const char *buf, char *out)$/;"	f
escape_xml_attr_len	escape.c	/^size_t escape_xml_attr_len(const char *buf)$/;"	f
escape_xml_str	Formatter.cc	/^std::string XMLFormatter::escape_xml_str(boost::string_view str)$/;"	f	class:ceph::XMLFormatter
event	ceph_timer.h	/^	event() : t(TC::time_point::min()), id(0) {}$/;"	f	struct:ceph::timer_detail::timer::event
event	ceph_timer.h	/^	event(typename TC::time_point _t, uint64_t _id,$/;"	f	struct:ceph::timer_detail::timer::event
event	ceph_timer.h	/^	event(uint64_t _id) : t(TC::time_point::min()), id(_id) {}$/;"	f	struct:ceph::timer_detail::timer::event
event	ceph_timer.h	/^      struct event {$/;"	s	class:ceph::timer_detail::timer
event	zipkin_trace.h	/^  void event(const char *event) const {}$/;"	f	class:ZTracer::Trace
event	zipkin_trace.h	/^  void event(const char *event, const Endpoint *ep) const {}$/;"	f	class:ZTracer::Trace
event_link	ceph_timer.h	/^	sh event_link;$/;"	m	struct:ceph::timer_detail::timer::event
event_lookup_map_t	Timer.cc	/^typedef std::map < Context*, scheduled_map_t::iterator > event_lookup_map_t;$/;"	t	file:
events	Timer.h	/^  std::map<Context*, std::multimap<utime_t, Context*>::iterator> events;$/;"	m	class:SafeTimer
events	TrackedOp.h	/^  vector<Event> events;    \/\/\/< list of events and their times$/;"	m	class:TrackedOp
evict_block	cohort_lru.h	/^      Object* evict_block() {$/;"	f	class:cohort::lru::LRU
evict_lane	cohort_lru.h	/^      std::atomic<uint32_t> evict_lane;$/;"	m	class:cohort::lru::LRU
exec	SubProcess.h	/^inline void SubProcess::exec() {$/;"	f	class:SubProcess
exec	SubProcess.h	/^inline void SubProcessTimed::exec() {$/;"	f	class:SubProcessTimed
exists	CommandTable.h	/^  bool exists(ceph_tid_t tid) const$/;"	f	class:CommandTable
exit	Preforker.h	/^  void exit(int r) {$/;"	f	class:Preforker
exit_thread	ceph_context.cc	/^  void exit_thread()$/;"	f	class:CephContextServiceThread
expand_all_meta	config.cc	/^void md_config_t::expand_all_meta()$/;"	f	class:md_config_t
expand_meta	config.cc	/^bool md_config_t::expand_meta(std::string &origval,$/;"	f	class:md_config_t
expand_meta	config.cc	/^bool md_config_t::expand_meta(std::string &val,$/;"	f	class:md_config_t
ext_count	interval_map.h	/^  unsigned ext_count() const {$/;"	f	class:interval_map
extent_t	Readahead.h	/^  typedef std::pair<uint64_t, uint64_t> extent_t;$/;"	t	class:Readahead
external	sstring.hh	/^        } external;$/;"	m	union:basic_sstring::contents	typeref:struct:basic_sstring::contents::external_type
external_type	sstring.hh	/^        struct external_type {$/;"	s	union:basic_sstring::contents
f	AsyncReserver.h	/^  Finisher *f;$/;"	m	class:AsyncReserver
f	backport14.h	/^  not_fn_result(const not_fn_result& f) = default;$/;"	m	class:ceph::_backport17::not_fn_result
f	backport14.h	/^  not_fn_result(not_fn_result&& f) = default;$/;"	m	class:ceph::_backport17::not_fn_result
f	ceph_timer.h	/^	std::function<void()> f;$/;"	m	struct:ceph::timer_detail::timer::event
fd	Preforker.h	/^  int fd[2];  \/\/ parent's, child's$/;"	m	class:Preforker
fd	SubProcess.h	/^  int fd;$/;"	m	class:fd_buf
fd_buf	SubProcess.h	/^  fd_buf (int fd) : fd(fd)$/;"	f	class:fd_buf
fd_buf	SubProcess.h	/^class fd_buf : public std::streambuf {$/;"	c
featured	sstring.hh	/^  static constexpr bool featured = false;$/;"	m	struct:denc_traits
fetch_bench_metadata	obj_bencher.cc	/^int ObjBencher::fetch_bench_metadata(const std::string& metadata_file,$/;"	f	class:ObjBencher
file	EventTrace.h	/^  string file;$/;"	m	class:EventTrace
file_values_parse	util.cc	/^static void file_values_parse(const map<string, string>& kvm, FILE *fp, map<string, string> *m, CephContext *cct) {$/;"	f	file:
fill_in_one_address	pick_address.cc	/^static void fill_in_one_address(CephContext *cct,$/;"	f	file:
filter_class	WeightedPriorityQueue.h	/^	void filter_class(K& cl, std::list<T>* out) {$/;"	f	class:WeightedPriorityQueue::Queue
filter_class	WeightedPriorityQueue.h	/^      unsigned filter_class(K& cl, std::list<T>* out) {$/;"	f	class:WeightedPriorityQueue::SubQueue
filter_class	WeightedPriorityQueue.h	/^      unsigned filter_class(std::list<T>* out) {$/;"	f	class:WeightedPriorityQueue::Klass
filter_list_pairs	mClockPriorityQueue.h	/^    static unsigned filter_list_pairs(ListPairs *l,$/;"	f	class:ceph::mClockQueue
filter_out	TrackedOp.h	/^  virtual bool filter_out(const set<string>& filters) { return true; }$/;"	f	class:TrackedOp
fin	Finisher.h	/^    Finisher *fin;    $/;"	m	struct:Finisher::FinisherThread
fin	Finisher.h	/^  Finisher *fin;$/;"	m	class:C_OnFinisher
final	RWLock.h	/^class RWLock final$/;"	c
final	deleter.h	/^class deleter final {$/;"	c
final	deleter.h	/^struct free_deleter_impl final : deleter::impl {$/;"	s
final	deleter.h	/^struct lambda_deleter_impl final : deleter::impl {$/;"	s
final	deleter.h	/^struct object_deleter_impl final : deleter::impl {$/;"	s
find	ceph_json.cc	/^JSONObjIter JSONObj::find(const string& name)$/;"	f	class:JSONObj
find	cohort_lru.h	/^      T* find(uint64_t hk, const K& k, uint32_t flags) {$/;"	f	class:cohort::lru::TreeX
find	lru_map.h	/^bool lru_map<K, V>::find(const K& key, V& value)$/;"	f	class:lru_map
find_and_update	lru_map.h	/^bool lru_map<K, V>::find_and_update(const K& key, V *value, UpdateContext *ctx)$/;"	f	class:lru_map
find_first	ceph_json.cc	/^JSONObjIter JSONObj::find_first()$/;"	f	class:JSONObj
find_first	ceph_json.cc	/^JSONObjIter JSONObj::find_first(const string& name)$/;"	f	class:JSONObj
find_ip_in_subnet	ipaddr.cc	/^const struct ifaddrs *find_ip_in_subnet(const struct ifaddrs *addrs,$/;"	f
find_ip_in_subnet_list	pick_address.cc	/^const struct sockaddr *find_ip_in_subnet_list($/;"	f
find_ipv4_in_subnet	ipaddr.cc	/^const struct ifaddrs *find_ipv4_in_subnet(const struct ifaddrs *addrs,$/;"	f
find_ipv6_in_subnet	ipaddr.cc	/^const struct ifaddrs *find_ipv6_in_subnet(const struct ifaddrs *addrs,$/;"	f
find_latch	cohort_lru.h	/^      T* find_latch(uint64_t hk, const K& k, Latch& lat,$/;"	f	class:cohort::lru::TreeX
find_obj	ceph_json.cc	/^JSONObj *JSONObj::find_obj(const string& name)$/;"	f	class:JSONObj
find_optimal_parameters	bloom_filter.hpp	/^  static void find_optimal_parameters(std::size_t target_insert_count,$/;"	f	class:bloom_filter
fini	Checksummer.h	/^    static void fini(state_t *s) {$/;"	f	struct:Checksummer::xxhash32
fini	Checksummer.h	/^    static void fini(state_t *s) {$/;"	f	struct:Checksummer::xxhash64
fini	Checksummer.h	/^    static void fini(state_t *state) {$/;"	f	struct:Checksummer::crc32c
fini	Checksummer.h	/^    static void fini(state_t *state) {$/;"	f	struct:Checksummer::crc32c_16
fini	Checksummer.h	/^    static void fini(state_t *state) {$/;"	f	struct:Checksummer::crc32c_8
finish	Throttle.cc	/^void C_OrderedThrottle::finish(int r) {$/;"	f	class:C_OrderedThrottle
finish_adding_requests	ContextCompletion.cc	/^void ContextCompletion::finish_adding_requests() {$/;"	f	class:ceph::ContextCompletion
finish_op	AsyncOpTracker.cc	/^void AsyncOpTracker::finish_op() {$/;"	f	class:AsyncOpTracker
finish_op	ContextCompletion.cc	/^void ContextCompletion::finish_op(int r) {$/;"	f	class:ceph::ContextCompletion
finish_op	Throttle.cc	/^void OrderedThrottle::finish_op(uint64_t tid, int r) {$/;"	f	class:OrderedThrottle
finish_pending_string	Formatter.cc	/^void JSONFormatter::finish_pending_string()$/;"	f	class:ceph::JSONFormatter
finish_pending_string	Formatter.cc	/^void TableFormatter::finish_pending_string()$/;"	f	class:ceph::TableFormatter
finish_pending_string	Formatter.cc	/^void XMLFormatter::finish_pending_string()$/;"	f	class:ceph::XMLFormatter
finished	Throttle.h	/^    bool finished;$/;"	m	struct:OrderedThrottle::Result
finished	obj_bencher.h	/^  int finished;$/;"	m	struct:bench_data
finisher_cond	Finisher.h	/^  Cond         finisher_cond; \/\/\/< Signaled when there is something to process.$/;"	m	class:Finisher
finisher_empty_cond	Finisher.h	/^  Cond         finisher_empty_cond; \/\/\/< Signaled when the finisher has nothing more to process.$/;"	m	class:Finisher
finisher_empty_wait	Finisher.h	/^  bool	       finisher_empty_wait; \/\/\/< True mean someone wait finisher empty.$/;"	m	class:Finisher
finisher_lock	Finisher.h	/^  Mutex        finisher_lock; \/\/\/< Protects access to queues and finisher_running.$/;"	m	class:Finisher
finisher_queue	Finisher.h	/^  vector<Context*> finisher_queue;$/;"	m	class:Finisher
finisher_queue_rval	Finisher.h	/^  list<pair<Context*,int> > finisher_queue_rval;$/;"	m	class:Finisher
finisher_running	Finisher.h	/^  bool         finisher_running; \/\/\/< True when the finisher is currently executing contexts.$/;"	m	class:Finisher
finisher_stop	Finisher.h	/^  bool         finisher_stop; \/\/\/< Set when the finisher should stop.$/;"	m	class:Finisher
finisher_thread	Finisher.h	/^  } finisher_thread;$/;"	m	class:Finisher	typeref:struct:Finisher::FinisherThread
finisher_thread_entry	Finisher.cc	/^void *Finisher::finisher_thread_entry()$/;"	f	class:Finisher
flush	Formatter.cc	/^void Formatter::flush(bufferlist &bl)$/;"	f	class:ceph::Formatter
flush	Formatter.cc	/^void JSONFormatter::flush(std::ostream& os)$/;"	f	class:ceph::JSONFormatter
flush	Formatter.cc	/^void TableFormatter::flush(std::ostream& os)$/;"	f	class:ceph::TableFormatter
flush	Formatter.cc	/^void XMLFormatter::flush(std::ostream& os)$/;"	f	class:ceph::XMLFormatter
fmap	inline_variant.h	/^    typedef typename as_map<pair_list>::type fmap;$/;"	t	struct:detail::generic_visitor
follows	lockdep.cc	/^static char follows[MAX_LOCKS][MAX_LOCKS\/8]; \/\/ follows[a][b] means b taken after a$/;"	v	file:
follows_bt	lockdep.cc	/^static BackTrace *follows_bt[MAX_LOCKS][MAX_LOCKS];$/;"	v	file:
fork_function	fork_function.h	/^static inline int fork_function($/;"	f
forked	Preforker.h	/^  bool forked;$/;"	m	class:Preforker
formatter	obj_bencher.h	/^  Formatter *formatter = NULL;$/;"	m	class:ObjBencher
free_deleter_impl	deleter.h	/^  free_deleter_impl(void* obj) : impl(deleter()), obj(obj) {}$/;"	f	struct:final
free_ids	lockdep.cc	/^static char free_ids[MAX_LOCKS\/8]; \/\/ bit set = free$/;"	v	file:
free_ids_inited	lockdep.cc	/^static bool free_ids_inited;$/;"	v	file:
from_ceph_timespec	ceph_time.cc	/^    coarse_real_clock::time_point coarse_real_clock::from_ceph_timespec($/;"	f	class:ceph::time_detail::coarse_real_clock
from_ceph_timespec	ceph_time.cc	/^    real_clock::time_point real_clock::from_ceph_timespec($/;"	f	class:ceph::time_detail::real_clock
from_double	ceph_time.h	/^      static time_point from_double(const double d) {$/;"	f	class:ceph::time_detail::coarse_real_clock
from_double	ceph_time.h	/^      static time_point from_double(const double d) {$/;"	f	class:ceph::time_detail::real_clock
from_legacy	fs_types.cc	/^void file_layout_t::from_legacy(const ceph_file_layout& fl)$/;"	f	class:file_layout_t
from_nanoseconds	Cycles.cc	/^Cycles::from_nanoseconds(uint64_t ns, double cycles_per_sec)$/;"	f	class:Cycles
from_raw_object	deleter.h	/^  impl* from_raw_object(void* object) {$/;"	f	class:final
from_seconds	Cycles.cc	/^uint64_t Cycles::from_seconds(double seconds, double cycles_per_sec)$/;"	f	class:Cycles
from_str	entity_name.cc	/^from_str(const string& s)$/;"	f	class:EntityName
from_timespec	ceph_time.h	/^      static time_point from_timespec(const struct timespec& ts) {$/;"	f	class:ceph::time_detail::coarse_real_clock
from_timespec	ceph_time.h	/^      static time_point from_timespec(const struct timespec& ts) {$/;"	f	class:ceph::time_detail::real_clock
from_timeval	ceph_time.h	/^      static time_point from_timeval(const struct timeval& tv) {$/;"	f	class:ceph::time_detail::coarse_real_clock
from_timeval	ceph_time.h	/^      static time_point from_timeval(const struct timeval& tv) {$/;"	f	class:ceph::time_detail::real_clock
front	PrioritizedQueue.h	/^    std::pair<unsigned, T> front() const {$/;"	f	struct:PrioritizedQueue::SubQueue
front	WorkQueue.h	/^    T *front() {$/;"	f	class:ThreadPool::PointerWQ
front	autovector.h	/^  const_reference front() const {$/;"	f	class:ceph::autovector
front	autovector.h	/^  reference front() {$/;"	f	class:ceph::autovector
front	mClockPriorityQueue.h	/^      std::pair<cost_t, T> front() const {$/;"	f	struct:ceph::mClockQueue::SubQueue
func	EventTrace.h	/^  string func;$/;"	m	class:EventTrace
function_arg_extractor	inline_variant.h	/^struct function_arg_extractor$/;"	s	namespace:detail
function_return_extractor	inline_variant.h	/^struct function_return_extractor$/;"	s
function_types	inline_variant.h	/^    typedef boost::mpl::vector<Functions...> function_types;$/;"	t	struct:detail::generic_visitor
function_types	inline_variant.h	/^    typedef boost::mpl::vector<Functions...> function_types;$/;"	t	struct:get_generic_visitor
fvec	inline_variant.h	/^    boost::fusion::vector<Functions...> fvec;$/;"	m	struct:detail::generic_visitor
g_assert_context	assert.cc	/^  static CephContext *g_assert_context = NULL;$/;"	m	namespace:ceph	file:
g_code_env	code_environment.cc	/^code_environment_t g_code_env = CODE_ENVIRONMENT_UTILITY;$/;"	v
g_lockdep_ceph_ctx	lockdep.cc	/^static CephContext *g_lockdep_ceph_ctx = NULL;$/;"	v	file:
g_str_vec	ceph_argparse.cc	/^static vector<string> g_str_vec;$/;"	v	file:
g_str_vec_lock	ceph_argparse.cc	/^static std::mutex g_str_vec_lock;$/;"	v	file:
gen_t	hobject.h	/^typedef version_t gen_t;$/;"	t
generate_object_name	obj_bencher.cc	/^static std::string generate_object_name(int objnum, int pid = 0)$/;"	f	file:
generate_object_prefix	obj_bencher.cc	/^static std::string generate_object_prefix(int pid = 0) {$/;"	f	file:
generate_object_prefix_nopid	obj_bencher.cc	/^static std::string generate_object_prefix_nopid() {$/;"	f	file:
generate_test_instances	DecayCounter.cc	/^void DecayCounter::generate_test_instances(list<DecayCounter*>& ls)$/;"	f	class:DecayCounter
generate_test_instances	LogEntry.cc	/^void LogEntry::generate_test_instances(list<LogEntry*>& o)$/;"	f	class:LogEntry
generate_test_instances	LogEntry.cc	/^void LogEntryKey::generate_test_instances(list<LogEntryKey*>& o)$/;"	f	class:LogEntryKey
generate_test_instances	LogEntry.cc	/^void LogSummary::generate_test_instances(list<LogSummary*>& o)$/;"	f	class:LogSummary
generate_test_instances	SloppyCRCMap.cc	/^void SloppyCRCMap::generate_test_instances(list<SloppyCRCMap*>& ls)$/;"	f	class:SloppyCRCMap
generate_test_instances	bit_vector.hpp	/^void BitVector<_b>::generate_test_instances(std::list<BitVector *> &o) {$/;"	f	class:ceph::BitVector
generate_test_instances	bloom_filter.cc	/^void bloom_filter::generate_test_instances(std::list<bloom_filter*>& ls)$/;"	f	class:bloom_filter
generate_test_instances	bloom_filter.cc	/^void compressible_bloom_filter::generate_test_instances(std::list<compressible_bloom_filter*>& ls)$/;"	f	class:compressible_bloom_filter
generate_test_instances	fs_types.cc	/^void file_layout_t::generate_test_instances(list<file_layout_t*>& o)$/;"	f	class:file_layout_t
generate_test_instances	histogram.cc	/^void pow2_hist_t::generate_test_instances(std::list<pow2_hist_t*>& ls)$/;"	f	class:pow2_hist_t
generate_test_instances	hobject.cc	/^void ghobject_t::generate_test_instances(list<ghobject_t*>& o)$/;"	f	class:ghobject_t
generate_test_instances	hobject.cc	/^void hobject_t::generate_test_instances(list<hobject_t*>& o)$/;"	f	class:hobject_t
generate_test_instances	snap_types.cc	/^void SnapContext::generate_test_instances(list<SnapContext*>& o)$/;"	f	class:SnapContext
generate_test_instances	snap_types.cc	/^void SnapRealmInfo::generate_test_instances(list<SnapRealmInfo*>& o)$/;"	f	class:SnapRealmInfo
generate_unique_salt	bloom_filter.hpp	/^  void generate_unique_salt()$/;"	f	class:bloom_filter
generation	hobject.h	/^  gen_t generation;$/;"	m	struct:ghobject_t
generic_client_usage	ceph_argparse.cc	/^void generic_client_usage()$/;"	f
generic_derr	debug.h	33;"	d
generic_dout	ceph_argparse.cc	32;"	d	file:
generic_dout	config.cc	35;"	d	file:
generic_dout	debug.h	29;"	d
generic_server_usage	ceph_argparse.cc	/^void generic_server_usage()$/;"	f
generic_usage	ceph_argparse.cc	/^static void generic_usage(bool is_server)$/;"	f	file:
generic_visitor	inline_variant.h	/^struct generic_visitor : boost::static_visitor<Result>, boost::noncopyable$/;"	s	namespace:detail
get	DecayCounter.h	/^  double get(utime_t now) {$/;"	f	class:DecayCounter
get	DecayCounter.h	/^  double get(utime_t now, const DecayRate& rate) {$/;"	f	class:DecayCounter
get	PluginRegistry.cc	/^Plugin *PluginRegistry::get(const std::string& type,$/;"	f	class:PluginRegistry
get	RWLock.h	/^  void get(bool for_write) {$/;"	f	class:final
get	RefCountedObj.h	/^  RefCountedObject *get() {$/;"	f	struct:RefCountedObject
get	RefCountedObj.h	/^  RefCountedWaitObject *get() {$/;"	f	struct:RefCountedWaitObject
get	RefCountedObj.h	/^  const RefCountedObject *get() const {$/;"	f	struct:RefCountedObject
get	Throttle.cc	/^bool Throttle::get(int64_t c, int64_t m)$/;"	f	class:Throttle
get	Throttle.cc	/^std::chrono::duration<double> BackoffThrottle::get(uint64_t c)$/;"	f	class:BackoffThrottle
get	TrackedOp.h	/^  void get() {$/;"	f	class:TrackedOp
get	Tub.h	/^  ElementType* get() {$/;"	f	class:Tub
get	Tub.h	/^  const ElementType* get() const {$/;"	f	class:Tub
get	ceph_context.h	/^  CephContext *get() {$/;"	f	class:CephContext
get	cohort_lru.h	/^      Partition& get(uint8_t x) {$/;"	f	class:cohort::lru::TreeX
get	cohort_lru.h	/^      Partition*& get() {$/;"	f	class:cohort::lru::TreeX
get	perf_counters.cc	/^uint64_t PerfCounters::get(int idx) const$/;"	f	class:PerfCounters
get	tracked_int_ptr.hpp	/^  T *get() const { return ptr; }$/;"	f	class:TrackedIntPtr
get_adjusted_priority	perf_counters.h	/^  int get_adjusted_priority(int p) const {$/;"	f	class:PerfCounters
get_admin_socket	ceph_context.cc	/^AdminSocket *CephContext::get_admin_socket()$/;"	f	class:CephContext
get_age_ms_histogram	TrackedOp.cc	/^void OpTracker::get_age_ms_histogram(pow2_hist_t *h)$/;"	f	class:OpTracker
get_all_keys	config.cc	/^void md_config_t::get_all_keys(std::vector<std::string> *keys) const {$/;"	f	class:md_config_t
get_all_sections	config.cc	/^int md_config_t::get_all_sections(std::vector <std::string> &sections) const$/;"	f	class:md_config_t
get_arch	arch.h	/^static const char *get_arch()$/;"	f
get_array_elements	ceph_json.cc	/^vector<string> JSONObj::get_array_elements()$/;"	f	class:JSONObj
get_attr	ceph_json.cc	/^bool JSONObj::get_attr(string name, string& attr)$/;"	f	class:JSONObj
get_attrs_str	Formatter.cc	/^void TableFormatter::get_attrs_str(const FormatterAttrs *attrs, std::string& attrs_str)$/;"	f	class:ceph::TableFormatter
get_attrs_str	Formatter.cc	/^void XMLFormatter::get_attrs_str(const FormatterAttrs *attrs, std::string& attrs_str)$/;"	f	class:ceph::XMLFormatter
get_axis_bucket_ranges	perf_histogram.cc	/^PerfHistogramCommon::get_axis_bucket_ranges($/;"	f	class:PerfHistogramCommon
get_bitwise_key	hobject.h	/^  uint64_t get_bitwise_key() const {$/;"	f	struct:hobject_t
get_bitwise_key_u32	hobject.h	/^  uint32_t get_bitwise_key_u32() const {$/;"	f	struct:hobject_t
get_block_device_base	blkdev.cc	/^int get_block_device_base(const char *dev, char *out, size_t out_len)$/;"	f
get_block_device_int_property	blkdev.cc	/^int64_t get_block_device_int_property(const char *devname, const char *property)$/;"	f
get_block_device_size	blkdev.cc	/^int get_block_device_size(int fd, int64_t *psize)$/;"	f
get_block_device_string_property	blkdev.cc	/^int64_t get_block_device_string_property(const char *devname,$/;"	f
get_boundary	hobject.h	/^  ghobject_t get_boundary() const {$/;"	f	struct:ghobject_t
get_boundary	hobject.h	/^  hobject_t get_boundary() const {$/;"	f	struct:hobject_t
get_bucket_for_axis	perf_histogram.cc	/^int64_t PerfHistogramCommon::get_bucket_for_axis($/;"	f	class:PerfHistogramCommon
get_c_str_accesses	buffer.cc	/^  int buffer::get_c_str_accesses() {$/;"	f	class:buffer
get_cached_crc	buffer.cc	/^  int buffer::get_cached_crc() {$/;"	f	class:buffer
get_cached_crc_adjusted	buffer.cc	/^  int buffer::get_cached_crc_adjusted() {$/;"	f	class:buffer
get_callback	Continuation.h	/^  Context *get_callback(int stage) {$/;"	f	class:Continuation
get_chunk	PriorityCache.cc	/^  int64_t get_chunk(uint64_t usage, uint64_t chunk_bytes) {$/;"	f	namespace:PriorityCache
get_command	CommandTable.h	/^  T& get_command(ceph_tid_t tid)$/;"	f	class:CommandTable
get_commands	CommandTable.h	/^  const std::map<ceph_tid_t, T> &get_commands() const$/;"	f	class:CommandTable
get_comparator	shared_cache.hpp	/^  C get_comparator() {$/;"	f	class:SharedLRU
get_conf_str_map_helper	str_map.cc	/^int get_conf_str_map_helper($/;"	f
get_containing_range	interval_map.h	/^  std::pair<const_iterator, const_iterator> get_containing_range($/;"	f	class:interval_map
get_contiguous	buffer.cc	/^  char *buffer::list::get_contiguous(unsigned orig_off, unsigned len)$/;"	f	class:buffer::list
get_cost	WeightedPriorityQueue.h	/^      unsigned get_cost() const {$/;"	f	class:WeightedPriorityQueue::Klass
get_cost	WeightedPriorityQueue.h	/^      unsigned get_cost() const {$/;"	f	class:WeightedPriorityQueue::SubQueue
get_crc	buffer.cc	/^    bool get_crc(const pair<size_t, size_t> &fromto,$/;"	f	class:buffer::raw
get_crypto_handler	ceph_context.cc	/^CryptoHandler *CephContext::get_crypto_handler(int type)$/;"	f	class:CephContext
get_csum_init_value_size	Checksummer.h	/^  static size_t get_csum_init_value_size(int csum_type) {$/;"	f	class:Checksummer
get_csum_string_type	Checksummer.h	/^  static int get_csum_string_type(const std::string &s) {$/;"	f	class:Checksummer
get_csum_type_string	Checksummer.h	/^  static const char *get_csum_type_string(unsigned t) {$/;"	f	class:Checksummer
get_csum_value_size	Checksummer.h	/^  static size_t get_csum_value_size(int csum_type) {$/;"	f	class:Checksummer
get_current	Throttle.cc	/^uint64_t BackoffThrottle::get_current()$/;"	f	class:BackoffThrottle
get_current	Throttle.h	/^  int64_t get_current() const {$/;"	f	class:Throttle
get_current_ptr	buffer.cc	/^  buffer::ptr buffer::list::iterator::get_current_ptr()$/;"	f	class:buffer::list::iterator
get_current_ptr	buffer.cc	/^  buffer::ptr buffer::list::iterator_impl<is_const>::get_current_ptr() const$/;"	f	class:buffer::list::iterator_impl
get_cycles_per_sec	Cycles.h	/^  static __inline __attribute__((always_inline)) double get_cycles_per_sec() {$/;"	f	class:Cycles
get_data	bit_vector.hpp	/^const bufferlist& BitVector<_b>::get_data() const {$/;"	f	class:ceph::BitVector
get_data	buffer.cc	/^    virtual char *get_data() {$/;"	f	class:buffer::raw
get_data	ceph_json.cc	/^bool JSONObj::get_data(const string& key, string *dest)$/;"	f	class:JSONObj
get_data	ceph_json.h	/^  string& get_data() { return data_string; }$/;"	f	class:JSONObj
get_data_extents	bit_vector.hpp	/^void BitVector<_b>::get_data_extents(uint64_t offset, uint64_t length,$/;"	f	class:ceph::BitVector
get_desc	TrackedOp.h	/^  const char *get_desc() const {$/;"	f	class:TrackedOp
get_device_by_fd	blkdev.cc	/^int get_device_by_fd(int fd, char *partition, char *device, size_t max)$/;"	f
get_device_by_uuid	blkdev.cc	/^int get_device_by_uuid(uuid_d dev_uuid, const char* label, char* partition,$/;"	f
get_duration	TrackedOp.h	/^  double get_duration() const {$/;"	f	class:TrackedOp
get_effective_key	hobject.h	/^  const string& get_effective_key() const {$/;"	f	struct:hobject_t
get_env_bool	environment.cc	/^bool get_env_bool(const char *key)$/;"	f
get_env_int	environment.cc	/^int get_env_int(const char *key)$/;"	f
get_footer_offset	bit_vector.hpp	/^uint64_t BitVector<_b>::get_footer_offset() const {$/;"	f	class:ceph::BitVector
get_fs_stats	util.cc	/^int get_fs_stats(ceph_data_stats_t &stats, const char *path)$/;"	f
get_generic_visitor	inline_variant.h	/^struct get_generic_visitor$/;"	s
get_global_options	options.cc	/^std::vector<Option> get_global_options() {$/;"	f
get_hash	LogEntry.h	/^  uint64_t get_hash() const {$/;"	f	struct:LogEntryKey
get_hash	hobject.h	/^  uint32_t get_hash() const { $/;"	f	struct:hobject_t
get_head	hobject.h	/^  hobject_t get_head() const {$/;"	f	struct:hobject_t
get_header_length	bit_vector.hpp	/^uint64_t BitVector<_b>::get_header_length() const {$/;"	f	class:ceph::BitVector
get_heap	MemoryModel.h	/^    long get_heap() { return heap; }$/;"	f	struct:MemoryModel::snap
get_heartbeat_map	ceph_context.h	/^  ceph::HeartbeatMap *get_heartbeat_map() {$/;"	f	class:CephContext
get_highest	bounded_key_counter.h	/^  void get_highest(size_t count, Callback&& cb)$/;"	f	class:BoundedKeyCounter
get_history_alloc_bytes	buffer.cc	/^  uint64_t buffer::get_history_alloc_bytes() {$/;"	f	class:buffer
get_history_alloc_num	buffer.cc	/^  uint64_t buffer::get_history_alloc_num() {$/;"	f	class:buffer
get_id	entity_name.cc	/^get_id() const$/;"	f	class:EntityName
get_info	zipkin_trace.h	/^  const blkin_trace_info* get_info() const { return NULL; }$/;"	f	class:ZTracer::Trace
get_init_flags	ceph_context.cc	/^int CephContext::get_init_flags() const$/;"	f	class:CephContext
get_initiated	TrackedOp.h	/^  const utime_t& get_initiated() const {$/;"	f	class:TrackedOp
get_instance	dns_resolve.h	/^    static DNSResolver *get_instance()$/;"	f	class:ceph::DNSResolver
get_instance	dns_resolve.h	/^    static DNSResolver *get_instance(ResolvHWrapper *resolv_wrapper) {$/;"	f	class:ceph::DNSResolver
get_interval_set	interval_map.h	/^  interval_set<K> get_interval_set() const {$/;"	f	class:interval_map
get_json	ceph_json.h	/^  const char *get_json() { return json_buffer.c_str(); }$/;"	f	class:JSONParser
get_json_str_map	str_map.cc	/^int get_json_str_map($/;"	f
get_key	hobject.h	/^  const string &get_key() const {$/;"	f	struct:hobject_t
get_keys	map_cacher.hpp	/^  int get_keys($/;"	f	class:MapCacher::MapCacher
get_last	DecayCounter.h	/^  double get_last() const {$/;"	f	class:DecayCounter
get_last_decay	DecayCounter.h	/^  utime_t get_last_decay() const {$/;"	f	class:DecayCounter
get_last_vel	DecayCounter.h	/^  double get_last_vel() const {$/;"	f	class:DecayCounter
get_len	Formatter.cc	/^int JSONFormatter::get_len() const$/;"	f	class:ceph::JSONFormatter
get_len	Formatter.cc	/^int TableFormatter::get_len() const$/;"	f	class:ceph::TableFormatter
get_len	Formatter.cc	/^int XMLFormatter::get_len() const$/;"	f	class:ceph::XMLFormatter
get_len	interval_map.h	/^    K get_len() const {$/;"	f	class:interval_map::const_iterator
get_linux_version	linux_version.c	/^int get_linux_version(void)$/;"	f
get_lock	WorkQueue.h	/^    Mutex &get_lock() {$/;"	f	class:ThreadPool::WorkQueue
get_log_channel	LogClient.h	/^  std::string get_log_channel() { return log_channel; }$/;"	f	class:LogChannel
get_log_prio	LogClient.h	/^  std::string get_log_prio() { return log_prio; }$/;"	f	class:LogChannel
get_max	Throttle.cc	/^uint64_t BackoffThrottle::get_max()$/;"	f	class:BackoffThrottle
get_max	Throttle.h	/^  int64_t get_max() const { return max; }$/;"	f	class:Throttle
get_max	hobject.h	/^  static ghobject_t get_max() {$/;"	f	struct:ghobject_t
get_max	hobject.h	/^  static hobject_t_max get_max() {$/;"	f	struct:hobject_t
get_max_pipe_size	buffer.cc	/^  size_t get_max_pipe_size() { return 65536; }$/;"	f
get_max_pipe_size	buffer.cc	/^  size_t get_max_pipe_size() {$/;"	f
get_max_readahead_size	Readahead.cc	/^uint64_t Readahead::get_max_readahead_size(void) {$/;"	f	class:Readahead
get_max_tokens	PrioritizedQueue.h	/^    unsigned get_max_tokens() const {$/;"	f	struct:PrioritizedQueue::SubQueue
get_max_tokens	mClockPriorityQueue.h	/^      unsigned get_max_tokens() const {$/;"	f	struct:ceph::mClockQueue::SubQueue
get_mds_client_options	options.cc	/^std::vector<Option> get_mds_client_options() {$/;"	f
get_mds_options	options.cc	/^std::vector<Option> get_mds_options() {$/;"	f
get_mempool	buffer.cc	/^  int buffer::list::get_mempool() const$/;"	f	class:buffer::list
get_mempool	buffer.cc	/^  int buffer::ptr::get_mempool() const {$/;"	f	class:buffer::ptr
get_message	CommandTable.h	/^  MCommand *get_message(const uuid_d &fsid) const$/;"	f	class:CommandOp
get_min_readahead_size	Readahead.cc	/^uint64_t Readahead::get_min_readahead_size(void) {$/;"	f	class:Readahead
get_missed_crc	buffer.cc	/^  int buffer::get_missed_crc() {$/;"	f	class:buffer
get_module_type	ceph_context.cc	/^uint32_t CephContext::get_module_type() const$/;"	f	class:CephContext
get_mon_log_message	LogClient.cc	/^Message *LogClient::get_mon_log_message(bool flush)$/;"	f	class:LogClient
get_my_sections	config.cc	/^void md_config_t::get_my_sections(std::vector <std::string> &sections) const$/;"	f	class:md_config_t
get_myinst	LogClient.cc	/^const entity_inst_t& LogClient::get_myinst()$/;"	f	class:LogClient
get_myname	LogClient.cc	/^const EntityName& LogClient::get_myname()$/;"	f	class:LogClient
get_name	ceph_json.h	/^  string& get_name() { return name; }$/;"	f	class:JSONObj
get_name	perf_counters.cc	/^const std::string &PerfCounters::get_name() const$/;"	f	class:PerfCounters
get_namespace	hobject.h	/^  const string &get_namespace() const {$/;"	f	struct:hobject_t
get_next	map_cacher.hpp	/^  int get_next($/;"	f	class:MapCacher::MapCacher
get_next	shared_cache.hpp	/^  bool get_next(const K &key, pair<K, V> *next) {$/;"	f	class:SharedLRU
get_next	shared_cache.hpp	/^  bool get_next(const K &key, pair<K, VPtr> *next) {$/;"	f	class:SharedLRU
get_next	sharedptr_registry.hpp	/^  bool get_next(const K &key, pair<K, V> *next) {$/;"	f	class:SharedPtrRegistry
get_next	sharedptr_registry.hpp	/^  bool get_next(const K &key, pair<K, VPtr> *next) {$/;"	f	class:SharedPtrRegistry
get_next_seq	LogClient.cc	/^uint64_t LogClient::get_next_seq()$/;"	f	class:LogClient
get_next_token	str_list.cc	/^static bool get_next_token(const string &s, size_t& pos, const char *delims, string& token)$/;"	f	file:
get_nibblewise_key	hobject.h	/^  uint32_t get_nibblewise_key() const {$/;"	f	struct:ghobject_t
get_nibblewise_key	hobject.h	/^  uint64_t get_nibblewise_key() const {$/;"	f	struct:hobject_t
get_nibblewise_key_u32	hobject.h	/^  uint32_t get_nibblewise_key_u32() const {$/;"	f	struct:ghobject_t
get_nibblewise_key_u32	hobject.h	/^  uint32_t get_nibblewise_key_u32() const {$/;"	f	struct:hobject_t
get_nref	RefCountedObj.h	/^  uint64_t get_nref() const {$/;"	f	struct:RefCountedObject
get_num_sorted	bounded_key_counter.h	/^  size_t get_num_sorted() const$/;"	f	class:BoundedKeyCounter
get_num_threads	WorkQueue.h	/^  int get_num_threads() {$/;"	f	class:ThreadPool
get_object_boundary	hobject.h	/^  hobject_t get_object_boundary() const {$/;"	f	struct:hobject_t
get_off	interval_map.h	/^    K get_off() const {$/;"	f	class:interval_map::const_iterator
get_or_fail	Throttle.cc	/^bool Throttle::get_or_fail(int64_t c)$/;"	f	class:Throttle
get_osd_pool_default_min_size	config.h	/^  unsigned get_osd_pool_default_min_size() const {$/;"	f	struct:md_config_t
get_parent	ceph_json.cc	/^JSONObj *JSONObj::get_parent()$/;"	f	class:JSONObj
get_perfcounters_collection	ceph_context.cc	/^PerfCountersCollection *CephContext::get_perfcounters_collection()$/;"	f	class:CephContext
get_pid	Thread.h	/^  pid_t get_pid() const { return pid; }$/;"	f	class:Thread
get_plugin_registry	ceph_context.h	/^  PluginRegistry *get_plugin_registry() {$/;"	f	class:CephContext
get_pool	mempool.cc	/^mempool::pool_t& mempool::get_pool(mempool::pool_index_t ix)$/;"	f	class:mempool
get_pool_lock	WorkQueue.h	/^    Mutex &get_pool_lock() {$/;"	f	class:ThreadPool::PointerWQ
get_pool_name	mempool.cc	/^const char *mempool::get_pool_name(mempool::pool_index_t ix) {$/;"	f	class:mempool
get_position_micro	histogram.h	/^  int get_position_micro(int32_t v, uint64_t *lower, uint64_t *upper) {$/;"	f	struct:pow2_hist_t
get_prefixes	hobject.cc	/^set<string> hobject_t::get_prefixes($/;"	f	class:hobject_t
get_process_name	code_environment.cc	/^int get_process_name(char *buf, int len)$/;"	f
get_process_name_cpp	code_environment.cc	/^std::string get_process_name_cpp()$/;"	f
get_ptr_and_advance	buffer.cc	/^  size_t buffer::list::iterator_impl<is_const>::get_ptr_and_advance($/;"	f	class:buffer::list::iterator_impl
get_quants	perf_histogram.cc	/^int64_t get_quants(int64_t i, PerfHistogramCommon::scale_type_d st) {$/;"	f
get_rand_socket_path	admin_socket_client.cc	/^const char* get_rand_socket_path()$/;"	f
get_range	interval_map.h	/^  std::pair<cmapiter, cmapiter> get_range(K off, K len) const {$/;"	f	class:interval_map
get_range	interval_map.h	/^  std::pair<mapiter, mapiter> get_range(K off, K len) {$/;"	f	class:interval_map
get_raw_index_for_bucket	perf_histogram.h	/^  int64_t get_raw_index_for_bucket(T... buckets) const {$/;"	f	class:PerfHistogram
get_raw_index_for_value	perf_histogram.h	/^  int64_t get_raw_index_for_value(T... axes) const {$/;"	f	class:PerfHistogram
get_raw_index_internal	perf_histogram.h	/^  int64_t get_raw_index_internal(F bucket_evaluator, int64_t startIndex,$/;"	f	class:PerfHistogram
get_raw_index_internal	perf_histogram.h	/^  int64_t get_raw_index_internal(F, int64_t startIndex) const {$/;"	f	class:PerfHistogram
get_raw_size	perf_histogram.h	/^  int64_t get_raw_size() {$/;"	f	class:PerfHistogram
get_rbd_mirror_options	options.cc	/^static std::vector<Option> get_rbd_mirror_options() {$/;"	f	file:
get_rbd_options	options.cc	/^static std::vector<Option> get_rbd_options() {$/;"	f	file:
get_read	RWLock.h	/^    void get_read() {$/;"	f	class:final::Context
get_read	RWLock.h	/^  void get_read() const {$/;"	f	class:final
get_refcnt	cohort_lru.h	/^      uint32_t get_refcnt() const { return lru_refcnt; }$/;"	f	class:cohort::lru::Object
get_rgw_options	options.cc	/^std::vector<Option> get_rgw_options() {$/;"	f
get_rss	MemoryModel.h	/^    long get_rss() { return rss; }$/;"	f	struct:MemoryModel::snap
get_rval	Continuation.h	/^  int get_rval() { return rval; }$/;"	f	class:Continuation
get_secret_option	secret.c	/^int get_secret_option(const char *secret, const char *key_name,$/;"	f
get_section_name	Formatter.cc	/^std::string TableFormatter::get_section_name(const char* name)$/;"	f	class:ceph::TableFormatter
get_set_gid	ceph_context.h	/^  gid_t get_set_gid() const {$/;"	f	class:CephContext
get_set_gid_string	ceph_context.h	/^  std::string get_set_gid_string() const {$/;"	f	class:CephContext
get_set_uid	ceph_context.h	/^  uid_t get_set_uid() const {$/;"	f	class:CephContext
get_set_uid_string	ceph_context.h	/^  std::string get_set_uid_string() const {$/;"	f	class:CephContext
get_signal_fd	Preforker.h	/^  int get_signal_fd() const {$/;"	f	class:Preforker
get_size	WeightedPriorityQueue.h	/^      unsigned get_size() const {$/;"	f	class:WeightedPriorityQueue::Klass
get_snapdir	hobject.h	/^  hobject_t get_snapdir() const {$/;"	f	struct:hobject_t
get_snapsets	scrub_types.h	/^  uint32_t get_snapsets;$/;"	m	struct:scrub_ls_arg_t
get_state	RWLock.h	/^    LockState get_state() { return state; }$/;"	f	class:final::Context
get_state	dns_resolve.cc	/^int DNSResolver::get_state(CephContext *cct, res_state *ps)$/;"	f	class:ceph::DNSResolver
get_stats	mempool.cc	/^void mempool::pool_t::get_stats($/;"	f	class:mempool::pool_t
get_stderr	SubProcess.h	/^inline int SubProcess::get_stderr() const {$/;"	f	class:SubProcess
get_stdin	SubProcess.h	/^inline int SubProcess::get_stdin() const {$/;"	f	class:SubProcess
get_stdout	SubProcess.h	/^inline int SubProcess::get_stdout() const {$/;"	f	class:SubProcess
get_str	PrebufferedStreambuf.cc	/^std::string PrebufferedStreambuf::get_str() const$/;"	f	class:PrebufferedStreambuf
get_str_list	str_list.cc	/^void get_str_list(const string& str, const char *delims, list<string>& str_list)$/;"	f
get_str_list	str_list.cc	/^void get_str_list(const string& str, list<string>& str_list)$/;"	f
get_str_map	str_map.cc	/^int get_str_map($/;"	f
get_str_map_key	str_map.cc	/^string get_str_map_key($/;"	f
get_str_map_value	str_map.cc	/^string get_str_map_value($/;"	f
get_str_set	str_list.cc	/^void get_str_set(const string& str, const char *delims, set<string>& str_set)$/;"	f
get_str_set	str_list.cc	/^void get_str_set(const string& str, set<string>& str_set)$/;"	f
get_str_vec	str_list.cc	/^void get_str_vec(const string& str, const char *delims, vector<string>& str_vec)$/;"	f
get_str_vec	str_list.cc	/^void get_str_vec(const string& str, vector<string>& str_vec)$/;"	f
get_syslog_facility	LogClient.h	/^  std::string get_syslog_facility() { return syslog_facility; }$/;"	f	class:LogChannel
get_tavg_ms	perf_counters.cc	/^pair<uint64_t, uint64_t> PerfCounters::get_tavg_ms(int idx) const$/;"	f	class:PerfCounters
get_thread_id	Thread.cc	/^const pthread_t &Thread::get_thread_id() const$/;"	f	class:Thread
get_total	MemoryModel.h	/^    long get_total() { return size; }$/;"	f	struct:MemoryModel::snap
get_total_alloc	buffer.cc	/^  int buffer::get_total_alloc() {$/;"	f	class:buffer
get_total_workers	HeartbeatMap.cc	/^int HeartbeatMap::get_total_workers() const$/;"	f	class:ceph::HeartbeatMap
get_type	entity_name.h	/^  uint32_t get_type() const { return type; }$/;"	f	struct:EntityName
get_type_name	entity_name.cc	/^get_type_name() const$/;"	f	class:EntityName
get_type_str	entity_name.cc	/^get_type_str() const$/;"	f	class:EntityName
get_typed_value_visitor	config.h	/^struct get_typed_value_visitor : public boost::static_visitor<T> {$/;"	s
get_unhealthy_workers	HeartbeatMap.cc	/^int HeartbeatMap::get_unhealthy_workers() const$/;"	f	class:ceph::HeartbeatMap
get_val	config.cc	/^int md_config_t::get_val(const std::string &key, char **buf, int len) const$/;"	f	class:md_config_t
get_val	config.h	/^template<typename T> T md_config_t::get_val(const std::string &key) const {$/;"	f	class:md_config_t
get_val	interval_map.h	/^    const V &get_val() const {$/;"	f	class:interval_map::const_iterator
get_val_from_conf_file	config.cc	/^int md_config_t::get_val_from_conf_file(const std::vector <std::string> &sections,$/;"	f	class:md_config_t
get_val_generic	config.cc	/^Option::value_t md_config_t::get_val_generic(const std::string &key) const$/;"	f	class:md_config_t
get_valid_types_as_str	entity_name.cc	/^get_valid_types_as_str()$/;"	f	class:EntityName
get_with_load	PluginRegistry.cc	/^Plugin *PluginRegistry::get_with_load(const std::string& type,$/;"	f	class:PluginRegistry
get_write	RWLock.h	/^    void get_write() {$/;"	f	class:final::Context
get_write	RWLock.h	/^  void get_write(bool lockdep=true) {$/;"	f	class:final
get_xio_mp	buffer.cc	/^  struct xio_reg_mem* get_xio_mp(const buffer::ptr& bp)$/;"	f
gf_multiply	crc32c_ppc.c	/^static inline unsigned int gf_multiply(unsigned int a, unsigned int b) {$/;"	f	file:
ghobject_t	hobject.h	/^  explicit ghobject_t(const hobject_t &obj)$/;"	f	struct:ghobject_t
ghobject_t	hobject.h	/^  ghobject_t()$/;"	f	struct:ghobject_t
ghobject_t	hobject.h	/^  ghobject_t(const hobject_t &obj, gen_t gen, shard_id_t shard)$/;"	f	struct:ghobject_t
ghobject_t	hobject.h	/^struct ghobject_t {$/;"	s
git_version_to_str	version.cc	/^const char *git_version_to_str(void)$/;"	f
global	crc32c_intel_fast_asm.s	/^global  crc32_iscsi_00:function$/;"	l
global	crc32c_intel_fast_asm.s	/^global %1_slver$/;"	l
global	crc32c_intel_fast_asm.s	/^global %1_slver_%2%3%4$/;"	l
global	crc32c_intel_fast_zero_asm.s	/^global  crc32_iscsi_zero_00:function$/;"	l
global	crc32c_intel_fast_zero_asm.s	/^global %1_slver$/;"	l
global	crc32c_intel_fast_zero_asm.s	/^global %1_slver_%2%3%4$/;"	l
going_down	OutputDataSocket.h	/^  bool going_down;$/;"	m	class:OutputDataSocket
grace	HeartbeatMap.h	/^  time_t grace, suicide_grace;$/;"	m	struct:ceph::heartbeat_handle_d
grace	WorkQueue.h	/^    time_t grace;$/;"	m	class:ThreadPool::TPHandle
grant	AsyncReserver.h	/^    Context *grant = 0;$/;"	m	struct:AsyncReserver::Reservation
graylog	LogClient.h	/^  shared_ptr<ceph::logging::Graylog> graylog;$/;"	m	class:LogChannel
h	histogram.h	/^  std::vector<int32_t> h;$/;"	m	struct:pow2_hist_t
h	snap_types.h	/^  mutable ceph_mds_snap_realm h;$/;"	m	struct:SnapRealmInfo
handle_bad_get	cmdparse.cc	/^handle_bad_get(CephContext *cct, const string& k, const char *tname)$/;"	f
handle_conf_change	TracepointProvider.cc	/^void TracepointProvider::handle_conf_change($/;"	f	class:TracepointProvider
handle_conf_change	WorkQueue.cc	/^void ThreadPool::handle_conf_change(const struct md_config_t *conf,$/;"	f	class:ThreadPool
handle_connection	OutputDataSocket.cc	/^void OutputDataSocket::handle_connection(int fd)$/;"	f	class:OutputDataSocket
handle_data	ceph_json.cc	/^void JSONParser::handle_data(const char *s, int len)$/;"	f	class:JSONParser
handle_log_ack	LogClient.cc	/^bool LogClient::handle_log_ack(MLogAck *m)$/;"	f	class:LogClient
handle_subsys_change	config_obs.h	/^  virtual void handle_subsys_change(const struct md_config_t *conf,$/;"	f	class:md_config_obs_t
handle_value	ceph_json.cc	/^void JSONObj::handle_value(Value v)$/;"	f	class:JSONObj
has_default_id	entity_name.cc	/^has_default_id() const$/;"	f	class:EntityName
has_reservation	AsyncReserver.h	/^  bool has_reservation() {$/;"	f	class:AsyncReserver
has_snapset	hobject.h	/^  bool has_snapset() const {$/;"	f	struct:hobject_t
hash	LogEntry.h	/^  template<> struct hash<LogEntryKey> {$/;"	s	namespace:std
hash	hobject.h	/^  template<> struct hash<ghobject_t> {$/;"	s	namespace:std
hash	hobject.h	/^  template<> struct hash<hobject_t> {$/;"	s	namespace:std
hash	hobject.h	/^  uint32_t hash;  \/\/ 一般为pg的id，不能和key同时设置$/;"	m	struct:hobject_t
hash	lockdep.cc	/^    struct hash<pthread_t>$/;"	s	namespace:std	file:
hash	sstring.hh	/^struct hash<basic_sstring<char_type, size_type, max_size>> {$/;"	s	namespace:std
hash_ap	bloom_filter.hpp	/^  inline bloom_type hash_ap(const unsigned char* begin, std::size_t remaining_length, bloom_type hash) const$/;"	f	class:bloom_filter
hash_ap	bloom_filter.hpp	/^  inline bloom_type hash_ap(uint32_t val, bloom_type hash) const$/;"	f	class:bloom_filter
hash_reverse_bits	hobject.h	/^  uint32_t hash_reverse_bits;$/;"	m	struct:hobject_t
have_local_addr	pick_address.cc	/^bool have_local_addr(CephContext *cct, const list<entity_addr_t>& ls, entity_addr_t *match)$/;"	f
hb	WorkQueue.h	/^    heartbeat_handle_d *hb;$/;"	m	class:ThreadPool::TPHandle
hd_align	TextTable.h	/^    Align hd_align;$/;"	m	struct:TextTable::TextTableColumn
headerLevel	ceph_crypto_cms.cc	/^    int headerLevel;$/;"	m	struct:decodeOptionsStr	file:
heading	TextTable.h	/^    std::string heading;$/;"	m	struct:TextTable::TextTableColumn
health	LogClient.h	/^  LogClientTemp health(health_status_t health) {$/;"	f	class:LogChannel
heap	MemoryModel.h	/^    long heap;$/;"	m	struct:MemoryModel::snap
heartbeat_handle_d	HeartbeatMap.h	/^  explicit heartbeat_handle_d(const std::string& n)$/;"	f	struct:ceph::heartbeat_handle_d
heartbeat_handle_d	HeartbeatMap.h	/^struct heartbeat_handle_d {$/;"	s	namespace:ceph
held	lockdep.cc	/^static ceph::unordered_map<pthread_t, map<int,BackTrace*> > held;$/;"	v	file:
hex2str	hex.cc	/^void hex2str(const char *s, int len, char *buf, int dest_len)$/;"	f
hexchar_to_int	mime.c	/^static inline signed int hexchar_to_int(unsigned int c)$/;"	f	file:
hexdump	buffer.cc	/^void buffer::list::hexdump(std::ostream &out, bool trailing_newline) const$/;"	f	class:buffer::list
hexdump	hex.cc	/^std::string hexdump(std::string msg, const char *s, int len)$/;"	f
high_bits_set	utf8.c	/^static int high_bits_set(int c)$/;"	f	file:
high_delay_per_count	Throttle.h	/^  double high_delay_per_count = 0;$/;"	m	class:BackoffThrottle
high_queue	PrioritizedQueue.h	/^  SubQueues high_queue;$/;"	m	class:PrioritizedQueue
high_threshhold	Throttle.h	/^  double high_threshhold = 1;$/;"	m	class:BackoffThrottle
hinc	perf_counters.cc	/^void PerfCounters::hinc(int idx, int64_t x, int64_t y)$/;"	f	class:PerfCounters
hints	obj_bencher.h	/^  bool hints;$/;"	m	struct:bench_data
histogram	perf_counters.h	/^    std::unique_ptr<PerfHistogram<>> histogram;$/;"	m	struct:PerfCounters::perf_counter_data_any_d
history	TrackedOp.h	/^  OpHistory history;$/;"	m	class:OpTracker
history	obj_bencher.h	/^  struct bench_history history; \/\/ data history, used to calculate stddev$/;"	m	struct:bench_data	typeref:struct:bench_data::bench_history
history_duration	TrackedOp.h	/^  uint32_t history_duration;$/;"	m	class:OpHistory
history_size	TrackedOp.h	/^  uint32_t history_size;$/;"	m	class:OpHistory
history_slow_op_size	TrackedOp.h	/^  uint32_t history_slow_op_size;$/;"	m	class:OpHistory
history_slow_op_threshold	TrackedOp.h	/^  uint32_t history_slow_op_threshold;$/;"	m	class:OpHistory
hit	DecayCounter.h	/^  double hit(utime_t now, const DecayRate& rate, double v = 1.0) {$/;"	f	class:DecayCounter
hit	DecayCounter.h	/^  double hit(utime_t now, double v = 1.0) {$/;"	f	class:DecayCounter
hobj	hobject.h	/^  hobject_t hobj;$/;"	m	struct:ghobject_t
hobject_t	hobject.h	/^  explicit hobject_t(const sobject_t &o) :$/;"	f	struct:hobject_t
hobject_t	hobject.h	/^  hobject_t() : snap(0), hash(0), max(false), pool(INT64_MIN) {$/;"	f	struct:hobject_t
hobject_t	hobject.h	/^  hobject_t(const sobject_t &soid, const string &key, uint32_t hash,$/;"	f	struct:hobject_t
hobject_t	hobject.h	/^  hobject_t(hobject_t_max &&singleton) : hobject_t() {$/;"	f	struct:hobject_t
hobject_t	hobject.h	/^  hobject_t(object_t oid, const string& key, snapid_t snap, uint32_t hash,$/;"	f	struct:hobject_t
hobject_t	hobject.h	/^struct hobject_t { \/\/ hash对象$/;"	s
hobject_t_max	hobject.h	/^  class hobject_t_max {};$/;"	c	struct:hobject_t
hostos_to_ceph_conv	freebsd_errno.cc	/^static const __s32 hostos_to_ceph_conv[256] = {$/;"	v	file:
hostos_to_ceph_errno	aix_errno.cc	/^__s32 hostos_to_ceph_errno(__s32 r)$/;"	f
hostos_to_ceph_errno	darwin_errno.cc	/^__s32 hostos_to_ceph_errno(__s32 r)$/;"	f
hostos_to_ceph_errno	freebsd_errno.cc	/^__s32 hostos_to_ceph_errno(__s32 r)$/;"	f
hostos_to_ceph_errno	solaris_errno.cc	/^__s32 hostos_to_ceph_errno(__s32 r)$/;"	f
hwm	MemoryModel.h	/^    long hwm;$/;"	m	struct:MemoryModel::snap
id	Mutex.h	/^  int id;$/;"	m	class:Mutex
id	RWLock.h	/^  mutable int id;$/;"	m	class:final
id	ceph_timer.h	/^	uint64_t id;$/;"	m	struct:ceph::timer_detail::timer::event
id	entity_name.h	/^  std::string id;$/;"	m	struct:EntityName
id	mutex_debug.h	/^  int id;$/;"	m	class:ceph::mutex_debug_detail::mutex_debugging_base
id	tracked_int_ptr.hpp	/^  uint64_t id;$/;"	m	class:TrackedIntPtr
idata	obj_bencher.h	/^  struct bench_interval_data idata; \/\/ data that is updated by time intervals and not by events$/;"	m	struct:bench_data	typeref:struct:bench_data::bench_interval_data
immediate	Continuation.h	/^  bool immediate(int stage, int r) {$/;"	f	class:Continuation
impl	deleter.h	/^  impl(deleter next) : refs(1), next(std::move(next)) {}$/;"	f	struct:deleter::impl
impl	deleter.h	/^struct deleter::impl {$/;"	s	class:deleter
impl	mutex_debug.h	/^  Mutex* impl;$/;"	m	class:ceph::mutex_debug_detail::mutex_debugging
in_flight	obj_bencher.h	/^  int in_flight; \/\/number of reads\/writes being waited on$/;"	m	struct:bench_data
in_hook	admin_socket.h	/^  bool in_hook;$/;"	m	class:AdminSocket
in_hook_cond	admin_socket.h	/^  Cond in_hook_cond;$/;"	m	class:AdminSocket
in_progress	AsyncReserver.h	/^  map<T,Reservation> in_progress;$/;"	m	class:AsyncReserver
in_progress	map_cacher.hpp	/^  SharedPtrRegistry<K, boost::optional<V> > in_progress;$/;"	m	class:MapCacher::MapCacher
inbl	CommandTable.h	/^  bufferlist    inbl;$/;"	m	class:CommandOp
inc	perf_counters.cc	/^void PerfCounters::inc(int idx, uint64_t amt)$/;"	f	class:PerfCounters
inc	perf_histogram.h	/^  void inc(T... axis) {$/;"	f	class:PerfHistogram
inc_bucket	perf_histogram.h	/^  void inc_bucket(T... bucket) {$/;"	f	class:PerfHistogram
inc_history_alloc	buffer.cc	/^  void inc_history_alloc(uint64_t len) {$/;"	f	namespace:__anon5
inc_pending	Readahead.cc	/^void Readahead::inc_pending(int count) {$/;"	f	class:Readahead
inc_total_alloc	buffer.cc	/^  void inc_total_alloc(unsigned len) {$/;"	f	namespace:__anon5
inconsistent_obj_wrapper	scrub_types.cc	/^inconsistent_obj_wrapper::inconsistent_obj_wrapper(const hobject_t& hoid)$/;"	f	class:inconsistent_obj_wrapper
inconsistent_obj_wrapper	scrub_types.h	/^struct inconsistent_obj_wrapper : librados::inconsistent_obj_t {$/;"	s
inconsistent_snapset_wrapper	scrub_types.cc	/^inconsistent_snapset_wrapper::inconsistent_snapset_wrapper(const hobject_t& hoid)$/;"	f	class:inconsistent_snapset_wrapper
inconsistent_snapset_wrapper	scrub_types.h	/^struct inconsistent_snapset_wrapper : public librados::inconsistent_snapset_t {$/;"	s
indent	TextTable.h	/^  unsigned int indent;			\/\/ indent width when rendering$/;"	m	class:TextTable
index_	autovector.h	/^    size_t index_ = 0;$/;"	m	class:ceph::autovector::iterator_impl
info	LogClient.h	/^  LogClientTemp info() {$/;"	f	class:LogChannel
info	LogClient.h	/^  void info(std::stringstream &s) {$/;"	f	class:LogChannel
init	Checksummer.h	/^    static void init(state_t *s) {$/;"	f	struct:Checksummer::xxhash32
init	Checksummer.h	/^    static void init(state_t *s) {$/;"	f	struct:Checksummer::xxhash64
init	Checksummer.h	/^    static void init(state_t *state) {$/;"	f	struct:Checksummer::crc32c
init	Checksummer.h	/^    static void init(state_t *state) {$/;"	f	struct:Checksummer::crc32c_16
init	Checksummer.h	/^    static void init(state_t *state) {$/;"	f	struct:Checksummer::crc32c_8
init	Cycles.cc	/^void Cycles::init()$/;"	f	class:Cycles
init	OutputDataSocket.cc	/^bool OutputDataSocket::init(const std::string &path)$/;"	f	class:OutputDataSocket
init	Timer.cc	/^void SafeTimer::init()$/;"	f	class:SafeTimer
init	admin_socket.cc	/^bool AdminSocket::init(const std::string &path)$/;"	f	class:AdminSocket
init	bloom_filter.hpp	/^  void init() {$/;"	f	class:bloom_filter
init	ceph_crypto.cc	/^void ceph::crypto::init(CephContext *cct)$/;"	f	class:ceph::crypto
init	ceph_json.cc	/^void JSONObj::init(JSONObj *p, Value v, string n)$/;"	f	class:JSONObj
init	event_socket.h	/^  int init(int fd, int t) {$/;"	f	class:EventSocket
init	zipkin_trace.h	/^  int init(const char *name, const Endpoint *ep, const Trace *parent = NULL) {$/;"	f	class:ZTracer::Trace
init	zipkin_trace.h	/^  int init(const char *name, const Endpoint *ep,$/;"	f	class:ZTracer::Trace
init_connection	OutputDataSocket.h	/^  virtual void init_connection(bufferlist& bl) {}$/;"	f	class:OutputDataSocket
init_crypto	ceph_context.cc	/^void CephContext::init_crypto()$/;"	f	class:CephContext
init_subsys	config.cc	/^void md_config_t::init_subsys()$/;"	f	class:md_config_t
init_tp	EventTrace.cc	/^void EventTrace::init_tp(CephContext *_ctx)$/;"	f	class:EventTrace
init_value_t	Checksummer.h	/^    typedef uint32_t init_value_t;$/;"	t	struct:Checksummer::crc32c
init_value_t	Checksummer.h	/^    typedef uint32_t init_value_t;$/;"	t	struct:Checksummer::crc32c_16
init_value_t	Checksummer.h	/^    typedef uint32_t init_value_t;$/;"	t	struct:Checksummer::crc32c_8
init_value_t	Checksummer.h	/^    typedef uint32_t init_value_t;$/;"	t	struct:Checksummer::xxhash32
init_value_t	Checksummer.h	/^    typedef uint64_t init_value_t;$/;"	t	struct:Checksummer::xxhash64
initialize	TracepointProvider.h	/^  static void initialize(CephContext *cct) {$/;"	f	class:TracepointProvider
initialized_later	sstring.hh	/^    struct initialized_later {};$/;"	s	class:basic_sstring
initiated_at	TrackedOp.h	/^  utime_t initiated_at;$/;"	m	class:TrackedOp
injectargs	config.cc	/^int md_config_t::injectargs(const std::string& s, std::ostream *oss)$/;"	f	class:md_config_t
ino	snap_types.h	/^  inodeno_t ino() const { return inodeno_t(h.ino); }$/;"	f	struct:SnapRealmInfo
insert	TrackedOp.cc	/^void OpHistory::insert(utime_t now, TrackedOpRef op)$/;"	f	class:OpHistory
insert	WeightedPriorityQueue.h	/^	void insert(unsigned p, K cl, unsigned cost, T& item, bool front = false) {$/;"	f	class:WeightedPriorityQueue::Queue
insert	WeightedPriorityQueue.h	/^      void insert(K cl, unsigned cost, T& item, bool front = false) {$/;"	f	class:WeightedPriorityQueue::SubQueue
insert	WeightedPriorityQueue.h	/^      void insert(unsigned cost, T& item, bool front) {$/;"	f	class:WeightedPriorityQueue::Klass
insert	bloom_filter.hpp	/^  inline void insert(const InputIterator begin, const InputIterator end)$/;"	f	class:bloom_filter
insert	bloom_filter.hpp	/^  inline void insert(const T& t)$/;"	f	class:bloom_filter
insert	bloom_filter.hpp	/^  inline void insert(const char* data, const std::size_t& length)$/;"	f	class:bloom_filter
insert	bloom_filter.hpp	/^  inline void insert(const std::string& key)$/;"	f	class:bloom_filter
insert	bloom_filter.hpp	/^  inline void insert(const unsigned char* key_begin, const std::size_t& length)$/;"	f	class:bloom_filter
insert	bloom_filter.hpp	/^  inline void insert(uint32_t val) {$/;"	f	class:bloom_filter
insert	bounded_key_counter.h	/^  Count insert(const Key& key, Count n = 1)$/;"	f	class:BoundedKeyCounter
insert	cohort_lru.h	/^      Object* insert(ObjectFactory* fac, Edge edge, uint32_t& flags) {$/;"	f	class:cohort::lru::LRU
insert	cohort_lru.h	/^      void insert(uint64_t hk, T* v, uint32_t flags) {$/;"	f	class:cohort::lru::TreeX
insert	interval_map.h	/^  void insert(K off, K len, V &&v) {$/;"	f	class:interval_map
insert	interval_map.h	/^  void insert(K off, K len, const V &v) {$/;"	f	class:interval_map
insert	interval_map.h	/^  void insert(const interval_map &other) {$/;"	f	class:interval_map
insert	interval_map.h	/^  void insert(interval_map &&other) {$/;"	f	class:interval_map
insert	sstring.hh	/^    void insert(const_iterator p, InputIterator beg, InputIterator end) {$/;"	f	class:basic_sstring
insert_commit_data	cohort_lru.h	/^      typedef typename TTree::insert_commit_data insert_commit_data;$/;"	t	class:cohort::lru::TreeX
insert_count_	bloom_filter.hpp	/^  std::size_t         insert_count_;  \/\/\/< insertion count$/;"	m	class:bloom_filter
insert_helper	inline_variant.h	/^    struct insert_helper {$/;"	s	struct:detail::as_map
insert_latched	cohort_lru.h	/^      void insert_latched(T* v, Latch& lat, uint32_t flags) {$/;"	f	class:cohort::lru::TreeX
int_type	PrebufferedStreambuf.h	/^  typedef traits_ty::int_type int_type;$/;"	t	class:PrebufferedStreambuf
internal	sstring.hh	/^        } internal;$/;"	m	union:basic_sstring::contents	typeref:struct:basic_sstring::contents::internal_type
internal_type	sstring.hh	/^        struct internal_type {$/;"	s	union:basic_sstring::contents
intersect	interval_map.h	/^  interval_map intersect(K off, K len) const {$/;"	f	class:interval_map
interval	scrub_types.h	/^  epoch_t interval;$/;"	m	struct:scrub_ls_result_t
interval	scrub_types.h	/^  uint32_t interval;$/;"	m	struct:scrub_ls_arg_t
interval_map	interval_map.h	/^class interval_map {$/;"	c
intrusive_ptr_add_ref	RefCountedObj.cc	/^void intrusive_ptr_add_ref(const RefCountedObject *p) {$/;"	f
intrusive_ptr_add_ref	TrackedOp.h	/^  friend void intrusive_ptr_add_ref(TrackedOp *o) {$/;"	f	class:TrackedOp
intrusive_ptr_release	RefCountedObj.cc	/^void intrusive_ptr_release(const RefCountedObject *p) {$/;"	f
intrusive_ptr_release	TrackedOp.h	/^  friend void intrusive_ptr_release(TrackedOp *o) {$/;"	f	class:TrackedOp
invalidate_crc	buffer.cc	/^    void invalidate_crc() {$/;"	f	class:buffer::raw
invalidate_crc	buffer.cc	/^void buffer::list::invalidate_crc()$/;"	f	class:buffer::list
invalidate_sorted	bounded_key_counter.h	/^  void invalidate_sorted()$/;"	f	class:BoundedKeyCounter
ioprio_class	Thread.h	/^  int ioprio_class, ioprio_priority;$/;"	m	class:Thread
ioprio_class	WorkQueue.h	/^  int ioprio_class, ioprio_priority;$/;"	m	class:ThreadPool
ioprio_priority	Thread.h	/^  int ioprio_class, ioprio_priority;$/;"	m	class:Thread
ioprio_priority	WorkQueue.h	/^  int ioprio_class, ioprio_priority;$/;"	m	class:ThreadPool
iops	obj_bencher.h	/^  vector<long> iops;$/;"	m	struct:bench_history
is_aligned	buffer.cc	/^  bool buffer::list::is_aligned(unsigned align) const$/;"	f	class:buffer::list
is_aligned_size_and_memory	buffer.cc	/^  bool buffer::list::is_aligned_size_and_memory(unsigned align_size,$/;"	f	class:buffer::list
is_array	Formatter.h	/^      bool is_array;$/;"	m	struct:ceph::JSONFormatter::json_formatter_stack_entry_d
is_array	ceph_json.cc	/^bool JSONObj::is_array()$/;"	f	class:JSONObj
is_child	Preforker.h	/^  bool is_child() {$/;"	f	class:Preforker
is_child	SubProcess.h	/^  bool is_child() const { return pid == 0; }$/;"	f	class:SubProcess
is_client	entity_name.h	/^  bool is_client() const { return get_type() == CEPH_ENTITY_TYPE_CLIENT; }$/;"	f	struct:EntityName
is_contiguous	buffer.cc	/^  bool buffer::list::is_contiguous() const$/;"	f	class:buffer::list
is_control_character	utf8.c	/^int is_control_character(int c)$/;"	f
is_degenerate	hobject.h	/^  bool is_degenerate() const {$/;"	f	struct:ghobject_t
is_enabled	TracepointProvider.h	/^    inline bool is_enabled() const {$/;"	f	class:TracepointProvider::Singleton
is_full	bloom_filter.hpp	/^  inline bool is_full() const$/;"	f	class:bloom_filter
is_head	hobject.h	/^  bool is_head() const {$/;"	f	struct:hobject_t
is_healthy	HeartbeatMap.cc	/^bool HeartbeatMap::is_healthy()$/;"	f	class:ceph::HeartbeatMap
is_kernel_secret	secret.c	/^int is_kernel_secret(const char *key_name)$/;"	f
is_locked	Mutex.h	/^  bool is_locked() const {$/;"	f	class:Mutex
is_locked	RWLock.h	/^    bool is_locked() {$/;"	f	class:final::Context
is_locked	RWLock.h	/^  bool is_locked() const {$/;"	f	class:final
is_locked	mutex_debug.h	/^  bool is_locked() const {$/;"	f	class:ceph::mutex_debug_detail::mutex_debugging_base
is_locked_by_me	Mutex.h	/^  bool is_locked_by_me() const {$/;"	f	class:Mutex
is_locked_by_me	mutex_debug.h	/^  bool is_locked_by_me() const {$/;"	f	class:ceph::mutex_debug_detail::mutex_debugging_base
is_max	hobject.h	/^  bool is_max() const {$/;"	f	struct:ghobject_t
is_max	hobject.h	/^  bool is_max() const {$/;"	f	struct:hobject_t
is_mds	entity_name.h	/^  bool is_mds() const { return get_type() == CEPH_ENTITY_TYPE_MDS; }$/;"	f	struct:EntityName
is_meta	hobject.h	/^  bool is_meta() const {$/;"	f	struct:hobject_t
is_mgr	entity_name.h	/^  bool is_mgr() const { return get_type() == CEPH_ENTITY_TYPE_MGR; }$/;"	f	struct:EntityName
is_min	hobject.h	/^  bool is_min() const {$/;"	f	struct:ghobject_t
is_min	hobject.h	/^  bool is_min() const {$/;"	f	struct:hobject_t
is_mon	LogClient.h	/^  bool is_mon;$/;"	m	class:LogClient
is_mon	entity_name.h	/^  bool is_mon() const { return get_type() == CEPH_ENTITY_TYPE_MON; }$/;"	f	struct:EntityName
is_n_align_sized	buffer.cc	/^  bool buffer::list::is_n_align_sized(unsigned align) const$/;"	f	class:buffer::list
is_n_page_sized	buffer.cc	/^    bool is_n_page_sized() {$/;"	f	class:buffer::raw
is_n_page_sized	buffer.cc	/^  bool buffer::list::is_n_page_sized() const$/;"	f	class:buffer::list
is_no_gen	hobject.h	/^  bool is_no_gen() const {$/;"	f	struct:ghobject_t
is_no_shard	hobject.h	/^  bool is_no_shard() const {$/;"	f	struct:ghobject_t
is_object	ceph_json.cc	/^bool JSONObj::is_object()$/;"	f	class:JSONObj
is_osd	entity_name.h	/^  bool is_osd() const { return get_type() == CEPH_ENTITY_TYPE_OSD; }$/;"	f	struct:EntityName
is_page_aligned	buffer.cc	/^    virtual bool is_page_aligned() {$/;"	f	class:buffer::raw
is_page_aligned	buffer.cc	/^  bool buffer::list::is_page_aligned() const$/;"	f	class:buffer::list
is_parent	Preforker.h	/^  bool is_parent() {$/;"	f	class:Preforker
is_pgmeta	hobject.h	/^  bool is_pgmeta() const {$/;"	f	struct:ghobject_t
is_provided_buffer	buffer.cc	/^  bool buffer::list::is_provided_buffer(const char *dst) const$/;"	f	class:buffer::list
is_raw_object	deleter.h	/^  bool is_raw_object() const {$/;"	f	class:final
is_raw_object	deleter.h	/^  static bool is_raw_object(impl* i) {$/;"	f	class:final
is_rlocked	RWLock.h	/^    bool is_rlocked() {$/;"	f	class:final::Context
is_safe	options.h	/^  bool is_safe() const$/;"	f	struct:Option
is_shareable	buffer.cc	/^    bool is_shareable() { return false; }$/;"	f	class:buffer::xio_msg_buffer
is_shareable	buffer.cc	/^    virtual bool is_shareable() {$/;"	f	class:buffer::raw
is_snap	hobject.h	/^  bool is_snap() const {$/;"	f	struct:hobject_t
is_snapdir	hobject.h	/^  bool is_snapdir() const {$/;"	f	struct:hobject_t
is_spawned	SubProcess.h	/^  bool is_spawned() const { return pid > 0; }$/;"	f	class:SubProcess
is_started	Thread.cc	/^bool Thread::is_started() const$/;"	f	class:Thread
is_steady	ceph_time.h	/^      static constexpr const bool is_steady = false;$/;"	m	class:ceph::time_detail::coarse_real_clock
is_steady	ceph_time.h	/^      static constexpr const bool is_steady = false;$/;"	m	class:ceph::time_detail::real_clock
is_steady	ceph_time.h	/^      static constexpr const bool is_steady = true;$/;"	m	class:ceph::time_detail::coarse_mono_clock
is_steady	ceph_time.h	/^      static constexpr const bool is_steady = true;$/;"	m	class:ceph::time_detail::mono_clock
is_temp	hobject.h	/^  bool is_temp() const {$/;"	f	struct:hobject_t
is_valid	event_socket.h	/^  bool is_valid() const { return socket != -1; }$/;"	f	class:EventSocket
is_valid	fs_types.cc	/^bool file_layout_t::is_valid() const$/;"	f	class:file_layout_t
is_valid	snap_types.cc	/^bool SnapContext::is_valid() const$/;"	f	class:SnapContext
is_wlocked	RWLock.h	/^    bool is_wlocked() {$/;"	f	class:final::Context
is_wlocked	RWLock.h	/^  bool is_wlocked() const {$/;"	f	class:final
is_zero	buffer.cc	/^  bool buffer::list::is_zero() const {$/;"	f	class:buffer::list
is_zero	buffer.cc	/^  bool buffer::ptr::is_zero() const$/;"	f	class:buffer::ptr
is_zero	ceph_time.h	/^      static bool is_zero(const time_point& t) {$/;"	f	class:ceph::time_detail::coarse_real_clock
is_zero	ceph_time.h	/^      static bool is_zero(const time_point& t) {$/;"	f	class:ceph::time_detail::real_clock
iso_8601_format	iso_8601.h	/^enum class iso_8601_format {$/;"	c	namespace:ceph
it	interval_map.h	/^    cmapiter it;$/;"	m	class:interval_map::const_iterator
item	AsyncReserver.h	/^    T item;$/;"	m	struct:AsyncReserver::Reservation
item	WeightedPriorityQueue.h	/^        T item;$/;"	m	class:WeightedPriorityQueue::ListPair
iterator	autovector.h	/^  typedef iterator_impl<autovector, value_type> iterator;$/;"	t	class:ceph::autovector
iterator	buffer.cc	/^  buffer::list::iterator::iterator(bl_t *l, unsigned o)$/;"	f	class:buffer::list::iterator
iterator	buffer.cc	/^  buffer::list::iterator::iterator(bl_t *l, unsigned o, list_iter_t ip, unsigned po)$/;"	f	class:buffer::list::iterator
iterator	cohort_lru.h	/^      typedef typename TTree::iterator iterator;$/;"	t	class:cohort::lru::TreeX
iterator_category	autovector.h	/^    typedef std::random_access_iterator_tag iterator_category;$/;"	t	class:ceph::autovector::iterator_impl
iterator_impl	autovector.h	/^    iterator_impl(TAutoVector* vect, size_t index)$/;"	f	class:ceph::autovector::iterator_impl
iterator_impl	autovector.h	/^  class iterator_impl {$/;"	c	class:ceph::autovector
iterator_impl	buffer.cc	/^  buffer::list::iterator_impl<is_const>::iterator_impl(bl_t *l, unsigned o)$/;"	f	class:buffer::list::iterator_impl
iterator_impl	buffer.cc	/^  buffer::list::iterator_impl<is_const>::iterator_impl(const buffer::list::iterator& i)$/;"	f	class:buffer::list::iterator_impl
iterator_impl	buffer.cc	/^  template class buffer::list::iterator_impl<false>;$/;"	m	class:buffer::list	typeref:class:buffer::list::	file:
iterator_impl	buffer.cc	/^  template class buffer::list::iterator_impl<true>;$/;"	m	class:buffer::list	typeref:class:buffer::list::	file:
join	SubProcess.h	/^inline int SubProcess::join() {$/;"	f	class:SubProcess
join	Thread.cc	/^int Thread::join(void **prval)$/;"	f	class:Thread
join_old_threads	WorkQueue.cc	/^void ThreadPool::join_old_threads()$/;"	f	class:ThreadPool
join_service_thread	ceph_context.cc	/^void CephContext::join_service_thread()$/;"	f	class:CephContext
journal_trace	TrackedOp.h	/^  ZTracer::Trace journal_trace;$/;"	m	class:TrackedOp
json_buffer	ceph_json.h	/^  string json_buffer;$/;"	m	class:JSONParser
json_formatter_stack_entry_d	Formatter.h	/^      json_formatter_stack_entry_d() : size(0), is_array(false) { }$/;"	f	struct:ceph::JSONFormatter::json_formatter_stack_entry_d
json_formatter_stack_entry_d	Formatter.h	/^    struct json_formatter_stack_entry_d {$/;"	s	class:ceph::JSONFormatter
k	DecayCounter.h	/^  double k;             \/\/ k = ln(.5)\/half_life$/;"	m	class:DecayRate
keepCerts	ceph_crypto_cms.cc	/^    PRBool      keepCerts;$/;"	m	struct:decodeOptionsStr	file:
key	ConfUtils.h	/^  std::string key, val, newsection;$/;"	m	class:ConfLine
key	LogEntry.h	/^  LogEntryKey key() const { return LogEntryKey(who, stamp, seq); }$/;"	f	struct:LogEntry
key	WeightedPriorityQueue.h	/^	unsigned key;	\/\/ priority$/;"	m	class:WeightedPriorityQueue::SubQueue
key	WeightedPriorityQueue.h	/^        K key;		\/\/ klass$/;"	m	class:WeightedPriorityQueue::Klass
key	hobject.h	/^  string key;    \/\/ 对象的特殊标记$/;"	m	struct:hobject_t
key	shared_cache.hpp	/^    K key;$/;"	m	class:SharedLRU::Cleanup
key	sharedptr_registry.hpp	/^    K key;$/;"	m	class:SharedPtrRegistry::OnRemoval
keys	LogEntry.h	/^  ceph::unordered_set<LogEntryKey> keys;$/;"	m	struct:LogSummary
keys	pick_address.cc	/^  const char *keys[2];$/;"	m	struct:Observer	file:
keyval	zipkin_trace.h	/^  void keyval(const char *key, const char *val) const {}$/;"	f	class:ZTracer::Trace
keyval	zipkin_trace.h	/^  void keyval(const char *key, const char *val, const Endpoint *ep) const {}$/;"	f	class:ZTracer::Trace
keyval	zipkin_trace.h	/^  void keyval(const char *key, int64_t val) const {}$/;"	f	class:ZTracer::Trace
keyval	zipkin_trace.h	/^  void keyval(const char *key, int64_t val, const Endpoint *ep) const {}$/;"	f	class:ZTracer::Trace
kill	SubProcess.h	/^inline void SubProcess::kill(int signo) const {$/;"	f	class:SubProcess
kill	Thread.cc	/^int Thread::kill(int signal)$/;"	f	class:Thread
klasses	WeightedPriorityQueue.h	/^        Klasses klasses;$/;"	m	class:WeightedPriorityQueue::SubQueue
l_backoff_throttle_first	Throttle.cc	/^  l_backoff_throttle_first = l_throttle_last + 1,$/;"	e	enum:__anon11	file:
l_backoff_throttle_get	Throttle.cc	/^  l_backoff_throttle_get,$/;"	e	enum:__anon11	file:
l_backoff_throttle_get_sum	Throttle.cc	/^  l_backoff_throttle_get_sum,$/;"	e	enum:__anon11	file:
l_backoff_throttle_last	Throttle.cc	/^  l_backoff_throttle_last,$/;"	e	enum:__anon11	file:
l_backoff_throttle_max	Throttle.cc	/^  l_backoff_throttle_max,$/;"	e	enum:__anon11	file:
l_backoff_throttle_put	Throttle.cc	/^  l_backoff_throttle_put,$/;"	e	enum:__anon11	file:
l_backoff_throttle_put_sum	Throttle.cc	/^  l_backoff_throttle_put_sum,$/;"	e	enum:__anon11	file:
l_backoff_throttle_take	Throttle.cc	/^  l_backoff_throttle_take,$/;"	e	enum:__anon11	file:
l_backoff_throttle_take_sum	Throttle.cc	/^  l_backoff_throttle_take_sum,$/;"	e	enum:__anon11	file:
l_backoff_throttle_val	Throttle.cc	/^  l_backoff_throttle_val,$/;"	e	enum:__anon11	file:
l_backoff_throttle_wait	Throttle.cc	/^  l_backoff_throttle_wait,$/;"	e	enum:__anon11	file:
l_cct_first	ceph_context.h	/^    l_cct_first,$/;"	e	enum:CephContext::__anon4
l_cct_last	ceph_context.h	/^    l_cct_last$/;"	e	enum:CephContext::__anon4
l_cct_total_workers	ceph_context.h	/^    l_cct_total_workers,$/;"	e	enum:CephContext::__anon4
l_cct_unhealthy_workers	ceph_context.h	/^    l_cct_unhealthy_workers,$/;"	e	enum:CephContext::__anon4
l_finisher_complete_lat	Finisher.h	/^  l_finisher_complete_lat,$/;"	e	enum:__anon7
l_finisher_first	Finisher.h	/^  l_finisher_first = 997082,$/;"	e	enum:__anon7
l_finisher_last	Finisher.h	/^  l_finisher_last$/;"	e	enum:__anon7
l_finisher_queue_len	Finisher.h	/^  l_finisher_queue_len,$/;"	e	enum:__anon7
l_mutex_first	Mutex.h	/^  l_mutex_first = 999082,$/;"	e	enum:__anon3
l_mutex_first	mutex_debug.cc	/^  l_mutex_first = 999082,$/;"	e	enum:ceph::mutex_debug_detail::__anon13	file:
l_mutex_last	Mutex.h	/^  l_mutex_last$/;"	e	enum:__anon3
l_mutex_last	mutex_debug.cc	/^  l_mutex_last$/;"	e	enum:ceph::mutex_debug_detail::__anon13	file:
l_mutex_wait	Mutex.h	/^  l_mutex_wait,$/;"	e	enum:__anon3
l_mutex_wait	mutex_debug.cc	/^  l_mutex_wait,$/;"	e	enum:ceph::mutex_debug_detail::__anon13	file:
l_throttle_first	Throttle.cc	/^  l_throttle_first = 532430,$/;"	e	enum:__anon10	file:
l_throttle_get	Throttle.cc	/^  l_throttle_get,$/;"	e	enum:__anon10	file:
l_throttle_get_or_fail_fail	Throttle.cc	/^  l_throttle_get_or_fail_fail,$/;"	e	enum:__anon10	file:
l_throttle_get_or_fail_success	Throttle.cc	/^  l_throttle_get_or_fail_success,$/;"	e	enum:__anon10	file:
l_throttle_get_started	Throttle.cc	/^  l_throttle_get_started,$/;"	e	enum:__anon10	file:
l_throttle_get_sum	Throttle.cc	/^  l_throttle_get_sum,$/;"	e	enum:__anon10	file:
l_throttle_last	Throttle.cc	/^  l_throttle_last,$/;"	e	enum:__anon10	file:
l_throttle_max	Throttle.cc	/^  l_throttle_max,$/;"	e	enum:__anon10	file:
l_throttle_put	Throttle.cc	/^  l_throttle_put,$/;"	e	enum:__anon10	file:
l_throttle_put_sum	Throttle.cc	/^  l_throttle_put_sum,$/;"	e	enum:__anon10	file:
l_throttle_take	Throttle.cc	/^  l_throttle_take,$/;"	e	enum:__anon10	file:
l_throttle_take_sum	Throttle.cc	/^  l_throttle_take_sum,$/;"	e	enum:__anon10	file:
l_throttle_val	Throttle.cc	/^  l_throttle_val,$/;"	e	enum:__anon10	file:
l_throttle_wait	Throttle.cc	/^  l_throttle_wait,$/;"	e	enum:__anon10	file:
lambda_deleter_impl	deleter.h	/^  lambda_deleter_impl(deleter next, Deleter&& del)$/;"	f	struct:final
lane_hiwat	cohort_lru.h	/^      const uint32_t lane_hiwat;$/;"	m	class:cohort::lru::LRU
lane_of	cohort_lru.h	/^      Lane& lane_of(void* addr) {$/;"	f	class:cohort::lru::LRU
last	MemoryModel.h	/^  } last;$/;"	m	class:MemoryModel	typeref:struct:MemoryModel::snap
last	ceph_json.h	/^  map_iter_t last;$/;"	m	class:JSONObjIter
last	perf_counters.h	/^    pair<uint64_t, T> last;$/;"	m	struct:PerfCounters::avg_tracker
last_decay	DecayCounter.h	/^  utime_t last_decay;   \/\/ time of last decay$/;"	m	class:DecayCounter
last_freed_id	lockdep.cc	/^int last_freed_id = -1;$/;"	v
last_log	LogClient.h	/^  version_t last_log;$/;"	m	class:LogClient
last_log_sent	LogClient.h	/^  version_t last_log_sent;$/;"	m	class:LogClient
last_tid	CommandTable.h	/^  ceph_tid_t last_tid;$/;"	m	class:CommandTable
last_trim_key	random_cache.hpp	/^  K last_trim_key;$/;"	m	class:RandomCache
last_ts	EventTrace.h	/^  utime_t last_ts;$/;"	m	class:EventTrace
latency	obj_bencher.h	/^  vector<double> latency;$/;"	m	struct:bench_history
lderr	config.cc	34;"	d	file:
lderr	dout.h	66;"	d
ldlog_p1	dout.h	74;"	d
ldout	config.cc	31;"	d	file:
ldout	dout.h	65;"	d
ldpp_dout	dout.h	68;"	d
legacy_values	config.h	/^  std::map<std::string, md_config_t::member_ptr_t> legacy_values;$/;"	m	struct:md_config_t
len	buffer.cc	/^    unsigned len;$/;"	m	class:buffer::raw	file:
length	PrioritizedQueue.h	/^    unsigned length() const {$/;"	f	struct:PrioritizedQueue::SubQueue
length	mClockPriorityQueue.h	/^      unsigned length() const {$/;"	f	struct:ceph::mClockQueue::SubQueue
less_than_2	crc32c_intel_fast_asm.s	/^less_than_2:$/;"	l
less_than_2	crc32c_intel_fast_zero_asm.s	/^less_than_2:$/;"	l
less_than_4	crc32c_intel_fast_asm.s	/^less_than_4:$/;"	l
less_than_4	crc32c_intel_fast_zero_asm.s	/^less_than_4:$/;"	l
less_than_8	crc32c_intel_fast_asm.s	/^less_than_8:$/;"	l
less_than_8	crc32c_intel_fast_zero_asm.s	/^less_than_8:$/;"	l
level	options.h	/^  const level_t level;$/;"	m	struct:Option
level_t	options.h	/^  enum level_t {$/;"	g	struct:Option
level_to_str	options.h	/^  const char *level_to_str(level_t l) const {$/;"	f	struct:Option
lgeneric_derr	dout.h	72;"	d
lgeneric_dout	dout.h	71;"	d
lgeneric_subdout	dout.h	70;"	d
lib	MemoryModel.h	/^    long lib;$/;"	m	struct:MemoryModel::snap
librados	scrub_types.cc	/^namespace librados {$/;"	n	file:
librados	scrub_types.h	/^namespace librados {$/;"	n
library	PluginRegistry.h	/^    void *library;$/;"	m	class:ceph::Plugin
library	TracepointProvider.h	/^    const char *library;$/;"	m	struct:TracepointProvider::Traits
likely	likely.h	21;"	d
line	EventTrace.h	/^  int line;$/;"	m	class:EventTrace
lines	ConfUtils.h	/^  std::set <ConfLine> lines;$/;"	m	class:ConfSection
link_mode	cohort_lru.h	/^    typedef bi::link_mode<bi::safe_link> link_mode;$/;"	t	namespace:cohort::lru
list	buffer.cc	/^  buffer::list::list(list&& other)$/;"	f	class:buffer::list
list_item	HeartbeatMap.h	/^  std::list<heartbeat_handle_d*>::iterator list_item;$/;"	m	struct:ceph::heartbeat_handle_d
load	PluginRegistry.cc	/^int PluginRegistry::load(const std::string &type,$/;"	f	class:PluginRegistry
load_from_buffer	ConfUtils.cc	/^load_from_buffer(const char *buf, size_t sz, std::deque<std::string> *errors,$/;"	f	class:ConfFile
loading	PluginRegistry.h	/^    bool loading;$/;"	m	class:ceph::PluginRegistry
lock	AsyncReserver.h	/^  Mutex lock;$/;"	m	class:AsyncReserver
lock	Cond.h	/^  Mutex *lock;    \/\/\/< Mutex to take$/;"	m	class:C_SafeCond
lock	Cond.h	/^  Mutex lock;    \/\/\/< Mutex to take$/;"	m	class:C_SaferCond
lock	PluginRegistry.h	/^    Mutex lock;$/;"	m	class:ceph::PluginRegistry
lock	QueueRing.h	/^    Mutex lock;$/;"	m	struct:QueueRing::QueueBucket
lock	RWLock.h	/^    RWLock& lock;$/;"	m	class:final::Context
lock	RefCountedObj.h	/^  Mutex lock;$/;"	m	struct:RefCountedCond
lock	Throttle.h	/^  Mutex lock;$/;"	m	class:Throttle
lock	Throttle.h	/^  std::mutex lock;$/;"	m	class:BackoffThrottle
lock	Timer.h	/^  Mutex& lock;$/;"	m	class:SafeTimer
lock	TrackedOp.h	/^  RWLock       lock;$/;"	m	class:OpTracker
lock	TrackedOp.h	/^  mutable Mutex lock = {"TrackedOp::lock"}; \/\/\/< to protect the events list$/;"	m	class:TrackedOp
lock	WorkQueue.h	/^    void lock() {$/;"	f	class:ThreadPool::BatchWorkQueue
lock	WorkQueue.h	/^    void lock() {$/;"	f	class:ThreadPool::WorkQueue
lock	WorkQueue.h	/^    void lock() {$/;"	f	class:ThreadPool::WorkQueueVal
lock	WorkQueue.h	/^  void lock() {$/;"	f	class:ThreadPool
lock	ceph_timer.h	/^      std::mutex lock;$/;"	m	class:ceph::timer_detail::timer
lock	cohort_lru.h	/^	LK lock;$/;"	m	struct:cohort::lru::LRU::Lane
lock	cohort_lru.h	/^	LK lock;$/;"	m	struct:cohort::lru::TreeX::Partition
lock	cohort_lru.h	/^	LK* lock;$/;"	m	struct:cohort::lru::TreeX::Latch
lock	cohort_lru.h	/^      void lock() {$/;"	f	class:cohort::lru::TreeX
lock	config.h	/^  mutable Mutex lock;$/;"	m	struct:md_config_t
lock	dns_resolve.h	/^    Mutex lock;$/;"	m	class:ceph::DNSResolver
lock	lru_map.h	/^  Mutex lock;$/;"	m	class:lru_map
lock	mutex_debug.h	/^  void lock(bool no_lockdep = false) {$/;"	f	class:ceph::mutex_debug_detail::mutex_debugging
lock	obj_bencher.cc	/^  Mutex *lock;$/;"	m	struct:lock_cond	file:
lock	obj_bencher.h	/^  Mutex lock;$/;"	m	class:ObjBencher
lock	random_cache.hpp	/^  Mutex lock;$/;"	m	class:RandomCache
lock	shared_cache.hpp	/^  Mutex lock;$/;"	m	class:SharedLRU
lock	sharedptr_registry.hpp	/^  Mutex lock;$/;"	m	class:SharedPtrRegistry
lock	shunique_lock.h	/^  void lock() {$/;"	f	class:ceph::shunique_lock
lock	shunique_lock.h	/^  void lock(ceph::acquire_shared_t) {$/;"	f	class:ceph::shunique_lock
lock	shunique_lock.h	/^  void lock(ceph::acquire_unique_t) {$/;"	f	class:ceph::shunique_lock
lock	simple_cache.hpp	/^  Mutex lock;$/;"	m	class:SimpleLRU
lock_cond	obj_bencher.cc	/^  explicit lock_cond(Mutex *_lock) : lock(_lock) {}$/;"	f	struct:lock_cond
lock_cond	obj_bencher.cc	/^struct lock_cond {$/;"	s	file:
lock_ids	lockdep.cc	/^static ceph::unordered_map<std::string, int> lock_ids;$/;"	v	file:
lock_impl	mutex_debug.h	/^  void lock_impl() {$/;"	f	class:ceph::mutex_debug_detail::mutex_debug_impl
lock_names	lockdep.cc	/^static map<int, std::string> lock_names;$/;"	v	file:
lock_refs	lockdep.cc	/^static map<int, int> lock_refs;$/;"	v	file:
lock_shared	shunique_lock.h	/^  void lock_shared() {$/;"	f	class:ceph::shunique_lock
lockable	shunique_lock.h	/^  void lockable() const {$/;"	f	class:ceph::shunique_lock
lockdep	Mutex.h	/^  bool lockdep;$/;"	m	class:Mutex
lockdep	RWLock.h	/^  bool track, lockdep;$/;"	m	class:final
lockdep_dout	lockdep.cc	31;"	d	file:
lockdep_dump_locks	lockdep.cc	/^int lockdep_dump_locks()$/;"	f
lockdep_force_backtrace	lockdep.cc	/^static bool lockdep_force_backtrace()$/;"	f	file:
lockdep_get_free_id	lockdep.cc	/^int lockdep_get_free_id(void)$/;"	f
lockdep_locked	lockdep.cc	/^int lockdep_locked(const char *name, int id, bool force_backtrace)$/;"	f
lockdep_mutex	lockdep.cc	/^static pthread_mutex_t lockdep_mutex = PTHREAD_MUTEX_INITIALIZER;$/;"	v	file:
lockdep_register	lockdep.cc	/^int lockdep_register(const char *name)$/;"	f
lockdep_register_ceph_context	lockdep.cc	/^void lockdep_register_ceph_context(CephContext *cct)$/;"	f
lockdep_stopper	lockdep.cc	/^static lockdep_stopper_t lockdep_stopper;$/;"	v	file:
lockdep_stopper_t	lockdep.cc	/^struct lockdep_stopper_t {$/;"	s	file:
lockdep_unregister	lockdep.cc	/^void lockdep_unregister(int id)$/;"	f
lockdep_unregister_ceph_context	lockdep.cc	/^void lockdep_unregister_ceph_context(CephContext *cct)$/;"	f
lockdep_will_lock	lockdep.cc	/^int lockdep_will_lock(const char *name, int id, bool force_backtrace)$/;"	f
lockdep_will_unlock	lockdep.cc	/^int lockdep_will_unlock(const char *name, int id)$/;"	f
locked	RWLock.h	/^    bool locked;$/;"	m	class:final::RLocker
locked	RWLock.h	/^    bool locked;$/;"	m	class:final::WLocker
locked_by	Mutex.h	/^  pthread_t locked_by;$/;"	m	class:Mutex
locked_by	mutex_debug.h	/^  std::thread::id locked_by;$/;"	m	class:ceph::mutex_debug_detail::mutex_debugging_base
lockname	WorkQueue.h	/^  string lockname;$/;"	m	class:ShardedThreadPool
lockname	WorkQueue.h	/^  string lockname;$/;"	m	class:ThreadPool
locks	cohort_lru.h	/^      std::vector<LK*> locks;$/;"	m	class:cohort::lru::TreeX
log	ceph_context.cc	/^  ceph::logging::Log *log;$/;"	m	class:LogObs	file:
log_channel	LogClient.h	/^  std::string log_channel;$/;"	m	class:LogChannel
log_entry	Graylog.cc	/^void Graylog::log_entry(Entry const * const e)$/;"	f	class:ceph::logging::Graylog
log_event_latency	EventTrace.cc	/^void EventTrace::log_event_latency(const char *event)$/;"	f	class:EventTrace
log_lock	LogClient.h	/^  Mutex log_lock;$/;"	m	class:LogClient
log_log_entry	Graylog.cc	/^void Graylog::log_log_entry(LogEntry const * const e)$/;"	f	class:ceph::logging::Graylog
log_prio	LogClient.h	/^  std::string log_prio;$/;"	m	class:LogChannel
log_queue	LogClient.h	/^  std::deque<LogEntry> log_queue;$/;"	m	class:LogClient
log_threshold	TrackedOp.h	/^  int log_threshold;$/;"	m	class:OpTracker
log_to_monitors	LogClient.h	/^  bool log_to_monitors;$/;"	m	class:LogChannel
log_to_syslog	LogClient.h	/^  bool log_to_syslog;$/;"	m	class:LogChannel
log_to_syslog	LogEntry.cc	/^void LogEntry::log_to_syslog(string level, string facility)$/;"	f	class:LogEntry
logclient_flag_t	LogClient.h	/^  enum logclient_flag_t {$/;"	g	class:LogClient
logger	Finisher.h	/^  PerfCounters *logger;$/;"	m	class:Finisher
logger	Mutex.h	/^  PerfCounters *logger;$/;"	m	class:Mutex
logger	Throttle.h	/^  PerfCounters *logger;$/;"	m	class:BackoffThrottle
logger	Throttle.h	/^  PerfCounters *logger;$/;"	m	class:Throttle
logger	mutex_debug.h	/^  PerfCounters *logger;$/;"	m	class:ceph::mutex_debug_detail::mutex_debugging_base
logging	Graylog.cc	/^namespace logging {$/;"	n	namespace:ceph	file:
logging	Graylog.h	/^namespace logging {$/;"	n	namespace:ceph
logging	LogClient.h	/^namespace logging {$/;"	n	namespace:ceph
logging	ceph_context.h	/^  namespace logging {$/;"	n	namespace:ceph
long_desc	options.h	/^  std::string long_desc;$/;"	m	struct:Option
lookup	random_cache.hpp	/^  bool lookup(K key, V *out) {$/;"	f	class:RandomCache
lookup	shared_cache.hpp	/^  VPtr lookup(const K& key) {$/;"	f	class:SharedLRU
lookup	sharedptr_registry.hpp	/^  VPtr lookup(const K &key) {$/;"	f	class:SharedPtrRegistry
lookup	simple_cache.hpp	/^  bool lookup(K key, V *out) {$/;"	f	class:SimpleLRU
lookup_or_create	shared_cache.hpp	/^  VPtr lookup_or_create(const K &key) {$/;"	f	class:SharedLRU
lookup_or_create	sharedptr_registry.hpp	/^  VPtr lookup_or_create(const K &key) {$/;"	f	class:SharedPtrRegistry
lookup_or_create	sharedptr_registry.hpp	/^  VPtr lookup_or_create(const K &key, const A &arg) {$/;"	f	class:SharedPtrRegistry
lookup_or_create_singleton_object	ceph_context.h	/^  void lookup_or_create_singleton_object(T*& p, const std::string &name) {$/;"	f	class:CephContext
low_threshhold	Throttle.h	/^  double low_threshhold = 0;$/;"	m	class:BackoffThrottle
lower_bound	shared_cache.hpp	/^  VPtr lower_bound(const K& key) {$/;"	f	class:SharedLRU
lp	WeightedPriorityQueue.h	/^        ListPairs lp;$/;"	m	class:WeightedPriorityQueue::Klass
lru	cohort_lru.h	/^  namespace lru {$/;"	n	namespace:cohort
lru	shared_cache.hpp	/^  list<pair<K, VPtr> > lru;$/;"	m	class:SharedLRU
lru	simple_cache.hpp	/^  list<pair<K, V> > lru;$/;"	m	class:SimpleLRU
lru_add	shared_cache.hpp	/^  void lru_add(const K& key, const VPtr& val, list<VPtr> *to_release) {$/;"	f	class:SharedLRU
lru_adj	cohort_lru.h	/^      std::atomic<uint32_t> lru_adj;$/;"	m	class:cohort::lru::Object
lru_adj_modulus	cohort_lru.h	/^      static constexpr uint32_t lru_adj_modulus = 5;$/;"	m	class:cohort::lru::LRU
lru_flags	cohort_lru.h	/^      uint32_t lru_flags;$/;"	m	class:cohort::lru::Object
lru_hook	cohort_lru.h	/^      bi::list_member_hook< link_mode > lru_hook;$/;"	m	class:cohort::lru::Object
lru_iter	lru_map.h	/^    typename std::list<K>::iterator lru_iter;$/;"	m	struct:lru_map::entry
lru_map	lru_map.h	/^  lru_map(int _max) : lock("lru_map"), max(_max) {}$/;"	f	class:lru_map
lru_map	lru_map.h	/^class lru_map {$/;"	c
lru_refcnt	cohort_lru.h	/^      std::atomic<uint32_t> lru_refcnt;$/;"	m	class:cohort::lru::Object
lru_remove	shared_cache.hpp	/^  void lru_remove(const K& key) {$/;"	f	class:SharedLRU
lsubdout	dout.h	64;"	d
m	Semaphore.h	/^  Mutex m;$/;"	m	class:Semaphore
m	mutex_debug.h	/^  pthread_mutex_t m;$/;"	m	class:ceph::mutex_debug_detail::mutex_debug_impl
m	shunique_lock.h	/^    : m(&m), o(ownership::none) { }$/;"	m	class:ceph::shunique_lock
m	shunique_lock.h	/^  mutex_type*	m;$/;"	m	class:ceph::shunique_lock
mClockQueue	mClockPriorityQueue.h	/^    mClockQueue($/;"	f	class:ceph::mClockQueue
mClockQueue	mClockPriorityQueue.h	/^  class mClockQueue : public OpQueue <T, K> {$/;"	c	namespace:ceph
m_alignments	Readahead.h	/^  std::vector<uint64_t> m_alignments;$/;"	m	class:Readahead
m_as	admin_socket.cc	/^  AdminSocket *m_as;$/;"	m	class:GetdescsHook	file:
m_as	admin_socket.cc	/^  AdminSocket *m_as;$/;"	m	class:HelpHook	file:
m_axes_config	perf_histogram.h	/^  std::array<axis_config_d, DIM> m_axes_config;$/;"	m	class:PerfHistogram
m_bit_vector	bit_vector.hpp	/^    BitVectorT *m_bit_vector;$/;"	m	class:ceph::BitVector::IteratorImpl
m_buckets	perf_histogram.h	/^    int32_t m_buckets = 0;$/;"	m	struct:PerfHistogramCommon::axis_config_d
m_buf	PrebufferedStreambuf.h	/^  char *m_buf;$/;"	m	class:PrebufferedStreambuf
m_buf_len	PrebufferedStreambuf.h	/^  size_t m_buf_len;$/;"	m	class:PrebufferedStreambuf
m_building	ContextCompletion.h	/^  bool m_building;$/;"	m	class:ceph::ContextCompletion
m_cct	HeartbeatMap.h	/^  CephContext *m_cct;$/;"	m	class:ceph::HeartbeatMap
m_cct	OutputDataSocket.h	/^  CephContext *m_cct;$/;"	m	class:OutputDataSocket
m_cct	TracepointProvider.h	/^  CephContext *m_cct;$/;"	m	class:TracepointProvider
m_cct	admin_socket.h	/^  CephContext *m_cct;$/;"	m	class:AdminSocket
m_cct	ceph_context.cc	/^  CephContext *m_cct;$/;"	m	class:CephContextHook	file:
m_cct	ceph_context.cc	/^  CephContext *m_cct;$/;"	m	class:__anon6::LockdepObs	file:
m_cct	perf_counters.h	/^  CephContext *m_cct;$/;"	m	class:PerfCounters
m_cct	perf_counters.h	/^  CephContext *m_cct;$/;"	m	class:PerfCountersCollection
m_column_name	Formatter.h	/^    std::vector< std::string > m_column_name;$/;"	m	class:ceph::TableFormatter
m_column_size	Formatter.h	/^    std::vector<size_t> m_column_size;$/;"	m	class:ceph::TableFormatter
m_complete_tid	Throttle.h	/^  uint64_t m_complete_tid;$/;"	m	class:OrderedThrottle
m_compressor	Graylog.h	/^  boost::iostreams::zlib_compressor m_compressor;$/;"	m	class:ceph::logging::Graylog
m_cond	Throttle.h	/^  Cond m_cond;$/;"	m	class:OrderedThrottle
m_cond	Throttle.h	/^  Cond m_cond;$/;"	m	class:SimpleThrottle
m_config_keys	TracepointProvider.h	/^  mutable const char* m_config_keys[2];$/;"	m	class:TracepointProvider
m_consec_read_bytes	Readahead.h	/^  uint64_t m_consec_read_bytes;$/;"	m	class:Readahead
m_context_completion	ContextCompletion.h	/^  ContextCompletion &m_context_completion;$/;"	m	class:ceph::C_ContextCompletion
m_context_results	WorkQueue.h	/^  ceph::unordered_map<Context*, int> m_context_results;$/;"	m	class:ContextWQ
m_crc_enabled	bit_vector.hpp	/^  bool m_crc_enabled;$/;"	m	class:ceph::BitVector
m_ctx	ContextCompletion.h	/^  Context *m_ctx;$/;"	m	class:ceph::ContextCompletion
m_current	Throttle.h	/^  uint64_t m_current;$/;"	m	class:OrderedThrottle
m_current	Throttle.h	/^  uint64_t m_current;$/;"	m	class:SimpleThrottle
m_current_ops	ContextCompletion.h	/^  uint64_t m_current_ops;$/;"	m	class:ceph::ContextCompletion
m_data	bit_vector.hpp	/^  bufferlist m_data;$/;"	m	class:ceph::BitVector
m_data	perf_counters.h	/^  perf_counter_data_vec_t m_data;$/;"	m	class:PerfCounters
m_data_crcs	bit_vector.hpp	/^  mutable std::vector<__u32> m_data_crcs;$/;"	m	class:ceph::BitVector
m_data_iterator	bit_vector.hpp	/^    DataIterator m_data_iterator;$/;"	m	class:ceph::BitVector::IteratorImpl
m_data_iterator	bit_vector.hpp	/^    DataIterator m_data_iterator;$/;"	m	class:ceph::BitVector::ReferenceImpl
m_descs	admin_socket.h	/^  std::map<std::string,std::string> m_descs;$/;"	m	class:AdminSocket
m_endpoint	Graylog.h	/^  boost::asio::ip::udp::endpoint m_endpoint;$/;"	m	class:ceph::logging::Graylog
m_formatter	Graylog.h	/^  std::unique_ptr<Formatter> m_formatter;$/;"	m	class:ceph::logging::Graylog
m_formatter_section	Graylog.h	/^  std::unique_ptr<Formatter> m_formatter_section;$/;"	m	class:ceph::logging::Graylog
m_fsid	Graylog.h	/^  std::string m_fsid;$/;"	m	class:ceph::logging::Graylog
m_getdescs_hook	admin_socket.h	/^  AdminSocketHook *m_version_hook, *m_help_hook, *m_getdescs_hook;$/;"	m	class:AdminSocket
m_handle	TracepointProvider.h	/^  void* m_handle = nullptr;$/;"	m	class:TracepointProvider
m_header_crc	bit_vector.hpp	/^  mutable __u32 m_header_crc;$/;"	m	class:ceph::BitVector
m_header_done	Formatter.h	/^    bool m_header_done;$/;"	m	class:ceph::XMLFormatter
m_help	admin_socket.h	/^  std::map<std::string,std::string> m_help;$/;"	m	class:AdminSocket
m_help_hook	admin_socket.h	/^  AdminSocketHook *m_version_hook, *m_help_hook, *m_getdescs_hook;$/;"	m	class:AdminSocket
m_hook	buffer.cc	/^    XioDispatchHook* m_hook;$/;"	m	class:buffer::xio_msg_buffer	file:
m_hooks	admin_socket.h	/^  std::map<std::string,AdminSocketHook*> m_hooks;$/;"	m	class:AdminSocket
m_hostname	Graylog.h	/^  std::string m_hostname;$/;"	m	class:ceph::logging::Graylog
m_ignore_enoent	ContextCompletion.h	/^  bool m_ignore_enoent;$/;"	m	class:ceph::ContextCompletion
m_ignore_enoent	Throttle.h	/^  bool m_ignore_enoent;$/;"	m	class:OrderedThrottle
m_ignore_enoent	Throttle.h	/^  bool m_ignore_enoent;$/;"	m	class:SimpleThrottle
m_index	bit_vector.hpp	/^    uint64_t m_index = 0;$/;"	m	class:ceph::BitVector::IteratorImpl
m_inject_unhealthy_until	HeartbeatMap.h	/^  time_t m_inject_unhealthy_until;$/;"	m	class:ceph::HeartbeatMap
m_io_service	Graylog.h	/^  boost::asio::io_service m_io_service;$/;"	m	class:ceph::logging::Graylog
m_is_pending_string	Formatter.h	/^    bool m_is_pending_string;$/;"	m	class:ceph::JSONFormatter
m_items	WorkQueue.h	/^    std::list<T *> m_items;$/;"	m	class:ThreadPool::PointerWQ
m_keyval	Formatter.h	/^    bool m_keyval;$/;"	m	class:ceph::TableFormatter
m_last_pos	Readahead.h	/^  uint64_t m_last_pos;$/;"	m	class:Readahead
m_library	TracepointProvider.h	/^  std::string m_library;$/;"	m	class:TracepointProvider
m_line_break_enabled	Formatter.h	/^    bool m_line_break_enabled = false;$/;"	m	class:ceph::JSONFormatter
m_line_break_enabled	Formatter.h	/^    bool m_line_break_enabled = false;$/;"	m	class:ceph::XMLFormatter
m_lock	AsyncOpTracker.h	/^  Mutex m_lock;$/;"	m	class:AsyncOpTracker
m_lock	ContextCompletion.h	/^  Mutex m_lock;$/;"	m	class:ceph::ContextCompletion
m_lock	OutputDataSocket.h	/^  Mutex m_lock;$/;"	m	class:OutputDataSocket
m_lock	RWLock.h	/^    RWLock &m_lock;$/;"	m	class:final::WLocker
m_lock	RWLock.h	/^    const RWLock &m_lock;$/;"	m	class:final::RLocker
m_lock	Readahead.h	/^  Mutex m_lock;$/;"	m	class:Readahead
m_lock	Throttle.h	/^  mutable Mutex m_lock;$/;"	m	class:OrderedThrottle
m_lock	Throttle.h	/^  mutable Mutex m_lock;$/;"	m	class:SimpleThrottle
m_lock	TracepointProvider.h	/^  Mutex m_lock;$/;"	m	class:TracepointProvider
m_lock	WorkQueue.h	/^  Mutex m_lock;$/;"	m	class:ContextWQ
m_lock	admin_socket.h	/^  Mutex m_lock;    \/\/ protects m_hooks, m_descs, m_help$/;"	m	class:AdminSocket
m_lock	perf_counters.h	/^  mutable Mutex m_lock;$/;"	m	class:PerfCounters
m_lock	perf_counters.h	/^  mutable Mutex m_lock;$/;"	m	class:PerfCountersCollection
m_lock_name	perf_counters.h	/^  const std::string m_lock_name;$/;"	m	class:PerfCounters
m_log_dst_valid	Graylog.h	/^  bool m_log_dst_valid;$/;"	m	class:ceph::logging::Graylog
m_logger	Graylog.h	/^  std::string m_logger;$/;"	m	class:ceph::logging::Graylog
m_loggers	perf_counters.h	/^  perf_counters_set_t m_loggers;$/;"	m	class:PerfCountersCollection
m_lower_bound	perf_counters.h	/^  int m_lower_bound;$/;"	m	class:PerfCounters
m_lowercased	Formatter.h	/^    const bool m_lowercased;$/;"	m	class:ceph::XMLFormatter
m_max	Throttle.h	/^  uint64_t m_max;$/;"	m	class:OrderedThrottle
m_max	Throttle.h	/^  uint64_t m_max;$/;"	m	class:SimpleThrottle
m_min	perf_histogram.h	/^    int64_t m_min = 0;$/;"	m	struct:PerfHistogramCommon::axis_config_d
m_name	perf_counters.h	/^  std::string m_name;$/;"	m	class:PerfCounters
m_name	perf_histogram.h	/^    const char *m_name = nullptr;$/;"	m	struct:PerfHistogramCommon::axis_config_d
m_next_tid	Throttle.h	/^  uint64_t m_next_tid;$/;"	m	class:OrderedThrottle
m_nr_consec_read	Readahead.h	/^  int m_nr_consec_read;$/;"	m	class:Readahead
m_offset	bit_vector.hpp	/^    uint64_t m_offset = 0;$/;"	m	class:ceph::BitVector::IteratorImpl
m_on_finish	AsyncOpTracker.h	/^  Context *m_on_finish = nullptr;$/;"	m	class:AsyncOpTracker
m_ordered_throttle	Throttle.h	/^  OrderedThrottle *m_ordered_throttle;$/;"	m	class:C_OrderedThrottle
m_ostream	Graylog.h	/^  boost::iostreams::filtering_ostream m_ostream;$/;"	m	class:ceph::logging::Graylog
m_ostream_compressed	Graylog.h	/^  std::stringstream m_ostream_compressed;$/;"	m	class:ceph::logging::Graylog
m_ostream_section	Graylog.h	/^  std::stringstream m_ostream_section;$/;"	m	class:ceph::logging::Graylog
m_overflow	PrebufferedStreambuf.h	/^  std::string m_overflow;$/;"	m	class:PrebufferedStreambuf
m_path	OutputDataSocket.h	/^  std::string m_path;$/;"	m	class:OutputDataSocket
m_path	admin_socket.h	/^  std::string m_path;$/;"	m	class:AdminSocket
m_path	admin_socket_client.h	/^  std::string m_path;$/;"	m	class:AdminSocketClient
m_pending	Readahead.h	/^  int m_pending;$/;"	m	class:Readahead
m_pending_lock	Readahead.h	/^  Mutex m_pending_lock;$/;"	m	class:Readahead
m_pending_name	Formatter.h	/^    std::string m_pending_name;$/;"	m	class:ceph::TableFormatter
m_pending_ops	AsyncOpTracker.h	/^  uint32_t m_pending_ops = 0;$/;"	m	class:AsyncOpTracker
m_pending_string	Formatter.h	/^    std::stringstream m_ss, m_pending_string;$/;"	m	class:ceph::JSONFormatter
m_pending_string	Formatter.h	/^    std::stringstream m_ss, m_pending_string;$/;"	m	class:ceph::XMLFormatter
m_pending_string_name	Formatter.h	/^    std::string m_pending_string_name;$/;"	m	class:ceph::XMLFormatter
m_pending_waiting	Readahead.h	/^  std::list<Context *> m_pending_waiting;$/;"	m	class:Readahead
m_perf_counters	perf_counters.h	/^  PerfCounters *m_perf_counters;$/;"	m	class:PerfCountersBuilder
m_pool	WorkQueue.h	/^    ThreadPool *m_pool;$/;"	m	class:ThreadPool::PointerWQ
m_pretty	Formatter.h	/^    bool m_pretty;$/;"	m	class:ceph::JSONFormatter
m_pretty	Formatter.h	/^    const bool m_pretty;$/;"	m	class:ceph::XMLFormatter
m_processing	WorkQueue.h	/^    uint32_t m_processing;$/;"	m	class:ThreadPool::PointerWQ
m_quant_size	perf_histogram.h	/^    int64_t m_quant_size = 0;$/;"	m	struct:PerfHistogramCommon::axis_config_d
m_rawData	perf_histogram.h	/^  std::unique_ptr<std::atomic<uint64_t>[]> m_rawData;$/;"	m	class:PerfHistogram
m_readahead_max_bytes	Readahead.h	/^  uint64_t m_readahead_max_bytes;$/;"	m	class:Readahead
m_readahead_min_bytes	Readahead.h	/^  uint64_t m_readahead_min_bytes;$/;"	m	class:Readahead
m_readahead_pos	Readahead.h	/^  uint64_t m_readahead_pos;$/;"	m	class:Readahead
m_readahead_size	Readahead.h	/^  uint64_t m_readahead_size;$/;"	m	class:Readahead
m_readahead_trigger_pos	Readahead.h	/^  uint64_t m_readahead_trigger_pos;$/;"	m	class:Readahead
m_registered	ceph_context.cc	/^  bool m_registered;$/;"	m	class:__anon6::LockdepObs	file:
m_ret	ContextCompletion.h	/^  int m_ret;$/;"	m	class:ceph::ContextCompletion
m_ret	Throttle.h	/^  int m_ret;$/;"	m	class:SimpleThrottle
m_ret_val	Throttle.h	/^  int m_ret_val;$/;"	m	class:OrderedThrottle
m_rwlock	HeartbeatMap.h	/^  RWLock m_rwlock;$/;"	m	class:ceph::HeartbeatMap
m_scale_type	perf_histogram.h	/^    scale_type_d m_scale_type = SCALE_LINEAR;$/;"	m	struct:PerfHistogramCommon::axis_config_d
m_section	Formatter.h	/^    std::vector< std::string > m_section;$/;"	m	class:ceph::TableFormatter
m_section_cnt	Formatter.h	/^    std::map<std::string, int> m_section_cnt;$/;"	m	class:ceph::TableFormatter
m_section_open	Formatter.h	/^    int m_section_open;$/;"	m	class:ceph::TableFormatter
m_sections	Formatter.h	/^    std::deque<std::string> m_sections;$/;"	m	class:ceph::XMLFormatter
m_shift	bit_vector.hpp	/^    uint64_t m_shift = 0;$/;"	m	class:ceph::BitVector::IteratorImpl
m_shift	bit_vector.hpp	/^    uint64_t m_shift;$/;"	m	class:ceph::BitVector::ReferenceImpl
m_shutdown_rd_fd	OutputDataSocket.h	/^  int m_shutdown_rd_fd;$/;"	m	class:OutputDataSocket
m_shutdown_rd_fd	admin_socket.h	/^  int m_shutdown_rd_fd;$/;"	m	class:AdminSocket
m_shutdown_wr_fd	OutputDataSocket.h	/^  int m_shutdown_wr_fd;$/;"	m	class:OutputDataSocket
m_shutdown_wr_fd	admin_socket.h	/^  int m_shutdown_wr_fd;$/;"	m	class:AdminSocket
m_size	bit_vector.hpp	/^  uint64_t m_size;$/;"	m	class:ceph::BitVector
m_sock_fd	OutputDataSocket.h	/^  int m_sock_fd;$/;"	m	class:OutputDataSocket
m_sock_fd	admin_socket.h	/^  int m_sock_fd;$/;"	m	class:AdminSocket
m_ss	Formatter.h	/^    std::stringstream m_ss, m_pending_string;$/;"	m	class:ceph::JSONFormatter
m_ss	Formatter.h	/^    std::stringstream m_ss, m_pending_string;$/;"	m	class:ceph::XMLFormatter
m_ss	Formatter.h	/^    std::stringstream m_ss;$/;"	m	class:ceph::TableFormatter
m_stack	Formatter.h	/^    std::list<json_formatter_stack_entry_d> m_stack;$/;"	m	class:ceph::JSONFormatter
m_status	HTMLFormatter.h	/^    int m_status;$/;"	m	class:ceph::HTMLFormatter
m_status_name	HTMLFormatter.h	/^    const char* m_status_name;$/;"	m	class:ceph::HTMLFormatter
m_subs	Graylog.h	/^  SubsystemMap const * const m_subs;$/;"	m	class:ceph::logging::Graylog
m_tid	Throttle.h	/^  uint64_t m_tid;$/;"	m	class:C_OrderedThrottle
m_tid_result	Throttle.h	/^  TidResult m_tid_result;$/;"	m	class:OrderedThrottle
m_total_workers	HeartbeatMap.h	/^  std::atomic<unsigned> m_total_workers = { 0 };$/;"	m	class:ceph::HeartbeatMap
m_trigger_requests	Readahead.h	/^  int m_trigger_requests;$/;"	m	class:Readahead
m_underscored	Formatter.h	/^    const bool m_underscored;$/;"	m	class:ceph::XMLFormatter
m_unhealthy_workers	HeartbeatMap.h	/^  std::atomic<unsigned> m_unhealthy_workers = { 0 };$/;"	m	class:ceph::HeartbeatMap
m_upper_bound	perf_counters.h	/^  int m_upper_bound;$/;"	m	class:PerfCounters
m_vec	Formatter.h	/^    std::vector< std::vector<std::pair<std::string, std::string> > > m_vec;$/;"	m	class:ceph::TableFormatter
m_vec_index	Formatter.cc	/^size_t TableFormatter::m_vec_index(const char *name)$/;"	f	class:ceph::TableFormatter
m_version_hook	admin_socket.h	/^  AdminSocketHook *m_version_hook, *m_help_hook, *m_getdescs_hook;$/;"	m	class:AdminSocket
m_workers	HeartbeatMap.h	/^  std::list<heartbeat_handle_d*> m_workers;$/;"	m	class:ceph::HeartbeatMap
make_deleter	deleter.h	/^deleter make_deleter(Object o) {$/;"	f
make_deleter	deleter.h	/^deleter make_deleter(deleter next, Object o) {$/;"	f
make_free_deleter	deleter.h	/^inline deleter make_free_deleter(deleter next, void* obj) {$/;"	f
make_free_deleter	deleter.h	/^inline deleter make_free_deleter(void* obj) {$/;"	f
make_object_deleter	deleter.h	/^inline deleter make_object_deleter(T&& obj) {$/;"	f
make_object_deleter	deleter.h	/^inline deleter make_object_deleter(deleter d, T&& obj) {$/;"	f
make_object_deleter_impl	deleter.h	/^object_deleter_impl<Object>* make_object_deleter_impl(deleter next, Object obj) {$/;"	f
make_pair	inline_variant.h	/^struct make_pair$/;"	s	namespace:detail
make_pgmeta	hobject.h	/^  static ghobject_t make_pgmeta(int64_t pool, uint32_t hash, shard_id_t shard) {$/;"	f	struct:ghobject_t
make_shareable	buffer.cc	/^  buffer::ptr& buffer::ptr::make_shareable() {$/;"	f	class:buffer::ptr
make_sstring	sstring.hh	/^static String make_sstring(Args&&... args)$/;"	f
make_temp_hobject	hobject.h	/^  hobject_t make_temp_hobject(const string& name) const {$/;"	f	struct:hobject_t
make_timespan	ceph_time.h	/^    inline timespan make_timespan(const double d) {$/;"	f	namespace:ceph::__anon15
make_unique	backport14.h	/^inline typename uniquity<T>::array make_unique(std::size_t n) {$/;"	f	namespace:ceph::_backport14
make_unique	backport14.h	/^inline typename uniquity<T>::datum make_unique(Args&&... args) {$/;"	f	namespace:ceph::_backport14
manual_fallocate	compat.cc	/^int manual_fallocate(int fd, off_t offset, off_t len) {$/;"	f
map_iter_t	ceph_json.h	/^  typedef map<string, JSONObj *>::iterator map_iter_t;$/;"	t	class:JSONObjIter
mark_event	TrackedOp.cc	/^void TrackedOp::mark_event(const char *event, utime_t stamp)$/;"	f	class:TrackedOp
mark_event_string	TrackedOp.cc	/^void TrackedOp::mark_event_string(const string &event, utime_t stamp)$/;"	f	class:TrackedOp
mark_nowarn	TrackedOp.h	/^  void mark_nowarn() {$/;"	f	class:TrackedOp
mask_32bit	crc32c_ppc_asm.S	/^#define	mask_32bit	v27$/;"	d
mask_64bit	crc32c_ppc_asm.S	/^#define	mask_64bit	v28$/;"	d
match	hobject.h	/^  bool match(uint32_t bits, uint32_t match) const {$/;"	f	struct:ghobject_t
match	hobject.h	/^  bool match(uint32_t bits, uint32_t match) const {$/;"	f	struct:hobject_t
match_hash	hobject.h	/^  static bool match_hash(uint32_t to_check, uint32_t bits, uint32_t match) {$/;"	f	struct:hobject_t
max	BackTrace.h	/^  const static int max = 100;$/;"	m	struct:ceph::BackTrace
max	Throttle.h	/^  std::atomic<int64_t> count = { 0 }, max = { 0 };$/;"	m	class:Throttle
max	Throttle.h	/^  uint64_t max = 0;$/;"	m	class:BackoffThrottle
max	backport14.h	/^constexpr const T& max(const T& a, const T& b) {$/;"	f	namespace:ceph::_backport14
max	hobject.h	/^  bool max;$/;"	m	struct:ghobject_t
max	hobject.h	/^  bool max;$/;"	m	struct:hobject_t
max	lru_map.h	/^  size_t max;$/;"	m	class:lru_map
max	options.h	/^  value_t min, max;$/;"	m	struct:Option
max_allowed	AsyncReserver.h	/^  unsigned max_allowed;$/;"	m	class:AsyncReserver
max_bandwidth	obj_bencher.h	/^  double max_bandwidth = 0;$/;"	m	struct:bench_interval_data
max_cost	WeightedPriorityQueue.h	/^      unsigned max_cost;$/;"	m	class:WeightedPriorityQueue::Queue
max_delay_per_count	Throttle.h	/^  double max_delay_per_count = 0;$/;"	m	class:BackoffThrottle
max_iops	obj_bencher.h	/^  int max_iops = 0;$/;"	m	struct:bench_interval_data
max_latency	obj_bencher.h	/^  double max_latency;$/;"	m	struct:bench_data
max_return	scrub_types.h	/^  uint64_t max_return;$/;"	m	struct:scrub_ls_arg_t
max_size	random_cache.hpp	/^  uint64_t max_size;$/;"	m	class:RandomCache
max_size	shared_cache.hpp	/^  size_t max_size;$/;"	m	class:SharedLRU
max_size	simple_cache.hpp	/^  size_t max_size;$/;"	m	class:SimpleLRU
max_tokens	PrioritizedQueue.h	/^    unsigned tokens, max_tokens;$/;"	m	struct:PrioritizedQueue::SubQueue
max_tokens	mClockPriorityQueue.h	/^      unsigned tokens, max_tokens;$/;"	m	struct:ceph::mClockQueue::SubQueue
max_tokens_per_subqueue	PrioritizedQueue.h	/^  int64_t max_tokens_per_subqueue;$/;"	m	class:PrioritizedQueue
md_config_obs_t	config_obs.h	/^class md_config_obs_t {$/;"	c
md_config_t	config.cc	/^md_config_t::md_config_t(bool is_daemon)$/;"	f	class:md_config_t
md_config_t	config.h	/^struct md_config_t {$/;"	s
member_ptr_t	config.h	/^                         uuid_d md_config_t::*> member_ptr_t;$/;"	t	struct:md_config_t
mempool	buffer.cc	/^    int mempool;$/;"	m	class:buffer::raw	file:
message	ceph_json.h	/^    string message;$/;"	m	struct:JSONDecoder::err
messenger	LogClient.h	/^  Messenger *messenger;$/;"	m	class:LogClient
mime_decode_from_qp	mime.c	/^int mime_decode_from_qp(const char *input, char *output, int outlen)$/;"	f
mime_encode_as_qp	mime.c	/^int mime_encode_as_qp(const char *input, char *output, int outlen)$/;"	f
min	options.h	/^  value_t min, max;$/;"	m	struct:Option
min_bandwidth	obj_bencher.h	/^  double min_bandwidth = DBL_MAX;$/;"	m	struct:bench_interval_data
min_cost	PrioritizedQueue.h	/^  int64_t min_cost;$/;"	m	class:PrioritizedQueue
min_iops	obj_bencher.h	/^  int min_iops = INT_MAX;$/;"	m	struct:bench_interval_data
min_latency	obj_bencher.h	/^  double min_latency;$/;"	m	struct:bench_data
min_priority	AsyncReserver.h	/^  unsigned min_priority;$/;"	m	class:AsyncReserver
mix	ceph_hash.cc	9;"	d	file:
module_has_param	module.c	/^int module_has_param(const char *module, const char *param)$/;"	f
module_load	module.c	/^int module_load(const char *module, const char *options)$/;"	f
module_type	ceph_argparse.h	/^  uint32_t module_type;$/;"	m	class:CephInitParameters
monmap	LogClient.h	/^  MonMap *monmap;$/;"	m	class:LogClient
mono_clock	ceph_time.h	/^    class mono_clock {$/;"	c	namespace:ceph::time_detail
mono_time	ceph_time.h	/^  typedef mono_clock::time_point mono_time;$/;"	t	namespace:ceph
more_objects_matching_prefix	obj_bencher.cc	/^bool ObjBencher::more_objects_matching_prefix(const std::string& prefix, std::list<Object>* objects) {$/;"	f	class:ObjBencher
mp	buffer.cc	/^    struct xio_reg_mem *mp;$/;"	m	class:buffer::xio_mempool	typeref:struct:buffer::xio_mempool::xio_reg_mem	file:
msg	LogEntry.h	/^  string msg;$/;"	m	struct:LogEntry
mul_table_1272	crc32c_intel_fast_asm.s	/^mul_table_1272:$/;"	l
mul_table_1272	crc32c_intel_fast_zero_asm.s	/^mul_table_1272:$/;"	l
mul_table_152	crc32c_intel_fast_asm.s	/^mul_table_152:$/;"	l
mul_table_152	crc32c_intel_fast_zero_asm.s	/^mul_table_152:$/;"	l
mul_table_312	crc32c_intel_fast_asm.s	/^mul_table_312:$/;"	l
mul_table_312	crc32c_intel_fast_zero_asm.s	/^mul_table_312:$/;"	l
mul_table_632	crc32c_intel_fast_asm.s	/^mul_table_632:$/;"	l
mul_table_632	crc32c_intel_fast_zero_asm.s	/^mul_table_632:$/;"	l
mul_table_72	crc32c_intel_fast_asm.s	/^mul_table_72:$/;"	l
mul_table_72	crc32c_intel_fast_zero_asm.s	/^mul_table_72:$/;"	l
must_log_to_monitors	LogClient.h	/^  bool must_log_to_monitors() { return log_to_monitors; }$/;"	f	class:LogChannel
must_log_to_syslog	LogClient.h	/^  bool must_log_to_syslog() { return log_to_syslog; }$/;"	f	class:LogChannel
mutex	Mutex.h	/^    Mutex &mutex;$/;"	m	class:Mutex::Locker
mutex_debug	mutex_debug.h	/^typedef mutex_debug_detail::mutex_debug_impl<false> mutex_debug;$/;"	t	namespace:ceph
mutex_debug_detail	mutex_debug.cc	/^namespace mutex_debug_detail {$/;"	n	namespace:ceph	file:
mutex_debug_detail	mutex_debug.h	/^namespace mutex_debug_detail {$/;"	n	namespace:ceph
mutex_debug_impl	mutex_debug.h	/^  mutex_debug_impl(const std::string &n = std::string(), bool bt = false,$/;"	f	class:ceph::mutex_debug_detail::mutex_debug_impl
mutex_debug_impl	mutex_debug.h	/^class mutex_debug_impl : public mutex_debugging<mutex_debug_impl<Recursive> > {$/;"	c	namespace:ceph::mutex_debug_detail
mutex_debugging	mutex_debug.h	/^  mutex_debugging(const std::string &n = std::string(), bool bt = false,$/;"	f	class:ceph::mutex_debug_detail::mutex_debugging
mutex_debugging	mutex_debug.h	/^class mutex_debugging : public mutex_debugging_base {$/;"	c	namespace:ceph::mutex_debug_detail
mutex_debugging_base	mutex_debug.cc	/^mutex_debugging_base::mutex_debugging_base(const std::string &n, bool bt,$/;"	f	class:ceph::mutex_debug_detail::mutex_debugging_base
mutex_debugging_base	mutex_debug.h	/^class mutex_debugging_base {$/;"	c	namespace:ceph::mutex_debug_detail
mutex_recursive_debug	mutex_debug.h	/^typedef mutex_debug_detail::mutex_debug_impl<true> mutex_recursive_debug;$/;"	t	namespace:ceph
mutex_type	shunique_lock.h	/^  typedef Mutex mutex_type;$/;"	t	class:ceph::shunique_lock
my_snaps	snap_types.h	/^  vector<snapid_t> my_snaps;$/;"	m	struct:SnapRealmInfo
n_lanes	cohort_lru.h	/^      int n_lanes;$/;"	m	class:cohort::lru::LRU
n_part	cohort_lru.h	/^      int n_part;$/;"	m	class:cohort::lru::TreeX
name	HeartbeatMap.h	/^  const std::string name;$/;"	m	struct:ceph::heartbeat_handle_d
name	LogEntry.h	/^  EntityName name;$/;"	m	struct:LogEntry
name	Mutex.h	/^  std::string name;$/;"	m	class:Mutex
name	RWLock.h	/^  std::string name;$/;"	m	class:final
name	Throttle.h	/^  const std::string name;$/;"	m	class:BackoffThrottle
name	Throttle.h	/^  const std::string name;$/;"	m	class:Throttle
name	WorkQueue.h	/^    string name;$/;"	m	struct:ThreadPool::WorkQueue_
name	WorkQueue.h	/^  string name;$/;"	m	class:ShardedThreadPool
name	WorkQueue.h	/^  string name;$/;"	m	class:ThreadPool
name	ceph_argparse.h	/^  EntityName name;$/;"	m	class:CephInitParameters
name	ceph_json.h	/^  string name; \/\/ corresponds to obj_type in XMLObj$/;"	m	class:JSONObj
name	config.h	/^  EntityName name;$/;"	m	struct:md_config_t
name	mutex_debug.h	/^  std::string name;$/;"	m	class:ceph::mutex_debug_detail::mutex_debugging_base
name	options.h	/^  const std::string name;$/;"	m	struct:Option
name	perf_counters.h	/^    const char *name;$/;"	m	struct:PerfCounters::perf_counter_data_any_d
netmask_ipv4	ipaddr.cc	/^static void netmask_ipv4(const struct in_addr *addr,$/;"	f	file:
netmask_ipv6	ipaddr.cc	/^static void netmask_ipv6(const struct in6_addr *addr,$/;"	f	file:
newsection	ConfUtils.h	/^  std::string key, val, newsection;$/;"	m	class:ConfLine
next	WeightedPriorityQueue.h	/^	Kit next;$/;"	m	class:WeightedPriorityQueue::SubQueue
next	deleter.h	/^  deleter next;$/;"	m	struct:deleter::impl
next_cond	Throttle.h	/^  unsigned next_cond = 0;$/;"	m	class:BackoffThrottle
next_evict_lane	cohort_lru.h	/^      uint32_t next_evict_lane() {$/;"	f	class:cohort::lru::LRU
next_work_queue	WorkQueue.h	/^  int next_work_queue = 0;$/;"	m	class:ThreadPool
nibblewise_key_cache	hobject.h	/^  uint32_t nibblewise_key_cache;$/;"	m	struct:hobject_t
nick	perf_counters.h	/^    const char *nick;$/;"	m	struct:PerfCounters::perf_counter_data_any_d
nlock	Mutex.h	/^  int nlock;$/;"	m	class:Mutex
nlock	mutex_debug.h	/^  int nlock;$/;"	m	class:ceph::mutex_debug_detail::mutex_debugging_base
noexcept	iso_8601.h	/^  boost::string_ref s, const bool ws_terminates = true) noexcept;$/;"	m	namespace:ceph
noexcept	iso_8601.h	/^  noexcept;$/;"	m	namespace:ceph
none	shunique_lock.h	/^    none, unique, shared$/;"	m	struct:ceph::shunique_lock::ownership
normal	WeightedPriorityQueue.h	/^    Queue normal;$/;"	m	class:WeightedPriorityQueue
normalize_key_name	ConfUtils.cc	/^normalize_key_name(const std::string &key)$/;"	f	class:ConfFile
normalized_function_type	inline_variant.h	/^        typedef typename signature_of<bare_type>::type normalized_function_type;$/;"	t	struct:detail::function_arg_extractor::apply
not_fn	backport14.h	/^not_fn_result<F> not_fn(F&& fn) {$/;"	f	namespace:ceph::_backport17
not_fn_result	backport14.h	/^  explicit not_fn_result(F&& f) : fn(std::forward<F>(f)) {}$/;"	f	class:ceph::_backport17::not_fn_result
not_fn_result	backport14.h	/^class not_fn_result {$/;"	c	namespace:ceph::_backport17
notify	event_socket.h	/^  int notify() {$/;"	f	class:EventSocket
notify_post_fork	ceph_context.h	/^  void notify_post_fork() {$/;"	f	class:CephContext
notify_pre_fork	ceph_context.h	/^  void notify_pre_fork() {$/;"	f	class:CephContext
npos	sstring.hh	/^    static constexpr size_type  npos = static_cast<size_type>(-1);$/;"	m	class:basic_sstring
npos	sstring.hh	/^constexpr Size basic_sstring<char_type, Size, max_size>::npos;$/;"	m	class:basic_sstring
nref	RefCountedObj.h	/^  mutable std::atomic<uint64_t> nref;$/;"	m	struct:RefCountedObject
nref	RefCountedObj.h	/^  std::atomic<uint64_t> nref = { 1 };$/;"	m	struct:RefCountedWaitObject
nref	TrackedOp.h	/^  std::atomic_int nref = {0};  \/\/\/< ref count$/;"	m	class:TrackedOp
nref	ceph_context.h	/^  std::atomic<unsigned> nref;$/;"	m	class:CephContext
nrlock	RWLock.h	/^  mutable std::atomic<unsigned> nrlock = { 0 }, nwlock = { 0 };$/;"	m	class:final
nspace	hobject.h	/^  string nspace; \/\/ 标识特殊对象，一般为空$/;"	m	struct:hobject_t
num_buckets	QueueRing.h	/^  int num_buckets;$/;"	m	class:QueueRing
num_drained	WorkQueue.h	/^  uint32_t num_drained;$/;"	m	class:ShardedThreadPool
num_optracker_shards	TrackedOp.h	/^  uint32_t num_optracker_shards;$/;"	m	class:OpTracker
num_paused	WorkQueue.h	/^  uint32_t num_paused;$/;"	m	class:ShardedThreadPool
num_stack_items_	autovector.h	/^  size_type num_stack_items_ = 0;  \/\/ current number of items$/;"	m	class:ceph::autovector
num_threads	WorkQueue.h	/^  uint32_t num_threads;$/;"	m	class:ShardedThreadPool
num_tokens	PrioritizedQueue.h	/^    unsigned num_tokens() const {$/;"	f	struct:PrioritizedQueue::SubQueue
num_tokens	mClockPriorityQueue.h	/^      unsigned num_tokens() const {$/;"	f	struct:ceph::mClockQueue::SubQueue
nwlock	RWLock.h	/^  mutable std::atomic<unsigned> nrlock = { 0 }, nwlock = { 0 };$/;"	m	class:final
o	shunique_lock.h	/^    : m(&m), o(ownership::none) { }$/;"	f	class:ceph::shunique_lock
o	shunique_lock.h	/^  ownership o;$/;"	m	class:ceph::shunique_lock
o	shunique_lock.h	/^  shunique_lock() noexcept : m(nullptr), o(ownership::none) { }$/;"	f	class:ceph::shunique_lock
obj	deleter.h	/^  Object obj;$/;"	m	struct:final
obj	deleter.h	/^  void* obj;$/;"	m	struct:final
object	Tub.h	/^  ElementType object[0];$/;"	m	class:Tub
object_contents	obj_bencher.h	/^  char *object_contents; \/\/pointer to the contents written to each object$/;"	m	struct:bench_data
object_deleter_impl	deleter.h	/^  object_deleter_impl(deleter next, Object&& obj)$/;"	f	struct:final
object_id_wrapper	scrub_types.h	/^  object_id_wrapper(const hobject_t& hoid)$/;"	f	struct:object_id_wrapper
object_id_wrapper	scrub_types.h	/^struct object_id_wrapper : public librados::object_id_t {$/;"	s
object_size	obj_bencher.h	/^  uint64_t object_size; \/\/the size of the objects$/;"	m	struct:bench_data
obs_map_t	config.h	/^  typedef std::multimap <std::string, md_config_obs_t*> obs_map_t;$/;"	t	struct:md_config_t
observers	config.h	/^  obs_map_t observers;$/;"	m	struct:md_config_t
occupied	Tub.h	/^  bool occupied;$/;"	m	class:Tub
off112	crc32c_ppc_asm.S	/^#define off112		r31$/;"	d
off16	crc32c_ppc_asm.S	/^#define off16		r25$/;"	d
off32	crc32c_ppc_asm.S	/^#define off32		r26$/;"	d
off48	crc32c_ppc_asm.S	/^#define off48		r27$/;"	d
off64	crc32c_ppc_asm.S	/^#define off64		r28$/;"	d
off80	crc32c_ppc_asm.S	/^#define off80		r29$/;"	d
off96	crc32c_ppc_asm.S	/^#define off96		r30$/;"	d
off_type	PrebufferedStreambuf.h	/^  typedef traits_ty::off_type off_type;$/;"	t	class:PrebufferedStreambuf
oid	hobject.h	/^  object_t oid;$/;"	m	struct:hobject_t
on_finish	CommandTable.h	/^  Context      *on_finish;$/;"	m	class:CommandOp
on_finish	Continuation.h	/^  Context *on_finish;$/;"	m	class:Continuation
on_finish	Throttle.h	/^    Context *on_finish;$/;"	m	struct:OrderedThrottle::Result
on_shutdown	TrackedOp.cc	/^void OpHistory::on_shutdown()$/;"	f	class:OpHistory
on_shutdown	TrackedOp.h	/^  void on_shutdown() {$/;"	f	class:OpTracker
on_zfs	compat.cc	/^int on_zfs(int basedir_fd) {$/;"	f
only_data_digest_mismatch_info	scrub_types.h	/^  bool only_data_digest_mismatch_info() const {$/;"	f	struct:shard_info_wrapper
only_in_stack	autovector.h	/^  bool only_in_stack() const {$/;"	f	class:ceph::autovector
op_size	obj_bencher.h	/^  uint64_t op_size;     \/\/ the size of the read\/write ops$/;"	m	struct:bench_data
open_array_section	Formatter.cc	/^void JSONFormatter::open_array_section(const char *name)$/;"	f	class:ceph::JSONFormatter
open_array_section	Formatter.cc	/^void TableFormatter::open_array_section(const char *name)$/;"	f	class:ceph::TableFormatter
open_array_section	Formatter.cc	/^void XMLFormatter::open_array_section(const char *name)$/;"	f	class:ceph::XMLFormatter
open_array_section_in_ns	Formatter.cc	/^void JSONFormatter::open_array_section_in_ns(const char *name, const char *ns)$/;"	f	class:ceph::JSONFormatter
open_array_section_in_ns	Formatter.cc	/^void TableFormatter::open_array_section_in_ns(const char *name, const char *ns)$/;"	f	class:ceph::TableFormatter
open_array_section_in_ns	Formatter.cc	/^void XMLFormatter::open_array_section_in_ns(const char *name, const char *ns)$/;"	f	class:ceph::XMLFormatter
open_array_section_with_attrs	Formatter.cc	/^void TableFormatter::open_array_section_with_attrs(const char *name, const FormatterAttrs& attrs)$/;"	f	class:ceph::TableFormatter
open_array_section_with_attrs	Formatter.cc	/^void XMLFormatter::open_array_section_with_attrs(const char *name, const FormatterAttrs& attrs)$/;"	f	class:ceph::XMLFormatter
open_array_section_with_attrs	Formatter.h	/^    virtual void open_array_section_with_attrs(const char *name, const FormatterAttrs& attrs)$/;"	f	class:ceph::Formatter
open_object_section	Formatter.cc	/^void JSONFormatter::open_object_section(const char *name)$/;"	f	class:ceph::JSONFormatter
open_object_section	Formatter.cc	/^void TableFormatter::open_object_section(const char *name)$/;"	f	class:ceph::TableFormatter
open_object_section	Formatter.cc	/^void XMLFormatter::open_object_section(const char *name)$/;"	f	class:ceph::XMLFormatter
open_object_section_in_ns	Formatter.cc	/^void JSONFormatter::open_object_section_in_ns(const char *name, const char *ns)$/;"	f	class:ceph::JSONFormatter
open_object_section_in_ns	Formatter.cc	/^void TableFormatter::open_object_section_in_ns(const char *name, const char *ns)$/;"	f	class:ceph::TableFormatter
open_object_section_in_ns	Formatter.cc	/^void XMLFormatter::open_object_section_in_ns(const char *name, const char *ns)$/;"	f	class:ceph::XMLFormatter
open_object_section_with_attrs	Formatter.cc	/^void TableFormatter::open_object_section_with_attrs(const char *name, const FormatterAttrs& attrs)$/;"	f	class:ceph::TableFormatter
open_object_section_with_attrs	Formatter.cc	/^void XMLFormatter::open_object_section_with_attrs(const char *name, const FormatterAttrs& attrs)$/;"	f	class:ceph::XMLFormatter
open_object_section_with_attrs	Formatter.h	/^    virtual void open_object_section_with_attrs(const char *name, const FormatterAttrs& attrs)$/;"	f	class:ceph::Formatter
open_section	Formatter.cc	/^void JSONFormatter::open_section(const char *name, bool is_array)$/;"	f	class:ceph::JSONFormatter
open_section_in_ns	Formatter.cc	/^void TableFormatter::open_section_in_ns(const char *name, const char *ns, const FormatterAttrs *attrs)$/;"	f	class:ceph::TableFormatter
open_section_in_ns	Formatter.cc	/^void XMLFormatter::open_section_in_ns(const char *name, const char *ns, const FormatterAttrs *attrs)$/;"	f	class:ceph::XMLFormatter
operator !	bloom_filter.hpp	/^  inline bool operator!() const$/;"	f	class:bloom_filter
operator !=	autovector.h	/^    bool operator!=(const self_type& other) const { return !(*this == other); }$/;"	f	class:ceph::autovector::iterator_impl
operator !=	bit_vector.hpp	/^    inline bool operator!=(const IteratorImpl& rhs) const {$/;"	f	class:ceph::BitVector::IteratorImpl
operator !=	hobject.h	/^inline bool operator!=(const T&, const hobject_t &rhs) {$/;"	f
operator !=	hobject.h	/^inline bool operator!=(const hobject_t &lhs, const T&) {$/;"	f
operator !=	interval_map.h	/^    bool operator!=(const const_iterator &rhs) const {$/;"	f	class:interval_map::const_iterator
operator !=	sstring.hh	/^    bool operator!=(const basic_sstring& x) const {$/;"	f	class:basic_sstring
operator ()	LogEntry.h	/^    size_t operator()(const LogEntryKey& r) const {$/;"	f	struct:std::hash
operator ()	TrackedOp.h	/^    void operator()(TrackedOp *op) {$/;"	f	struct:TrackedOp::Putter
operator ()	WeightedPriorityQueue.h	/^  bool operator()(const S i, const T &k) const$/;"	f	class:MapKey
operator ()	WeightedPriorityQueue.h	/^  bool operator()(const T &k, const S i) const$/;"	f	class:MapKey
operator ()	WeightedPriorityQueue.h	/^  void operator()(T* delete_this)$/;"	f	class:DelItem
operator ()	ceph_timer.h	/^	bool operator()(const event& e1, const event& e2) const {$/;"	f	struct:ceph::timer_detail::timer::EventCompare
operator ()	ceph_timer.h	/^	bool operator()(const event& e1, const event& e2) const {$/;"	f	struct:ceph::timer_detail::timer::SchedCompare
operator ()	cmdparse.cc	/^    string operator()(T &operand) const$/;"	f	class:stringify_visitor
operator ()	config.cc	/^  void operator()( T md_config_t::* ptr) const$/;"	f	class:assign_visitor
operator ()	config.h	/^      T operator()(U & val) {$/;"	f	struct:get_typed_value_visitor
operator ()	config.h	/^      T operator()(U &val) {$/;"	f	struct:get_typed_value_visitor
operator ()	hobject.h	/^    size_t operator()(const ghobject_t &r) const {$/;"	f	struct:std::hash
operator ()	hobject.h	/^    size_t operator()(const hobject_t &r) const {$/;"	f	struct:std::hash
operator ()	lockdep.cc	/^      operator()(pthread_t __x) const$/;"	f	struct:std::hash
operator ()	perf_counters.h	/^  bool operator()(const PerfCounters* lhs, const PerfCounters* rhs) const {$/;"	f	class:SortPerfCountersByName
operator ()	shared_cache.hpp	/^    void operator()(V *ptr) {$/;"	f	class:SharedLRU::Cleanup
operator ()	sharedptr_registry.hpp	/^    void operator()(V *to_remove) {$/;"	f	class:SharedPtrRegistry::OnRemoval
operator ()	sstring.hh	/^    size_t operator()(const basic_sstring<char_type, size_type, max_size>& s) const {$/;"	f	struct:std::hash
operator *	Tub.h	/^  ElementType& operator*() {$/;"	f	class:Tub
operator *	Tub.h	/^  const ElementType& operator*() const {$/;"	f	class:Tub
operator *	autovector.h	/^    const_reference operator*() const {$/;"	f	class:ceph::autovector::iterator_impl
operator *	autovector.h	/^    reference operator*() {$/;"	f	class:ceph::autovector::iterator_impl
operator *	bit_vector.hpp	/^    inline ConstReference operator*() const {$/;"	f	class:ceph::BitVector::IteratorImpl
operator *	bit_vector.hpp	/^    inline Reference operator*() {$/;"	f	class:ceph::BitVector::IteratorImpl
operator *	bounded_key_counter.h	/^    reference operator*() const {$/;"	f	struct:BoundedKeyCounter::const_pointer_iterator
operator *	buffer.cc	/^  char buffer::list::iterator::operator*()$/;"	f	class:buffer::list::iterator
operator *	buffer.cc	/^  char buffer::list::iterator_impl<is_const>::operator*() const$/;"	f	class:buffer::list::iterator_impl
operator *	ceph_json.cc	/^JSONObj *JSONObjIter::operator*()$/;"	f	class:JSONObjIter
operator *	interval_map.h	/^    const_iterator &operator*() {$/;"	f	class:interval_map::const_iterator
operator *	tracked_int_ptr.hpp	/^  T &operator*() const {$/;"	f	class:TrackedIntPtr
operator +	autovector.h	/^    self_type operator+(difference_type len) const {$/;"	f	class:ceph::autovector::iterator_impl
operator +	bit_vector.hpp	/^    inline IteratorImpl operator+(uint64_t offset) {$/;"	f	class:ceph::BitVector::IteratorImpl
operator +	sstring.hh	/^    basic_sstring operator+(const basic_sstring& x) const {$/;"	f	class:basic_sstring
operator +	sstring.hh	/^operator+(const char(&s)[N], const basic_sstring<char_type, size_type, Max>& t) {$/;"	f
operator ++	autovector.h	/^    self_type operator++(int) {$/;"	f	class:ceph::autovector::iterator_impl
operator ++	autovector.h	/^    self_type& operator++() {$/;"	f	class:ceph::autovector::iterator_impl
operator ++	bit_vector.hpp	/^    inline IteratorImpl operator++(int) {$/;"	f	class:ceph::BitVector::IteratorImpl
operator ++	bit_vector.hpp	/^    inline IteratorImpl& operator++() {$/;"	f	class:ceph::BitVector::IteratorImpl
operator ++	buffer.cc	/^  buffer::list::iterator& buffer::list::iterator::operator++()$/;"	f	class:buffer::list::iterator
operator ++	buffer.cc	/^  buffer::list::iterator_impl<is_const>::operator++()$/;"	f	class:buffer::list::iterator_impl
operator ++	ceph_json.cc	/^void JSONObjIter::operator++()$/;"	f	class:JSONObjIter
operator ++	interval_map.h	/^    const_iterator &operator++() {$/;"	f	class:interval_map::const_iterator
operator ++	interval_map.h	/^    const_iterator operator++(int) {$/;"	f	class:interval_map::const_iterator
operator +=	autovector.h	/^    self_type& operator+=(difference_type len) {$/;"	f	class:ceph::autovector::iterator_impl
operator +=	bit_vector.hpp	/^    inline IteratorImpl& operator+=(uint64_t offset) {$/;"	f	class:ceph::BitVector::IteratorImpl
operator +=	sstring.hh	/^    basic_sstring& operator+=(const basic_sstring& x) {$/;"	f	class:basic_sstring
operator -	autovector.h	/^    difference_type operator-(const self_type& other) const {$/;"	f	class:ceph::autovector::iterator_impl
operator -	autovector.h	/^    self_type operator-(difference_type len) const {$/;"	f	class:ceph::autovector::iterator_impl
operator -	ceph_time.h	/^    inline signedspan operator -(coarse_mono_time minuend,$/;"	f	namespace:ceph::__anon16
operator -	ceph_time.h	/^    inline signedspan operator -(coarse_real_time minuend,$/;"	f	namespace:ceph::__anon16
operator -	ceph_time.h	/^    inline signedspan operator -(mono_time minuend,$/;"	f	namespace:ceph::__anon16
operator -	ceph_time.h	/^    inline signedspan operator -(real_time minuend,$/;"	f	namespace:ceph::__anon16
operator --	autovector.h	/^    self_type operator--(int) {$/;"	f	class:ceph::autovector::iterator_impl
operator --	autovector.h	/^    self_type& operator--() {$/;"	f	class:ceph::autovector::iterator_impl
operator --	interval_map.h	/^    const_iterator &operator--() {$/;"	f	class:interval_map::const_iterator
operator --	interval_map.h	/^    const_iterator operator--(int) {$/;"	f	class:interval_map::const_iterator
operator -=	autovector.h	/^    self_type& operator-=(difference_type len) {$/;"	f	class:ceph::autovector::iterator_impl
operator ->	Tub.h	/^  ElementType* operator->() {$/;"	f	class:Tub
operator ->	Tub.h	/^  const ElementType* operator->() const {$/;"	f	class:Tub
operator ->	autovector.h	/^    const_pointer operator->() const {$/;"	f	class:ceph::autovector::iterator_impl
operator ->	autovector.h	/^    pointer operator->() {$/;"	f	class:ceph::autovector::iterator_impl
operator ->	tracked_int_ptr.hpp	/^  T *operator->() const {$/;"	f	class:TrackedIntPtr
operator <	ConfUtils.cc	/^operator<(const ConfLine &rhs) const$/;"	f	class:ConfLine
operator <	WeightedPriorityQueue.h	/^      friend bool operator< (const Klass &a, const Klass &b)$/;"	f	class:WeightedPriorityQueue::Klass
operator <	WeightedPriorityQueue.h	/^      friend bool operator< (const SubQueue &a, const SubQueue &b)$/;"	f	class:WeightedPriorityQueue::SubQueue
operator <	autovector.h	/^    bool operator<(const self_type& other) const {$/;"	f	class:ceph::autovector::iterator_impl
operator <	ceph_timer.h	/^	bool operator <(const event& e) {$/;"	f	struct:ceph::timer_detail::timer::event
operator <	entity_name.cc	/^bool operator<(const EntityName& a, const EntityName& b)$/;"	f
operator <	hobject.h	/^  friend bool operator<(const ghobject_t& l, const ghobject_t& r) {$/;"	f	struct:ghobject_t
operator <	hobject.h	/^  friend bool operator<(const hobject_t& l, const hobject_t& r) {$/;"	f	struct:hobject_t
operator <	sstring.hh	/^    bool operator<(const basic_sstring& x) const {$/;"	f	class:basic_sstring
operator <	tracked_int_ptr.hpp	/^  bool operator<(const TrackedIntPtr &lhs) const {$/;"	f	class:TrackedIntPtr
operator <<	AsyncReserver.h	/^    friend ostream& operator<<(ostream& out, const Reservation& r) {$/;"	f	struct:AsyncReserver::Reservation
operator <<	BackTrace.h	/^inline std::ostream& operator<<(std::ostream& out, const BackTrace& bt) {$/;"	f	namespace:ceph
operator <<	ConfUtils.cc	/^std::ostream &operator<<(std::ostream &oss, const ConfFile &cf)$/;"	f
operator <<	ConfUtils.cc	/^std::ostream &operator<<(std::ostream& oss, const ConfLine &l)$/;"	f
operator <<	LogClient.h	/^  std::ostream& operator<<(const T& rhs)$/;"	f	class:LogClientTemp
operator <<	LogEntry.h	/^inline ostream& operator<<(ostream& out, const LogEntry& e)$/;"	f
operator <<	LogEntry.h	/^inline ostream& operator<<(ostream& out, const clog_type t)$/;"	f
operator <<	TextTable.cc	/^std::ostream &operator<<(std::ostream &out, const TextTable &t)$/;"	f
operator <<	TextTable.h	/^  TextTable &operator<<(endrow_t)$/;"	f	class:TextTable
operator <<	TextTable.h	/^  template<typename T> TextTable& operator<<(const T& item)$/;"	f	class:TextTable
operator <<	bit_vector.hpp	/^inline std::ostream& operator<<(std::ostream& out, const ceph::BitVector<_b> &b)$/;"	f
operator <<	buffer.cc	/^std::ostream& buffer::operator<<(std::ostream& out, const buffer::error& e)$/;"	f	class:buffer
operator <<	buffer.cc	/^std::ostream& buffer::operator<<(std::ostream& out, const buffer::list& bl) {$/;"	f	class:buffer
operator <<	buffer.cc	/^std::ostream& buffer::operator<<(std::ostream& out, const buffer::ptr& bp) {$/;"	f	class:buffer
operator <<	buffer.cc	/^std::ostream& buffer::operator<<(std::ostream& out, const buffer::raw &r) {$/;"	f	class:buffer
operator <<	ceph_json.cc	/^ostream& operator<<(ostream &out, const JSONObj &obj) {$/;"	f
operator <<	ceph_time.cc	/^  std::ostream& operator<<(std::ostream& m, const timespan& t) {$/;"	f	namespace:ceph
operator <<	ceph_time.cc	/^  std::ostream& operator<<(std::ostream& m,$/;"	f	namespace:ceph
operator <<	code_environment.cc	/^std::ostream &operator<<(std::ostream &oss, const enum code_environment_t e)$/;"	f
operator <<	config.h	/^inline std::ostream& operator<<(std::ostream& o, const boost::blank& ) {$/;"	f
operator <<	dout.h	/^inline std::ostream& operator<<(std::ostream& out, _bad_endl_use_dendl_t) {$/;"	f
operator <<	entity_name.cc	/^std::ostream& operator<<(std::ostream& out, const EntityName& n)$/;"	f
operator <<	fs_types.cc	/^ostream& operator<<(ostream& out, const file_layout_t &layout)$/;"	f
operator <<	hobject.cc	/^ostream& operator<<(ostream& out, const ghobject_t& o)$/;"	f
operator <<	hobject.cc	/^ostream& operator<<(ostream& out, const hobject_t& o)$/;"	f
operator <<	interval_map.h	/^std::ostream &operator<<(std::ostream &out, const interval_map<K, V, S> &m) {$/;"	f
operator <<	snap_types.h	/^inline ostream& operator<<(ostream& out, const SnapContext& snapc) {$/;"	f
operator <<	sstring.hh	/^operator<<(std::basic_ostream<char_type, char_traits>& os,$/;"	f
operator <<	types.cc	/^ostream &operator<<(ostream &lhs, const shard_id_t &rhs)$/;"	f
operator <=	autovector.h	/^    bool operator<=(const self_type& other) const {$/;"	f	class:ceph::autovector::iterator_impl
operator <=	hobject.h	/^  friend bool operator<=(const ghobject_t& l, const ghobject_t& r) {$/;"	f	struct:ghobject_t
operator <=	hobject.h	/^  friend bool operator<=(const hobject_t& l, const hobject_t& r) {$/;"	f	struct:hobject_t
operator =	Tub.h	/^  Tub<ElementType>& operator=(ElementType &&elt) {$/;"	f	class:Tub
operator =	Tub.h	/^  Tub<ElementType>& operator=(Tub<ElementType> &&other) {$/;"	f	class:Tub
operator =	Tub.h	/^  Tub<ElementType>& operator=(const Tub<ElementType>& other) {$/;"	f	class:Tub
operator =	autovector.h	/^  autovector& operator=(const autovector& other) { return assign(other); }$/;"	f	class:ceph::autovector
operator =	bit_vector.hpp	/^typename BitVector<_b>::Reference& BitVector<_b>::Reference::operator=(uint8_t v) {$/;"	f	class:ceph::BitVector::Reference
operator =	bloom_filter.hpp	/^  bloom_filter& operator = (const bloom_filter& filter)$/;"	f	class:bloom_filter
operator =	buffer.cc	/^  buffer::ptr& buffer::ptr::operator= (const ptr& p)$/;"	f	class:buffer::ptr
operator =	deleter.h	/^inline deleter& deleter::operator=(deleter&& x) {$/;"	f	class:deleter
operator =	hobject.h	/^  hobject_t &operator=(hobject_t_max &&singleton) {$/;"	f	struct:hobject_t
operator =	sstring.hh	/^    basic_sstring& operator=(const basic_sstring& x) {$/;"	f	class:basic_sstring
operator =	tracked_int_ptr.hpp	/^  void operator=(const TrackedIntPtr &rhs) {$/;"	f	class:TrackedIntPtr
operator ==	LogEntry.h	/^  friend bool operator==(const LogEntryKey& l, const LogEntryKey& r) {$/;"	f	struct:LogEntryKey
operator ==	WeightedPriorityQueue.h	/^      friend bool operator== (const Klass &a, const Klass &b)$/;"	f	class:WeightedPriorityQueue::Klass
operator ==	WeightedPriorityQueue.h	/^      friend bool operator== (const SubQueue &a, const SubQueue &b)$/;"	f	class:WeightedPriorityQueue::SubQueue
operator ==	autovector.h	/^    bool operator==(const self_type& other) const {$/;"	f	class:ceph::autovector::iterator_impl
operator ==	bit_vector.hpp	/^    inline bool operator==(const IteratorImpl& rhs) const {$/;"	f	class:ceph::BitVector::IteratorImpl
operator ==	bit_vector.hpp	/^bool BitVector<_b>::operator==(const BitVector &b) const {$/;"	f	class:ceph::BitVector
operator ==	histogram.h	/^  bool operator==(const pow2_hist_t &r) const {$/;"	f	struct:pow2_hist_t
operator ==	hobject.h	/^inline bool operator==(const T&, const hobject_t &rhs) {$/;"	f
operator ==	hobject.h	/^inline bool operator==(const hobject_t &lhs, const T&) {$/;"	f
operator ==	interval_map.h	/^    bool operator==(const const_iterator &rhs) const {$/;"	f	class:interval_map::const_iterator
operator ==	interval_map.h	/^  bool operator==(const interval_map &rhs) const {$/;"	f	class:interval_map
operator ==	sstring.hh	/^    bool operator==(const basic_sstring& x) const {$/;"	f	class:basic_sstring
operator ==	tracked_int_ptr.hpp	/^  bool operator==(const TrackedIntPtr &lhs) const {$/;"	f	class:TrackedIntPtr
operator >	WeightedPriorityQueue.h	/^      friend bool operator> (const Klass &a, const Klass &b)$/;"	f	class:WeightedPriorityQueue::Klass
operator >	WeightedPriorityQueue.h	/^      friend bool operator> (const SubQueue &a, const SubQueue &b)$/;"	f	class:WeightedPriorityQueue::SubQueue
operator >	autovector.h	/^    bool operator>(const self_type& other) const {$/;"	f	class:ceph::autovector::iterator_impl
operator >	hobject.h	/^  friend bool operator>(const ghobject_t& l, const ghobject_t& r) {$/;"	f	struct:ghobject_t
operator >	hobject.h	/^  friend bool operator>(const hobject_t& l, const hobject_t& r) {$/;"	f	struct:hobject_t
operator >=	autovector.h	/^    bool operator>=(const self_type& other) const {$/;"	f	class:ceph::autovector::iterator_impl
operator >=	hobject.h	/^  friend bool operator>=(const ghobject_t& l, const ghobject_t& r) {$/;"	f	struct:ghobject_t
operator >=	hobject.h	/^  friend bool operator>=(const hobject_t& l, const hobject_t& r) {$/;"	f	struct:hobject_t
operator >>	sstring.hh	/^operator>>(std::basic_istream<char_type, char_traits>& is,$/;"	f
operator []	autovector.h	/^  const_reference operator[](size_type n) const {$/;"	f	class:ceph::autovector
operator []	autovector.h	/^  reference operator[](size_type n) {$/;"	f	class:ceph::autovector
operator []	bit_vector.hpp	/^typename BitVector<_b>::ConstReference BitVector<_b>::operator[](uint64_t offset) const {$/;"	f	class:ceph::BitVector
operator []	bit_vector.hpp	/^typename BitVector<_b>::Reference BitVector<_b>::operator[](uint64_t offset) {$/;"	f	class:ceph::BitVector
operator []	buffer.cc	/^  char& buffer::ptr::operator[](unsigned n)$/;"	f	class:buffer::ptr
operator []	buffer.cc	/^  const char& buffer::list::operator[](unsigned n) const$/;"	f	class:buffer::list
operator []	buffer.cc	/^  const char& buffer::ptr::operator[](unsigned n) const$/;"	f	class:buffer::ptr
operator []	sstring.hh	/^    char_type& operator[](size_type pos) {$/;"	f	class:basic_sstring
operator []	sstring.hh	/^    const char_type& operator[](size_type pos) const {$/;"	f	class:basic_sstring
operator bool	Tub.h	/^  operator bool() const {$/;"	f	class:Tub
operator bool	deleter.h	/^  explicit operator bool() const { return bool(_impl); }$/;"	f	class:final
operator bool	mutex_debug.h	/^  operator bool() const {$/;"	f	class:ceph::mutex_debug_detail::mutex_debugging_base
operator bool	tracked_int_ptr.hpp	/^  operator bool() const {$/;"	f	class:TrackedIntPtr
operator bool	zipkin_trace.h	/^  operator bool() const { return false; }$/;"	f	class:ZTracer::Trace
operator boost::basic_string_view<char_type, traits_type>	sstring.hh	/^    operator boost::basic_string_view<char_type, traits_type>() const {$/;"	f	class:basic_sstring
operator delete	buffer.cc	/^    static void operator delete(void *p)$/;"	f	class:buffer::xio_msg_buffer
operator delete	buffer.cc	/^    static void operator delete(void *ptr) {$/;"	f	class:buffer::raw_combined
operator float	ceph_argparse.cc	/^  inline operator float() const$/;"	f	struct:strict_str_convert
operator int	ceph_argparse.cc	/^  inline operator int() const$/;"	f	struct:strict_str_convert
operator long long	ceph_argparse.cc	/^  inline operator long long() const$/;"	f	struct:strict_str_convert
operator std::basic_string<char_type>	sstring.hh	/^    operator std::basic_string<char_type>() const {$/;"	f	class:basic_sstring
operator uint8_t	bit_vector.hpp	/^    inline operator uint8_t() const {$/;"	f	class:ceph::BitVector::ReferenceImpl
ops_history_lock	TrackedOp.h	/^  Mutex ops_history_lock;$/;"	m	class:OpHistory
ops_in_flight_lock_sharded	TrackedOp.cc	/^  Mutex ops_in_flight_lock_sharded;$/;"	m	struct:ShardedTrackingData	file:
ops_in_flight_sharded	TrackedOp.cc	/^  TrackedOp::tracked_op_list_t ops_in_flight_sharded;$/;"	m	struct:ShardedTrackingData	file:
opt_type_t	config.h	/^   } opt_type_t;$/;"	t	struct:md_config_t	typeref:enum:md_config_t::__anon12
options	ceph_crypto_cms.cc	/^    struct optionsStr *options;$/;"	m	struct:decodeOptionsStr	typeref:struct:decodeOptionsStr::optionsStr	file:
optionsStr	ceph_crypto_cms.cc	/^struct optionsStr {$/;"	s	file:
os_release_parse	util.cc	/^static bool os_release_parse(map<string, string> *m, CephContext *cct)$/;"	f	file:
osd_shard_wrapper	scrub_types.h	/^struct osd_shard_wrapper : public librados::osd_shard_t {$/;"	s
osd_trace	TrackedOp.h	/^  ZTracer::Trace osd_trace;$/;"	m	class:TrackedOp
other	RWLock.h	/^  RWLock(const RWLock& other) = delete;$/;"	m	class:final
other	RWLock.h	/^  const RWLock& operator=(const RWLock& other) = delete;$/;"	m	class:final
other	inline_variant.h	/^    generic_visitor(BOOST_RV_REF(type) other)$/;"	m	struct:detail::generic_visitor
out	obj_bencher.cc	/^ostream& ObjBencher::out(ostream& os)$/;"	f	class:ObjBencher
out	obj_bencher.cc	/^ostream& ObjBencher::out(ostream& os, utime_t& t)$/;"	f	class:ObjBencher
outbl	CommandTable.h	/^  bufferlist   *outbl;$/;"	m	class:CommandOp
output_footer	Formatter.cc	/^void XMLFormatter::output_footer()$/;"	f	class:ceph::XMLFormatter
output_header	Formatter.cc	/^void XMLFormatter::output_header()$/;"	f	class:ceph::XMLFormatter
output_header	HTMLFormatter.cc	/^void HTMLFormatter::output_header() {$/;"	f	class:ceph::HTMLFormatter
outs	CommandTable.h	/^  std::string  *outs;$/;"	m	class:CommandOp
outstream	obj_bencher.h	/^  ostream *outstream = NULL;$/;"	m	class:ObjBencher
overflow	PrebufferedStreambuf.cc	/^PrebufferedStreambuf::int_type PrebufferedStreambuf::overflow(int_type c)$/;"	f	class:PrebufferedStreambuf
override	Formatter.h	/^    int get_len() const override;$/;"	m	class:ceph::JSONFormatter
override	Formatter.h	/^    int get_len() const override;$/;"	m	class:ceph::TableFormatter
override	Formatter.h	/^    int get_len() const override;$/;"	m	class:ceph::XMLFormatter
override	Formatter.h	/^    std::ostream& dump_stream(const char *name) override;$/;"	m	class:ceph::JSONFormatter
override	Formatter.h	/^    std::ostream& dump_stream(const char *name) override;$/;"	m	class:ceph::TableFormatter
override	Formatter.h	/^    std::ostream& dump_stream(const char *name) override;$/;"	m	class:ceph::XMLFormatter
override	Formatter.h	/^    void close_section() override;$/;"	m	class:ceph::JSONFormatter
override	Formatter.h	/^    void close_section() override;$/;"	m	class:ceph::TableFormatter
override	Formatter.h	/^    void close_section() override;$/;"	m	class:ceph::XMLFormatter
override	Formatter.h	/^    void dump_float(const char *name, double d) override;$/;"	m	class:ceph::JSONFormatter
override	Formatter.h	/^    void dump_float(const char *name, double d) override;$/;"	m	class:ceph::TableFormatter
override	Formatter.h	/^    void dump_float(const char *name, double d) override;$/;"	m	class:ceph::XMLFormatter
override	Formatter.h	/^    void dump_format_va(const char *name, const char *ns, bool quoted, const char *fmt, va_list ap) override;$/;"	m	class:ceph::JSONFormatter
override	Formatter.h	/^    void dump_format_va(const char *name, const char *ns, bool quoted, const char *fmt, va_list ap) override;$/;"	m	class:ceph::TableFormatter
override	Formatter.h	/^    void dump_format_va(const char *name, const char *ns, bool quoted, const char *fmt, va_list ap) override;$/;"	m	class:ceph::XMLFormatter
override	Formatter.h	/^    void dump_int(const char *name, int64_t u) override;$/;"	m	class:ceph::JSONFormatter
override	Formatter.h	/^    void dump_int(const char *name, int64_t u) override;$/;"	m	class:ceph::TableFormatter
override	Formatter.h	/^    void dump_int(const char *name, int64_t u) override;$/;"	m	class:ceph::XMLFormatter
override	Formatter.h	/^    void dump_string(const char *name, boost::string_view s) override;$/;"	m	class:ceph::JSONFormatter
override	Formatter.h	/^    void dump_string(const char *name, boost::string_view s) override;$/;"	m	class:ceph::TableFormatter
override	Formatter.h	/^    void dump_string(const char *name, boost::string_view s) override;$/;"	m	class:ceph::XMLFormatter
override	Formatter.h	/^    void dump_string_with_attrs(const char *name, boost::string_view s, const FormatterAttrs& attrs) override;$/;"	m	class:ceph::TableFormatter
override	Formatter.h	/^    void dump_string_with_attrs(const char *name, boost::string_view s, const FormatterAttrs& attrs) override;$/;"	m	class:ceph::XMLFormatter
override	Formatter.h	/^    void dump_unsigned(const char *name, uint64_t u) override;$/;"	m	class:ceph::JSONFormatter
override	Formatter.h	/^    void dump_unsigned(const char *name, uint64_t u) override;$/;"	m	class:ceph::TableFormatter
override	Formatter.h	/^    void dump_unsigned(const char *name, uint64_t u) override;$/;"	m	class:ceph::XMLFormatter
override	Formatter.h	/^    void flush(std::ostream& os) override;$/;"	m	class:ceph::JSONFormatter
override	Formatter.h	/^    void flush(std::ostream& os) override;$/;"	m	class:ceph::TableFormatter
override	Formatter.h	/^    void flush(std::ostream& os) override;$/;"	m	class:ceph::XMLFormatter
override	Formatter.h	/^    void open_array_section(const char *name) override;$/;"	m	class:ceph::JSONFormatter
override	Formatter.h	/^    void open_array_section(const char *name) override;$/;"	m	class:ceph::TableFormatter
override	Formatter.h	/^    void open_array_section(const char *name) override;$/;"	m	class:ceph::XMLFormatter
override	Formatter.h	/^    void open_array_section_in_ns(const char *name, const char *ns) override;$/;"	m	class:ceph::JSONFormatter
override	Formatter.h	/^    void open_array_section_in_ns(const char *name, const char *ns) override;$/;"	m	class:ceph::TableFormatter
override	Formatter.h	/^    void open_array_section_in_ns(const char *name, const char *ns) override;$/;"	m	class:ceph::XMLFormatter
override	Formatter.h	/^    void open_array_section_with_attrs(const char *name, const FormatterAttrs& attrs) override;$/;"	m	class:ceph::TableFormatter
override	Formatter.h	/^    void open_array_section_with_attrs(const char *name, const FormatterAttrs& attrs) override;$/;"	m	class:ceph::XMLFormatter
override	Formatter.h	/^    void open_object_section(const char *name) override;$/;"	m	class:ceph::JSONFormatter
override	Formatter.h	/^    void open_object_section(const char *name) override;$/;"	m	class:ceph::TableFormatter
override	Formatter.h	/^    void open_object_section(const char *name) override;$/;"	m	class:ceph::XMLFormatter
override	Formatter.h	/^    void open_object_section_in_ns(const char *name, const char *ns) override;$/;"	m	class:ceph::JSONFormatter
override	Formatter.h	/^    void open_object_section_in_ns(const char *name, const char *ns) override;$/;"	m	class:ceph::TableFormatter
override	Formatter.h	/^    void open_object_section_in_ns(const char *name, const char *ns) override;$/;"	m	class:ceph::XMLFormatter
override	Formatter.h	/^    void open_object_section_with_attrs(const char *name, const FormatterAttrs& attrs) override;$/;"	m	class:ceph::TableFormatter
override	Formatter.h	/^    void open_object_section_with_attrs(const char *name, const FormatterAttrs& attrs) override;$/;"	m	class:ceph::XMLFormatter
override	Formatter.h	/^    void output_footer() override;$/;"	m	class:ceph::XMLFormatter
override	Formatter.h	/^    void output_header() override;$/;"	m	class:ceph::XMLFormatter
override	Formatter.h	/^    void reset() override;$/;"	m	class:ceph::JSONFormatter
override	Formatter.h	/^    void reset() override;$/;"	m	class:ceph::TableFormatter
override	Formatter.h	/^    void reset() override;$/;"	m	class:ceph::XMLFormatter
override	Formatter.h	/^    void write_raw_data(const char *data) override;$/;"	m	class:ceph::JSONFormatter
override	Formatter.h	/^    void write_raw_data(const char *data) override;$/;"	m	class:ceph::TableFormatter
override	Formatter.h	/^    void write_raw_data(const char *data) override;$/;"	m	class:ceph::XMLFormatter
override	HTMLFormatter.h	/^    std::ostream& dump_stream(const char *name) override;$/;"	m	class:ceph::HTMLFormatter
override	HTMLFormatter.h	/^    void dump_float(const char *name, double d) override;$/;"	m	class:ceph::HTMLFormatter
override	HTMLFormatter.h	/^    void dump_format_va(const char *name, const char *ns, bool quoted, const char *fmt, va_list ap) override;$/;"	m	class:ceph::HTMLFormatter
override	HTMLFormatter.h	/^    void dump_int(const char *name, int64_t u) override;$/;"	m	class:ceph::HTMLFormatter
override	HTMLFormatter.h	/^    void dump_string(const char *name, boost::string_view s) override;$/;"	m	class:ceph::HTMLFormatter
override	HTMLFormatter.h	/^    void dump_string_with_attrs(const char *name, boost::string_view s, const FormatterAttrs& attrs) override;$/;"	m	class:ceph::HTMLFormatter
override	HTMLFormatter.h	/^    void dump_unsigned(const char *name, uint64_t u) override;$/;"	m	class:ceph::HTMLFormatter
override	HTMLFormatter.h	/^    void output_header() override;$/;"	m	class:ceph::HTMLFormatter
override	HTMLFormatter.h	/^    void reset() override;$/;"	m	class:ceph::HTMLFormatter
override	HTMLFormatter.h	/^    void set_status(int status, const char* status_name) override;$/;"	m	class:ceph::HTMLFormatter
override	HTMLFormatter.h	/^    ~HTMLFormatter() override;$/;"	m	class:ceph::HTMLFormatter
override	OutputDataSocket.h	/^  void *entry() override;$/;"	m	class:OutputDataSocket
override	OutputDataSocket.h	/^  ~OutputDataSocket() override;$/;"	m	class:OutputDataSocket
override	PrebufferedStreambuf.h	/^  int_type overflow(int_type c) override;$/;"	m	class:PrebufferedStreambuf
override	PrebufferedStreambuf.h	/^  int_type underflow() override;$/;"	m	class:PrebufferedStreambuf
override	SubProcess.h	/^  void exec() override;$/;"	m	class:SubProcessTimed
override	Throttle.h	/^  void finish(int r) override;$/;"	m	class:C_OrderedThrottle
override	TracepointProvider.h	/^                                  const std::set <std::string> &changed) override;$/;"	m	class:TracepointProvider
override	TracepointProvider.h	/^  ~TracepointProvider() override;$/;"	m	class:TracepointProvider
override	WorkQueue.h	/^			  const std::set <std::string> &changed) override;$/;"	m	class:ThreadPool
override	WorkQueue.h	/^    bool _empty() override = 0;$/;"	m	class:ThreadPool::WorkQueueVal
override	WorkQueue.h	/^  ~ThreadPool() override;$/;"	m	class:ThreadPool
override	admin_socket.h	/^  void *entry() override;$/;"	m	class:AdminSocket
override	admin_socket.h	/^  ~AdminSocket() override;$/;"	m	class:AdminSocket
override	ceph_json.h	/^  ~JSONParser() override;$/;"	m	class:JSONParser
ownership	shunique_lock.h	/^  enum struct ownership : uint8_t {$/;"	s	class:ceph::shunique_lock
p	cohort_lru.h	/^	Partition* p;$/;"	m	struct:cohort::lru::TreeX::Latch
pad	TextTable.cc	/^pad(string s, int width, TextTable::Align align)$/;"	f	file:
pad	sstring.hh	/^            int8_t pad;$/;"	m	struct:basic_sstring::contents::external_type
pair_list	inline_variant.h	/^	>::type pair_list;$/;"	t	struct:detail::generic_visitor
parameter_type	inline_variant.h	/^        typedef typename boost::mpl::front<parameter_types>::type parameter_type;$/;"	t	struct:detail::function_arg_extractor::apply
parameter_types	function_signature.h	/^    typedef typename boost::function_types::parameter_types<F>::type parameter_types;$/;"	t	struct:signature_of_member
parameter_types	inline_variant.h	/^        typedef typename boost::function_types::parameter_types<normalized_function_type>::type parameter_types;$/;"	t	struct:detail::function_arg_extractor::apply
parent	LogClient.h	/^  LogChannel &parent;$/;"	m	class:LogClientTemp
parent	LogClient.h	/^  LogClient *parent;$/;"	m	class:LogChannel
parent	Timer.cc	/^  SafeTimer *parent;$/;"	m	class:SafeTimerThread	file:
parent	ceph_json.h	/^  JSONObj *parent;$/;"	m	class:JSONObj
parent	sharedptr_registry.hpp	/^    SharedPtrRegistry<K,V,C> *parent;$/;"	m	class:SharedPtrRegistry::OnRemoval
parent	snap_types.h	/^  inodeno_t parent() const { return inodeno_t(h.parent); }$/;"	f	struct:SnapRealmInfo
parent_since	snap_types.h	/^  snapid_t parent_since() const { return snapid_t(h.parent_since); }$/;"	f	struct:SnapRealmInfo
parent_span_id	zipkin_trace.h	/^    int64_t parent_span_id;$/;"	m	struct:blkin_trace_info
parent_wait	Preforker.h	/^  int parent_wait(std::string &err_msg) {$/;"	f	class:Preforker
parse	ceph_json.cc	/^bool JSONParser::parse()$/;"	f	class:JSONParser
parse	ceph_json.cc	/^bool JSONParser::parse(const char *buf_, int len)$/;"	f	class:JSONParser
parse	ceph_json.cc	/^bool JSONParser::parse(const char *file_name)$/;"	f	class:JSONParser
parse	ceph_json.cc	/^bool JSONParser::parse(int len)$/;"	f	class:JSONParser
parse	hobject.cc	/^bool ghobject_t::parse(const string& s)$/;"	f	class:ghobject_t
parse	hobject.cc	/^bool hobject_t::parse(const string &s)$/;"	f	class:hobject_t
parse_argv	config.cc	/^int md_config_t::parse_argv(std::vector<const char*>& args)$/;"	f	class:md_config_t
parse_bufferlist	ConfUtils.cc	/^parse_bufferlist(ceph::bufferlist *bl, std::deque<std::string> *errors,$/;"	f	class:ConfFile
parse_config_files	config.cc	/^int md_config_t::parse_config_files(const char *conf_files,$/;"	f	class:md_config_t
parse_config_files_impl	config.cc	/^int md_config_t::parse_config_files_impl(const std::list<std::string> &conf_files,$/;"	f	class:md_config_t
parse_env	config.cc	/^void md_config_t::parse_env()$/;"	f	class:md_config_t
parse_errors	config.h	/^  std::deque<std::string> parse_errors;$/;"	m	struct:md_config_t
parse_file	ConfUtils.cc	/^parse_file(const std::string &fname, std::deque<std::string> *errors,$/;"	f	class:ConfFile
parse_injectargs	config.cc	/^int md_config_t::parse_injectargs(std::vector<const char*>& args,$/;"	f	class:md_config_t
parse_ip_port_vec	ceph_argparse.cc	/^bool parse_ip_port_vec(const char *s, vector<entity_addr_t>& vec)$/;"	f
parse_log_client_options	LogClient.cc	/^int parse_log_client_options(CephContext *cct,$/;"	f
parse_network	ipaddr.cc	/^bool parse_network(const char *s, struct sockaddr_storage *network, unsigned int *prefix_len) {$/;"	f
parse_option	config.cc	/^int md_config_t::parse_option(std::vector<const char*>& args,$/;"	f	class:md_config_t
parse_osd_id	cmdparse.cc	/^int parse_osd_id(const char *s, std::ostream *pss)$/;"	f
parse_pos_long	cmdparse.cc	/^long parse_pos_long(const char *s, std::ostream *pss)$/;"	f
parser	ceph_json.h	/^  JSONParser parser;$/;"	m	class:JSONDecoder
part	cohort_lru.h	/^      Partition *part;$/;"	m	class:cohort::lru::TreeX
partition_of_scalar	cohort_lru.h	/^      Partition& partition_of_scalar(uint64_t x) {$/;"	f	class:cohort::lru::TreeX
past_midpoint	Throttle.h	/^  bool past_midpoint() const {$/;"	f	class:Throttle
pause	WorkQueue.cc	/^void ShardedThreadPool::pause()$/;"	f	class:ShardedThreadPool
pause	WorkQueue.cc	/^void ThreadPool::pause()$/;"	f	class:ThreadPool
pause_new	WorkQueue.cc	/^void ShardedThreadPool::pause_new()$/;"	f	class:ShardedThreadPool
pause_new	WorkQueue.cc	/^void ThreadPool::pause_new()$/;"	f	class:ThreadPool
pause_threads	WorkQueue.h	/^  std::atomic<bool> pause_threads = { false };$/;"	m	class:ShardedThreadPool
pdout	ceph_argparse.cc	30;"	d	file:
pdout	config.cc	32;"	d	file:
pdout	debug.h	25;"	d
peak	MemoryModel.h	/^    long peak;$/;"	m	struct:MemoryModel::snap
pem_key	armor.c	/^const char *pem_key = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+\/";$/;"	v
pending_error	Throttle.cc	/^bool OrderedThrottle::pending_error() const {$/;"	f	class:OrderedThrottle
pending_error	Throttle.cc	/^bool SimpleThrottle::pending_error() const$/;"	f	class:SimpleThrottle
per_second	Cycles.cc	/^double Cycles::per_second()$/;"	f	class:Cycles
perf_counter_data_any_d	perf_counters.h	/^    perf_counter_data_any_d()$/;"	f	struct:PerfCounters::perf_counter_data_any_d
perf_counter_data_any_d	perf_counters.h	/^    perf_counter_data_any_d(const perf_counter_data_any_d& other)$/;"	f	struct:PerfCounters::perf_counter_data_any_d
perf_counter_data_any_d	perf_counters.h	/^  struct perf_counter_data_any_d {$/;"	s	class:PerfCounters
perf_counter_data_vec_t	perf_counters.h	/^  typedef std::vector<perf_counter_data_any_d> perf_counter_data_vec_t;$/;"	t	class:PerfCounters
perf_counters	perf_counters.h	/^    PerfCounters *perf_counters;$/;"	m	class:PerfCountersCollection::PerfCounterRef
perf_counters_set_t	perf_counters.h	/^typedef std::set <PerfCounters*, SortPerfCountersByName> perf_counters_set_t;$/;"	t
period	ceph_time.h	/^      typedef duration::period period;$/;"	t	class:ceph::time_detail::coarse_mono_clock
period	ceph_time.h	/^      typedef duration::period period;$/;"	t	class:ceph::time_detail::coarse_real_clock
period	ceph_time.h	/^      typedef duration::period period;$/;"	t	class:ceph::time_detail::mono_clock
period	ceph_time.h	/^      typedef duration::period period;$/;"	t	class:ceph::time_detail::real_clock
pg_trace	TrackedOp.h	/^  ZTracer::Trace pg_trace;$/;"	m	class:TrackedOp
pick_addresses	pick_address.cc	/^void pick_addresses(CephContext *cct, int needs)$/;"	f
pick_iface	pick_address.cc	/^std::string pick_iface(CephContext *cct, const struct sockaddr_storage &network)$/;"	f
pid	SubProcess.h	/^  int pid;$/;"	m	class:SubProcess
pid	Thread.h	/^  pid_t pid;$/;"	m	class:Thread
pin	simple_cache.hpp	/^  void pin(K key, V val) {$/;"	f	class:SimpleLRU
ping	admin_socket_client.cc	/^std::string AdminSocketClient::ping(bool *ok)$/;"	f	class:AdminSocketClient
pinned	simple_cache.hpp	/^  map<K, V, C> pinned;$/;"	m	class:SimpleLRU
pipe_cloexec	compat.cc	/^int pipe_cloexec(int pipefd[2])$/;"	f
pipefds	buffer.cc	/^    int pipefds[2];$/;"	m	class:buffer::raw_pipe	file:
plugins	PluginRegistry.h	/^    std::map<std::string,std::map<std::string,Plugin*> > plugins;$/;"	m	class:ceph::PluginRegistry
pointer	autovector.h	/^    typedef TValueType* pointer;$/;"	t	class:ceph::autovector::iterator_impl
pointer	autovector.h	/^  typedef value_type* pointer;$/;"	t	class:ceph::autovector
polynomial_multiply	crc32c_ppc.c	/^static inline unsigned long polynomial_multiply(unsigned int a, unsigned int b) {$/;"	f	file:
pool	WorkQueue.h	/^    ShardedThreadPool *pool;$/;"	m	struct:ShardedThreadPool::WorkThreadSharded
pool	WorkQueue.h	/^    ThreadPool *pool;$/;"	m	class:ThreadPool::BatchWorkQueue
pool	WorkQueue.h	/^    ThreadPool *pool;$/;"	m	class:ThreadPool::WorkQueue
pool	WorkQueue.h	/^    ThreadPool *pool;$/;"	m	class:ThreadPool::WorkQueueVal
pool	WorkQueue.h	/^    ThreadPool *pool;$/;"	m	struct:ThreadPool::WorkThread
pool	hobject.h	/^  int64_t pool;  \/\/ 所在的pool的id$/;"	m	struct:hobject_t
pop	WeightedPriorityQueue.h	/^	T pop(bool strict = false) {$/;"	f	class:WeightedPriorityQueue::Queue
pop	WeightedPriorityQueue.h	/^      T pop() {$/;"	f	class:WeightedPriorityQueue::Klass
pop	WeightedPriorityQueue.h	/^      T pop() {$/;"	f	class:WeightedPriorityQueue::SubQueue
pop_back	autovector.h	/^  void pop_back() {$/;"	f	class:ceph::autovector
pop_front	PrioritizedQueue.h	/^    void pop_front() {$/;"	f	struct:PrioritizedQueue::SubQueue
pop_front	mClockPriorityQueue.h	/^      void pop_front() {$/;"	f	struct:ceph::mClockQueue::SubQueue
pos_type	PrebufferedStreambuf.h	/^  typedef traits_ty::pos_type pos_type;$/;"	t	class:PrebufferedStreambuf
pow2_hist_t	histogram.h	/^struct pow2_hist_t { \/\/$/;"	s
pre_validate	options.cc	/^int Option::pre_validate(std::string *new_value, std::string *err) const$/;"	f	class:Option
preempt	AsyncReserver.h	/^    Context *preempt = 0;$/;"	m	struct:AsyncReserver::Reservation
preempt_by_prio	AsyncReserver.h	/^  set<pair<unsigned,T>> preempt_by_prio;  \/\/\/< in_progress that can be preempted$/;"	m	class:AsyncReserver
preempt_one	AsyncReserver.h	/^  void preempt_one() {$/;"	f	class:AsyncReserver
prefork	Preforker.h	/^  int prefork(std::string &err) {$/;"	f	class:Preforker
prepend_zero	buffer.cc	/^  void buffer::list::prepend_zero(unsigned len)$/;"	f	class:buffer::list
pretty_version_to_str	version.cc	/^std::string const pretty_version_to_str(void)$/;"	f	class:std
print	BackTrace.cc	/^void BackTrace::print(std::ostream& out) const$/;"	f	class:ceph::BackTrace
print	interval_map.h	/^  std::ostream &print(std::ostream &out) const {$/;"	f	class:interval_map
print_bit_str	bit_str.cc	/^void print_bit_str($/;"	f
print_comma	Formatter.cc	/^void JSONFormatter::print_comma(json_formatter_stack_entry_d& entry)$/;"	f	class:ceph::JSONFormatter
print_name	Formatter.cc	/^void JSONFormatter::print_name(const char *name)$/;"	f	class:ceph::JSONFormatter
print_quoted_string	Formatter.cc	/^void JSONFormatter::print_quoted_string(boost::string_view s)$/;"	f	class:ceph::JSONFormatter
print_spaces	Formatter.cc	/^void XMLFormatter::print_spaces()$/;"	f	class:ceph::XMLFormatter
prio	AsyncReserver.h	/^    unsigned prio = 0;$/;"	m	struct:AsyncReserver::Reservation
prio	LogEntry.h	/^  clog_type prio;$/;"	m	struct:LogEntry
prio	perf_counters.h	/^    uint8_t prio = 0;$/;"	m	struct:PerfCounters::perf_counter_data_any_d
prio_adjust	perf_counters.h	/^  int prio_adjust = 0;$/;"	m	class:PerfCounters
prio_default	perf_counters.h	/^  int prio_default = 0;$/;"	m	class:PerfCountersBuilder
prior_parent_snaps	snap_types.h	/^  vector<snapid_t> prior_parent_snaps;  \/\/ before parent_since$/;"	m	struct:SnapRealmInfo
priority	dns_resolve.h	/^      uint16_t priority;$/;"	m	struct:ceph::DNSResolver::Record
proc_block	crc32c_intel_fast_asm.s	/^proc_block:$/;"	l
proc_block	crc32c_intel_fast_zero_asm.s	/^proc_block:$/;"	l
process_finish	WorkQueue.h	/^    void process_finish() {$/;"	f	class:ThreadPool::PointerWQ
process_line	ConfUtils.cc	/^process_line(int line_no, const char *line, std::deque<std::string> *errors)$/;"	f	class:ConfFile
processing	WorkQueue.h	/^  int processing;$/;"	m	class:ThreadPool
promote	RWLock.h	/^    void promote() {$/;"	f	class:final::Context
prune	LogEntry.h	/^  void prune(size_t max) {$/;"	f	struct:LogSummary
ptr	buffer.cc	/^  buffer::ptr::ptr(const char *d, unsigned l) : _off(0), _len(l)    \/\/ ditto.$/;"	f	class:buffer::ptr
ptr	buffer.cc	/^  buffer::ptr::ptr(const ptr& p) : _raw(p._raw), _off(p._off), _len(p._len)$/;"	f	class:buffer::ptr
ptr	buffer.cc	/^  buffer::ptr::ptr(const ptr& p, unsigned o, unsigned l)$/;"	f	class:buffer::ptr
ptr	buffer.cc	/^  buffer::ptr::ptr(raw *r) : _raw(r), _off(0), _len(r->len)   \/\/ no lock needed; this is an unref raw.$/;"	f	class:buffer::ptr
ptr	buffer.cc	/^  buffer::ptr::ptr(unsigned l) : _off(0), _len(l)$/;"	f	class:buffer::ptr
ptr	tracked_int_ptr.hpp	/^  T *ptr;$/;"	m	class:TrackedIntPtr
purge	shared_cache.hpp	/^  void purge(const K &key) {$/;"	f	class:SharedLRU
push_back	autovector.h	/^  void push_back(T&& item) {$/;"	f	class:ceph::autovector
push_back	autovector.h	/^  void push_back(const T& item) {$/;"	f	class:ceph::autovector
put	RefCountedObj.h	/^  bool put() {$/;"	f	struct:RefCountedWaitObject
put	RefCountedObj.h	/^  void put() const {$/;"	f	struct:RefCountedObject
put	Throttle.cc	/^int64_t Throttle::put(int64_t c)$/;"	f	class:Throttle
put	Throttle.cc	/^uint64_t BackoffThrottle::put(uint64_t c)$/;"	f	class:BackoffThrottle
put	TrackedOp.h	/^  void put() {$/;"	f	class:TrackedOp
put	ceph_context.cc	/^void CephContext::put() {$/;"	f	class:CephContext
put_read	RWLock.h	/^  void put_read() const {$/;"	f	class:final
put_state	dns_resolve.cc	/^void DNSResolver::put_state(res_state s)$/;"	f	class:ceph::DNSResolver
put_tokens	PrioritizedQueue.h	/^    void put_tokens(unsigned t) {$/;"	f	struct:PrioritizedQueue::SubQueue
put_tokens	mClockPriorityQueue.h	/^      void put_tokens(unsigned t) {$/;"	f	struct:ceph::mClockQueue::SubQueue
put_wait	RefCountedObj.h	/^  void put_wait() {$/;"	f	struct:RefCountedWaitObject
put_write	RWLock.h	/^  void put_write() {$/;"	f	class:final
q	PrioritizedQueue.h	/^    Classes q;$/;"	m	struct:PrioritizedQueue::SubQueue
q	cohort_lru.h	/^	Object::Queue q;$/;"	m	struct:cohort::lru::LRU::Lane
q	mClockPriorityQueue.h	/^      Classes q;$/;"	m	struct:ceph::mClockQueue::SubQueue
q2_hook	cohort_lru.h	/^      bi::slist_member_hook< link_mode > q2_hook;$/;"	m	class:cohort::lru::Object
qlane	cohort_lru.h	/^      Lane *qlane;$/;"	m	class:cohort::lru::LRU
queue	Finisher.h	/^  void queue(Context *c, int r = 0) {$/;"	f	class:Finisher
queue	Finisher.h	/^  void queue(deque<Context*>& ls) {$/;"	f	class:Finisher
queue	Finisher.h	/^  void queue(list<Context*>& ls) {$/;"	f	class:Finisher
queue	Finisher.h	/^  void queue(vector<Context*>& ls) {$/;"	f	class:Finisher
queue	LogClient.cc	/^version_t LogClient::queue(LogEntry &entry)$/;"	f	class:LogClient
queue	PrioritizedQueue.h	/^  SubQueues queue;$/;"	m	class:PrioritizedQueue
queue	WorkQueue.h	/^    bool queue(T *item) {$/;"	f	class:ThreadPool::BatchWorkQueue
queue	WorkQueue.h	/^    bool queue(T *item) {$/;"	f	class:ThreadPool::WorkQueue
queue	WorkQueue.h	/^    void queue(T *item) {$/;"	f	class:ThreadPool::PointerWQ
queue	WorkQueue.h	/^    void queue(T item) {$/;"	f	class:ShardedThreadPool::ShardedWQ
queue	WorkQueue.h	/^    void queue(T item) {$/;"	f	class:ThreadPool::WorkQueueVal
queue	WorkQueue.h	/^  void queue(Context *ctx, int result = 0) {$/;"	f	class:ContextWQ
queue	mClockPriorityQueue.h	/^    dmc::PullPriorityQueue<K,T> queue;$/;"	m	class:ceph::mClockQueue
queue_front	WorkQueue.h	/^    void queue_front(T item) {$/;"	f	class:ShardedThreadPool::ShardedWQ
queue_front	WorkQueue.h	/^    void queue_front(T item) {$/;"	f	class:ThreadPool::WorkQueueVal
queue_front	mClockPriorityQueue.h	/^    std::list<std::pair<K,T>> queue_front;$/;"	m	class:ceph::mClockQueue
queue_pointers	AsyncReserver.h	/^  map<T, pair<unsigned, typename list<Reservation>::iterator>> queue_pointers;$/;"	m	class:AsyncReserver
queues	AsyncReserver.h	/^  map<unsigned, list<Reservation>> queues;$/;"	m	class:AsyncReserver
queues	WeightedPriorityQueue.h	/^      SubQueues queues;$/;"	m	class:WeightedPriorityQueue::Queue
r1	crc32c_ppc_asm.S	/^#define r1 1$/;"	d
r1	crc32c_ppc_fast_zero_asm.S	/^#define r1 1$/;"	d
r2	crc32c_ppc_asm.S	/^#define r2 2$/;"	d
r2	crc32c_ppc_fast_zero_asm.S	/^#define r2 2$/;"	d
rand_read_bench	obj_bencher.cc	/^int ObjBencher::rand_read_bench(int seconds_to_run, int num_objects, int concurrentios, int pid, bool no_verify)$/;"	f	class:ObjBencher
random_seed_	bloom_filter.hpp	/^  std::size_t         random_seed_;  \/\/\/< random seed$/;"	m	class:bloom_filter
rate	DecayCounter.h	/^  DecayRate rate;$/;"	m	class:DecayCounter
raw	Tub.h	/^  char raw[sizeof(ElementType)];$/;"	m	class:Tub
raw	buffer.cc	/^    explicit raw(unsigned l, int mempool=mempool::mempool_buffer_anon)$/;"	f	class:buffer::raw
raw	buffer.cc	/^    raw(char *c, unsigned l, int mempool=mempool::mempool_buffer_anon)$/;"	f	class:buffer::raw
raw	buffer.cc	/^  class buffer::raw {$/;"	c	class:buffer	file:
raw_c_str	buffer.cc	/^  const char *buffer::ptr::raw_c_str() const { assert(_raw); return _raw->data; }$/;"	f	class:buffer::ptr
raw_char	buffer.cc	/^    explicit raw_char(unsigned l) : raw(l) {$/;"	f	class:buffer::raw_char
raw_char	buffer.cc	/^    raw_char(unsigned l, char *b) : raw(b, l) {$/;"	f	class:buffer::raw_char
raw_char	buffer.cc	/^  class buffer::raw_char : public buffer::raw {$/;"	c	class:buffer	file:
raw_claim_buffer	buffer.cc	/^    raw_claim_buffer(const char *b, unsigned l, deleter d)$/;"	f	class:buffer::raw_claim_buffer
raw_claim_buffer	buffer.cc	/^  class buffer::raw_claim_buffer : public buffer::raw {$/;"	c	class:buffer	file:
raw_claimed_char	buffer.cc	/^    explicit raw_claimed_char(unsigned l, char *b) : raw(b, l) {$/;"	f	class:buffer::raw_claimed_char
raw_claimed_char	buffer.cc	/^  class buffer::raw_claimed_char : public buffer::raw {$/;"	c	class:buffer	file:
raw_combined	buffer.cc	/^    raw_combined(char *dataptr, unsigned l, unsigned align,$/;"	f	class:buffer::raw_combined
raw_combined	buffer.cc	/^  class buffer::raw_combined : public buffer::raw {$/;"	c	class:buffer	file:
raw_hack_aligned	buffer.cc	/^    raw_hack_aligned(unsigned l, unsigned _align) : raw(l) {$/;"	f	class:buffer::raw_hack_aligned
raw_hack_aligned	buffer.cc	/^  class buffer::raw_hack_aligned : public buffer::raw {$/;"	c	class:buffer	file:
raw_length	buffer.cc	/^  unsigned buffer::ptr::raw_length() const { assert(_raw); return _raw->len; }$/;"	f	class:buffer::ptr
raw_malloc	buffer.cc	/^    explicit raw_malloc(unsigned l) : raw(l) {$/;"	f	class:buffer::raw_malloc
raw_malloc	buffer.cc	/^    raw_malloc(unsigned l, char *b) : raw(b, l) {$/;"	f	class:buffer::raw_malloc
raw_malloc	buffer.cc	/^  class buffer::raw_malloc : public buffer::raw {$/;"	c	class:buffer	file:
raw_mmap_pages	buffer.cc	/^    explicit raw_mmap_pages(unsigned l) : raw(l) {$/;"	f	class:buffer::raw_mmap_pages
raw_mmap_pages	buffer.cc	/^  class buffer::raw_mmap_pages : public buffer::raw {$/;"	c	class:buffer	file:
raw_nref	buffer.cc	/^  int buffer::ptr::raw_nref() const { assert(_raw); return _raw->nref; }$/;"	f	class:buffer::ptr
raw_object_tag	deleter.h	/^  struct raw_object_tag {};$/;"	s	class:final
raw_pipe	buffer.cc	/^    explicit raw_pipe(unsigned len) : raw(len), source_consumed(false) {$/;"	f	class:buffer::raw_pipe
raw_pipe	buffer.cc	/^  class buffer::raw_pipe : public buffer::raw {$/;"	c	class:buffer	file:
raw_posix_aligned	buffer.cc	/^    raw_posix_aligned(unsigned l, unsigned _align) : raw(l) {$/;"	f	class:buffer::raw_posix_aligned
raw_posix_aligned	buffer.cc	/^  class buffer::raw_posix_aligned : public buffer::raw {$/;"	c	class:buffer	file:
raw_static	buffer.cc	/^    raw_static(const char *d, unsigned l) : raw((char*)d, l) { }$/;"	f	class:buffer::raw_static
raw_static	buffer.cc	/^  class buffer::raw_static : public buffer::raw {$/;"	c	class:buffer	file:
raw_unshareable	buffer.cc	/^    explicit raw_unshareable(unsigned l) : raw(l) {$/;"	f	class:buffer::raw_unshareable
raw_unshareable	buffer.cc	/^    raw_unshareable(unsigned l, char *b) : raw(b, l) {$/;"	f	class:buffer::raw_unshareable
raw_unshareable	buffer.cc	/^  class buffer::raw_unshareable : public buffer::raw {$/;"	c	class:buffer	file:
rbegin	autovector.h	/^  const_reverse_iterator rbegin() const {$/;"	f	class:ceph::autovector
rbegin	autovector.h	/^  reverse_iterator rbegin() { return reverse_iterator(end()); }$/;"	f	class:ceph::autovector
rdout	AsyncReserver.h	21;"	d
rdout	AsyncReserver.h	249;"	d
rdtsc	Cycles.h	/^  static __inline __attribute__((always_inline)) uint64_t rdtsc() {$/;"	f	class:Cycles
read	ConfUtils.cc	/^read(const std::string &section, const std::string &key, std::string &val) const$/;"	f	class:ConfFile
read	SloppyCRCMap.cc	/^int SloppyCRCMap::read(uint64_t offset, uint64_t len, const bufferlist& bl,$/;"	f	class:SloppyCRCMap
read_avg	perf_counters.h	/^    pair<uint64_t,uint64_t> read_avg() const {$/;"	f	struct:PerfCounters::perf_counter_data_any_d
read_bucket	perf_histogram.h	/^  uint64_t read_bucket(T... bucket) const {$/;"	f	class:PerfHistogram
read_fd	buffer.cc	/^ssize_t buffer::list::read_fd(int fd, size_t len)$/;"	f	class:buffer::list
read_fd_zero_copy	buffer.cc	/^int buffer::list::read_fd_zero_copy(int fd, size_t len)$/;"	f	class:buffer::list
read_file	buffer.cc	/^int buffer::list::read_file(const char *fn, std::string *error)$/;"	f	class:buffer::list
read_secret_from_file	secret.c	/^int read_secret_from_file(const char *filename, char *secret, size_t max_len)$/;"	f
real_clock	ceph_time.h	/^    class real_clock {$/;"	c	namespace:ceph::time_detail
real_time	ceph_time.h	/^  typedef real_clock::time_point real_time;$/;"	t	namespace:ceph
realdata	buffer.cc	/^    char *realdata;$/;"	m	class:buffer::raw_hack_aligned	file:
reassign_to_mempool	buffer.cc	/^    void reassign_to_mempool(int pool) {$/;"	f	class:buffer::raw
reassign_to_mempool	buffer.cc	/^  void buffer::list::reassign_to_mempool(int pool)$/;"	f	class:buffer::list
reassign_to_mempool	buffer.cc	/^  void buffer::ptr::reassign_to_mempool(int pool) {$/;"	f	class:buffer::ptr
rebuild	buffer.cc	/^  void buffer::list::rebuild()$/;"	f	class:buffer::list
rebuild	buffer.cc	/^  void buffer::list::rebuild(ptr& nb)$/;"	f	class:buffer::list
rebuild_aligned	buffer.cc	/^  bool buffer::list::rebuild_aligned(unsigned align)$/;"	f	class:buffer::list
rebuild_aligned_size_and_memory	buffer.cc	/^  bool buffer::list::rebuild_aligned_size_and_memory(unsigned align_size,$/;"	f	class:buffer::list
rebuild_page_aligned	buffer.cc	/^  bool buffer::list::rebuild_page_aligned()$/;"	f	class:buffer::list
recursive	Mutex.h	/^  bool recursive;$/;"	m	class:Mutex
recursive	mutex_debug.h	/^  static constexpr bool recursive = Recursive;$/;"	m	class:ceph::mutex_debug_detail::mutex_debug_impl
ref	cohort_lru.h	/^      bool ref(Object* o, uint32_t flags) {$/;"	f	class:cohort::lru::LRU
reference	autovector.h	/^    typedef TValueType& reference;$/;"	t	class:ceph::autovector::iterator_impl
reference	autovector.h	/^  typedef value_type& reference;$/;"	t	class:ceph::autovector
refresh_perf_values	ceph_context.cc	/^void CephContext::refresh_perf_values()$/;"	f	class:CephContext
refs	deleter.h	/^  std::atomic_uint refs;$/;"	m	struct:deleter::impl
register_assert_context	assert.cc	/^  void register_assert_context(CephContext *cct)$/;"	f	namespace:ceph
register_command	admin_socket.cc	/^int AdminSocket::register_command(std::string command, std::string cmddesc, AdminSocketHook *hook, std::string help)$/;"	f	class:AdminSocket
register_fork_watcher	ceph_context.h	/^  void register_fork_watcher(ForkWatcher *w) {$/;"	f	class:CephContext
register_inflight_op	TrackedOp.cc	/^bool OpTracker::register_inflight_op(TrackedOp *i)$/;"	f	class:OpTracker
register_work_queue	WorkQueue.h	/^    void register_work_queue() {$/;"	f	class:ThreadPool::PointerWQ
release	buffer.cc	/^  void buffer::ptr::release()$/;"	f	class:buffer::ptr
release_to_shared	shunique_lock.h	/^  shared_lock_type release_to_shared() {$/;"	f	class:ceph::shunique_lock
release_to_unique	shunique_lock.h	/^  unique_lock_type release_to_unique() {$/;"	f	class:ceph::shunique_lock
remove	PluginRegistry.cc	/^int PluginRegistry::remove(const std::string& type, const std::string& name)$/;"	f	class:PluginRegistry
remove	cohort_lru.h	/^      void remove(uint64_t hk, T* v, uint32_t flags) {$/;"	f	class:cohort::lru::TreeX
remove	perf_counters.cc	/^void PerfCountersCollection::remove(class PerfCounters *l)$/;"	f	class:PerfCountersCollection
remove	shared_cache.hpp	/^  void remove(const K& key, V *valptr) {$/;"	f	class:SharedLRU
remove	sharedptr_registry.hpp	/^  void remove(const K &key) {$/;"	f	class:SharedPtrRegistry
remove_all_cleanup_files	OutputDataSocket.cc	/^static void remove_all_cleanup_files()$/;"	f	file:
remove_all_cleanup_files	admin_socket.cc	/^static void remove_all_cleanup_files()$/;"	f	file:
remove_by_class	PrioritizedQueue.h	/^    void remove_by_class(K k, std::list<T> *out) {$/;"	f	struct:PrioritizedQueue::SubQueue
remove_by_class	mClockPriorityQueue.h	/^      void remove_by_class(K k, std::list<T> *out) {$/;"	f	struct:ceph::mClockQueue::SubQueue
remove_by_filter	mClockPriorityQueue.h	/^      void remove_by_filter(std::function<bool (const T&)> f) {$/;"	f	struct:ceph::mClockQueue::SubQueue
remove_by_filter	mClockPriorityQueue.h	/^    void remove_by_filter(std::function<bool (const T&)> filter_accum) {$/;"	f	class:ceph::mClockQueue
remove_cleanup_file	OutputDataSocket.cc	/^static void remove_cleanup_file(const char *file)$/;"	f	file:
remove_cleanup_file	admin_socket.cc	/^static void remove_cleanup_file(const char *file)$/;"	f	file:
remove_keys	map_cacher.hpp	/^  void remove_keys($/;"	f	class:MapCacher::MapCacher
remove_observer	config.cc	/^void md_config_t::remove_observer(md_config_obs_t* observer_)$/;"	f	class:md_config_t
remove_queue	PrioritizedQueue.h	/^  void remove_queue(unsigned priority) {$/;"	f	class:PrioritizedQueue
remove_work_queue	WorkQueue.h	/^  void remove_work_queue(WorkQueue_* wq) {$/;"	f	class:ThreadPool
remove_worker	HeartbeatMap.cc	/^void HeartbeatMap::remove_worker(const heartbeat_handle_d *h)$/;"	f	class:ceph::HeartbeatMap
rend	autovector.h	/^  const_reverse_iterator rend() const {$/;"	f	class:ceph::autovector
rend	autovector.h	/^  reverse_iterator rend() { return reverse_iterator(begin()); }$/;"	f	class:ceph::autovector
reopen_logs	ceph_context.cc	/^  void reopen_logs()$/;"	f	class:CephContextServiceThread
reopen_logs	ceph_context.cc	/^void CephContext::reopen_logs()$/;"	f	class:CephContext
rep	ceph_time.h	/^      typedef duration::rep rep;$/;"	t	class:ceph::time_detail::coarse_mono_clock
rep	ceph_time.h	/^      typedef duration::rep rep;$/;"	t	class:ceph::time_detail::coarse_real_clock
rep	ceph_time.h	/^      typedef duration::rep rep;$/;"	t	class:ceph::time_detail::mono_clock
rep	ceph_time.h	/^      typedef duration::rep rep;$/;"	t	class:ceph::time_detail::real_clock
rep	ceph_time.h	/^    typedef uint64_t rep;$/;"	t	namespace:ceph::time_detail
replace	sstring.hh	/^    basic_sstring& replace (const_iterator i1, const_iterator i2,$/;"	f	class:basic_sstring
replace	sstring.hh	/^    basic_sstring& replace(size_type pos, size_type n1, const char_type* s,$/;"	f	class:basic_sstring
reported_done	Continuation.h	/^  bool reported_done;$/;"	m	class:Continuation
request_reservation	AsyncReserver.h	/^  void request_reservation($/;"	f	class:AsyncReserver
requeue	WorkQueue.h	/^    void requeue(T *item) {$/;"	f	class:ThreadPool::PointerWQ
res_nquery	dns_resolve.cc	/^int ResolvHWrapper::res_nquery(res_state s, const char *hostname, int cls,$/;"	f	class:ceph::ResolvHWrapper
res_nsearch	dns_resolve.cc	/^int ResolvHWrapper::res_nsearch(res_state s, const char *hostname, int cls,$/;"	f	class:ceph::ResolvHWrapper
reschedule_me	ceph_timer.h	/^      uint64_t reschedule_me(typename TC::duration duration) {$/;"	f	class:ceph::timer_detail::timer
reschedule_me	ceph_timer.h	/^      uint64_t reschedule_me(typename TC::time_point when) {$/;"	f	class:ceph::timer_detail::timer
reserve	buffer.cc	/^  void buffer::list::reserve(size_t prealloc)$/;"	f	class:buffer::list
reset	DecayCounter.h	/^  void reset(utime_t now) {$/;"	f	class:DecayCounter
reset	Formatter.cc	/^void JSONFormatter::reset()$/;"	f	class:ceph::JSONFormatter
reset	Formatter.cc	/^void TableFormatter::reset()$/;"	f	class:ceph::TableFormatter
reset	Formatter.cc	/^void XMLFormatter::reset()$/;"	f	class:ceph::XMLFormatter
reset	HTMLFormatter.cc	/^void HTMLFormatter::reset()$/;"	f	class:ceph::HTMLFormatter
reset	Throttle.cc	/^void Throttle::reset()$/;"	f	class:Throttle
reset	deleter.h	/^  void reset(impl* i) {$/;"	f	class:final
reset	perf_counters.cc	/^bool PerfCountersCollection::reset(const std::string &name)$/;"	f	class:PerfCountersCollection
reset	perf_counters.cc	/^void PerfCounters::reset()$/;"	f	class:PerfCounters
reset	perf_counters.h	/^    void reset()$/;"	f	struct:PerfCounters::perf_counter_data_any_d
reset	perf_histogram.h	/^  void reset() {$/;"	f	class:PerfHistogram
reset	tracked_int_ptr.hpp	/^  void reset() {$/;"	f	class:TrackedIntPtr
reset_comparator	shared_cache.hpp	/^  void reset_comparator(C comp) {$/;"	f	class:SharedLRU
reset_desc	TrackedOp.h	/^  void reset_desc() {$/;"	f	class:TrackedOp
reset_max	Throttle.h	/^  void reset_max(int64_t m) {$/;"	f	class:Throttle
reset_timeout	HeartbeatMap.cc	/^void HeartbeatMap::reset_timeout(heartbeat_handle_d *h, time_t grace, time_t suicide_grace)$/;"	f	class:ceph::HeartbeatMap
reset_tp_timeout	WorkQueue.cc	/^void ThreadPool::TPHandle::reset_tp_timeout()$/;"	f	class:ThreadPool::TPHandle
resize	autovector.h	/^  void resize(size_type n) {$/;"	f	class:ceph::autovector
resize	bit_vector.hpp	/^void BitVector<_b>::resize(uint64_t size) {$/;"	f	class:ceph::BitVector
resolv_h	dns_resolve.h	/^    ResolvHWrapper *resolv_h;$/;"	m	class:ceph::DNSResolver
resolve_addrs	addr_parsing.c	/^char *resolve_addrs(const char *orig_str)$/;"	f
resolve_cname	dns_resolve.cc	/^int DNSResolver::resolve_cname(CephContext *cct, const string& hostname,$/;"	f	class:ceph::DNSResolver
resolve_ip_addr	dns_resolve.cc	/^int DNSResolver::resolve_ip_addr(CephContext *cct, const string& hostname,$/;"	f	class:ceph::DNSResolver
resolve_ip_addr	dns_resolve.cc	/^int DNSResolver::resolve_ip_addr(CephContext *cct, res_state *res, const string& hostname, $/;"	f	class:ceph::DNSResolver
resolve_srv_hosts	dns_resolve.cc	/^int DNSResolver::resolve_srv_hosts(CephContext *cct, const string& service_name, $/;"	f	class:ceph::DNSResolver
restore_sigset	signal.cc	/^void restore_sigset(const sigset_t *old_sigset)$/;"	f
result_type	function_signature.h	/^    typedef typename boost::function_types::result_type<F>::type result_type;$/;"	t	struct:signature_of_member
result_type	inline_variant.h	/^        typedef typename boost::function_types::result_type<normalized_function_type>::type result_type;$/;"	t	struct:detail::function_arg_extractor::apply
result_type	inline_variant.h	/^    typedef typename boost::mpl::front<return_types>::type result_type;$/;"	t	struct:get_generic_visitor
resume	ceph_timer.h	/^      void resume() {$/;"	f	class:ceph::timer_detail::timer
ret_val	Throttle.h	/^    int ret_val;$/;"	m	struct:OrderedThrottle::Result
return_types	inline_variant.h	/^    typedef typename boost::mpl::transform<bare_function_types, function_return_extractor>::type return_types;$/;"	t	struct:get_generic_visitor
reverse_bits	reverse.c	/^uint32_t reverse_bits(uint32_t v) {$/;"	f
reverse_iterator	autovector.h	/^  typedef std::reverse_iterator<iterator> reverse_iterator;$/;"	t	class:ceph::autovector
reverse_nibbles	reverse.c	/^uint32_t reverse_nibbles(uint32_t retval) {$/;"	f
rhs	hobject.h	/^  hobject_t &operator=(const hobject_t &rhs) = default;$/;"	m	struct:hobject_t
rhs	hobject.h	/^  hobject_t &operator=(hobject_t &&rhs) = default;$/;"	m	struct:hobject_t
rhs	hobject.h	/^  hobject_t(const hobject_t &rhs) = default;$/;"	m	struct:hobject_t
rhs	hobject.h	/^  hobject_t(hobject_t &&rhs) = default;$/;"	m	struct:hobject_t
ritoa	strtol.h	/^char* ritoa(T u, char *buf)$/;"	f
row	TextTable.h	/^  std::vector<std::vector<std::string> > row;	\/\/ row data array$/;"	m	class:TextTable
rss	MemoryModel.h	/^    long rss;$/;"	m	struct:MemoryModel::snap
run_cmd	run_cmd.cc	/^std::string run_cmd(const char *cmd, ...)$/;"	f
run_command	module.c	/^static int run_command(const char *command)$/;"	f	file:
rval	Cond.h	/^  int *rval;      \/\/\/< return value (optional)$/;"	m	class:C_SafeCond
rval	Cond.h	/^  int *rval;    \/\/\/< return value$/;"	m	class:C_Cond
rval	Cond.h	/^  int rval;      \/\/\/< return value$/;"	m	class:C_SaferCond
rval	Continuation.h	/^  int rval;$/;"	m	class:Continuation
rval	RefCountedObj.h	/^  int rval;$/;"	m	struct:RefCountedCond
s	interval_map.h	/^  S s;$/;"	m	class:interval_map
s0	Throttle.h	/^  double s0 = 0; \/\/\/< e \/ (h - l), l != h, 0 otherwise$/;"	m	class:BackoffThrottle
s1	Throttle.h	/^  double s1 = 0; \/\/\/< (m - e)\/(1 - h), 1 != h, 0 otherwise$/;"	m	class:BackoffThrottle
safe	options.h	/^  bool safe;$/;"	m	struct:Option
safe_callbacks	Timer.h	/^  bool safe_callbacks;$/;"	m	class:SafeTimer
safe_cat	addr_parsing.c	/^int safe_cat(char **pstr, int *plen, int pos, const char *str2)$/;"	f
safe_pread	safe_io.c	/^ssize_t safe_pread(int fd, void *buf, size_t count, off_t offset)$/;"	f
safe_pread_exact	safe_io.c	/^ssize_t safe_pread_exact(int fd, void *buf, size_t count, off_t offset)$/;"	f
safe_pwrite	safe_io.c	/^ssize_t safe_pwrite(int fd, const void *buf, size_t count, off_t offset)$/;"	f
safe_read	safe_io.c	/^ssize_t safe_read(int fd, void *buf, size_t count)$/;"	f
safe_read_exact	safe_io.c	/^ssize_t safe_read_exact(int fd, void *buf, size_t count)$/;"	f
safe_read_file	safe_io.c	/^int safe_read_file(const char *base, const char *file,$/;"	f
safe_splice	safe_io.c	/^ssize_t safe_splice(int fd_in, off_t *off_in, int fd_out, off_t *off_out,$/;"	f
safe_splice_exact	safe_io.c	/^ssize_t safe_splice_exact(int fd_in, off_t *off_in, int fd_out,$/;"	f
safe_write	safe_io.c	/^ssize_t safe_write(int fd, const void *buf, size_t count)$/;"	f
safe_write_file	safe_io.c	/^int safe_write_file(const char *base, const char *file,$/;"	f
salt_	bloom_filter.hpp	/^  std::vector<bloom_type> salt_;     \/\/\/< vector of salts$/;"	m	class:bloom_filter
salt_count_	bloom_filter.hpp	/^  std::size_t         salt_count_;   \/\/\/< number of salts$/;"	m	class:bloom_filter
sample	MemoryModel.h	/^  void sample(snap *p = 0) {$/;"	f	class:MemoryModel
sandbox_dir	blkdev.cc	/^static const char *sandbox_dir = "";$/;"	v	file:
sanitize_object_contents	obj_bencher.cc	/^static void sanitize_object_contents (bench_data *data, size_t length) {$/;"	f	file:
scale	DecayCounter.h	/^  void scale(double f) {$/;"	f	class:DecayCounter
schedule	Timer.h	/^  std::multimap<utime_t, Context*> schedule;$/;"	m	class:SafeTimer
schedule_link	ceph_timer.h	/^	sh schedule_link;$/;"	m	struct:ceph::timer_detail::timer::event
scheduled_map_t	Timer.cc	/^typedef std::multimap < utime_t, Context *> scheduled_map_t;$/;"	t	file:
schema	config.h	/^  std::map<std::string, const Option &> schema;$/;"	m	struct:md_config_t
scrub_ls_arg_t	scrub_types.h	/^WRITE_CLASS_ENCODER(scrub_ls_arg_t);$/;"	v
scrub_ls_arg_t	scrub_types.h	/^struct scrub_ls_arg_t {$/;"	s
scrub_ls_result_t	scrub_types.h	/^WRITE_CLASS_ENCODER(scrub_ls_result_t);$/;"	v
scrub_ls_result_t	scrub_types.h	/^struct scrub_ls_result_t {$/;"	s
sctp_crc32c_sb8_64_bit	sctp_crc32.c	/^sctp_crc32c_sb8_64_bit(uint32_t crc,$/;"	f	file:
sctp_crc32c_sb8_64_bit_zero	sctp_crc32.c	/^sctp_crc32c_sb8_64_bit_zero(uint32_t crc,$/;"	f	file:
sctp_crc_c	sctp_crc32.c	/^uint32_t sctp_crc_c[256] = {$/;"	v
sctp_crc_tableil8_o32	sctp_crc32.c	/^uint32_t sctp_crc_tableil8_o32[256] =$/;"	v
sctp_crc_tableil8_o40	sctp_crc32.c	/^uint32_t sctp_crc_tableil8_o40[256] =$/;"	v
sctp_crc_tableil8_o48	sctp_crc32.c	/^uint32_t sctp_crc_tableil8_o48[256] =$/;"	v
sctp_crc_tableil8_o56	sctp_crc32.c	/^uint32_t sctp_crc_tableil8_o56[256] =$/;"	v
sctp_crc_tableil8_o64	sctp_crc32.c	/^uint32_t sctp_crc_tableil8_o64[256] =$/;"	v
sctp_crc_tableil8_o72	sctp_crc32.c	/^uint32_t sctp_crc_tableil8_o72[256] =$/;"	v
sctp_crc_tableil8_o80	sctp_crc32.c	/^uint32_t sctp_crc_tableil8_o80[256] =$/;"	v
sctp_crc_tableil8_o88	sctp_crc32.c	/^uint32_t sctp_crc_tableil8_o88[256] =$/;"	v
sec	LogClient.h	/^  LogClientTemp sec() {$/;"	f	class:LogChannel
sec	LogClient.h	/^  void sec(std::stringstream &s) {$/;"	f	class:LogChannel
section	crc32c_intel_fast_asm.s	/^section .data$/;"	l
section	crc32c_intel_fast_asm.s	/^section .note.GNU-stack noalloc noexec nowrite progbits$/;"	l
section	crc32c_intel_fast_zero_asm.s	/^section .data$/;"	l
section	crc32c_intel_fast_zero_asm.s	/^section .note.GNU-stack noalloc noexec nowrite progbits$/;"	l
section_iter_t	ConfUtils.h	/^  typedef std::map <std::string, ConfSection>::iterator section_iter_t;$/;"	t	class:ConfFile
sections	ConfUtils.h	/^  std::map <std::string, ConfSection> sections;$/;"	m	class:ConfFile
sections_begin	ConfUtils.cc	/^sections_begin() const$/;"	f	class:ConfFile
sections_end	ConfUtils.cc	/^sections_end() const$/;"	f	class:ConfFile
see_also	options.h	/^  std::list<const char*> see_also;$/;"	m	struct:Option
seek	buffer.cc	/^  void buffer::list::iterator::seek(unsigned o)$/;"	f	class:buffer::list::iterator
seek	buffer.cc	/^  void buffer::list::iterator_impl<is_const>::seek(unsigned o)$/;"	f	class:buffer::list::iterator_impl
self_type	autovector.h	/^    typedef iterator_impl<TAutoVector, TValueType> self_type;$/;"	t	class:ceph::autovector::iterator_impl
seq	LogEntry.h	/^  uint64_t seq = 0;$/;"	m	struct:LogEntryKey
seq	LogEntry.h	/^  uint64_t seq;$/;"	m	struct:LogEntry
seq	TrackedOp.h	/^  std::atomic<int64_t> seq = { 0 };$/;"	m	class:OpTracker
seq	TrackedOp.h	/^  uint64_t seq = 0;        \/\/\/< a unique value set by the OpTracker$/;"	m	class:TrackedOp
seq	snap_types.h	/^  snapid_t seq() const { return snapid_t(h.seq); }$/;"	f	struct:SnapRealmInfo
seq	snap_types.h	/^  snapid_t seq;            \/\/ 'time' stamp$/;"	m	struct:SnapContext
seq_read_bench	obj_bencher.cc	/^int ObjBencher::seq_read_bench(int seconds_to_run, int num_objects, int concurrentios, int pid, bool no_verify) {$/;"	f	class:ObjBencher
services	options.h	/^  std::list<const char*> services;$/;"	m	struct:Option
set	ceph_json.cc	/^void JSONObjIter::set(const JSONObjIter::map_iter_t &_cur, const JSONObjIter::map_iter_t &_last)$/;"	f	class:JSONObjIter
set	entity_name.cc	/^set(const std::string &type_, const std::string &id_)$/;"	f	class:EntityName
set	entity_name.cc	/^set(uint32_t type_, const std::string &id_)$/;"	f	class:EntityName
set	perf_counters.cc	/^void PerfCounters::set(int idx, uint64_t amt)$/;"	f	class:PerfCounters
set_affinity	Thread.cc	/^int Thread::set_affinity(int id)$/;"	f	class:Thread
set_alignments	Readahead.cc	/^void Readahead::set_alignments(const vector<uint64_t> &alignments) {$/;"	f	class:Readahead
set_attr_name_mismatch	scrub_types.h	/^  void set_attr_name_mismatch() {$/;"	f	struct:inconsistent_obj_wrapper
set_attr_value_mismatch	scrub_types.h	/^  void set_attr_value_mismatch() {$/;"	f	struct:inconsistent_obj_wrapper
set_auth_missing	scrub_types.cc	/^inconsistent_obj_wrapper::set_auth_missing(const hobject_t& hoid,$/;"	f	class:inconsistent_obj_wrapper
set_bin	histogram.h	/^  void set_bin(int bin, int32_t count) {$/;"	f	struct:pow2_hist_t
set_bitwise_key_u32	hobject.h	/^  void set_bitwise_key_u32(uint32_t value) {$/;"	f	struct:hobject_t
set_block_device_sandbox_dir	blkdev.cc	/^void set_block_device_sandbox_dir(const char *dir)$/;"	f
set_block_size	SloppyCRCMap.h	/^  void set_block_size(uint32_t b) {$/;"	f	class:SloppyCRCMap
set_callback	Continuation.h	/^  void set_callback(int stage, stagePtr func) {$/;"	f	class:Continuation
set_cct	RefCountedObj.h	/^  void set_cct(CephContext *c) {$/;"	f	struct:RefCountedObject
set_cct	shared_cache.hpp	/^  void set_cct(CephContext *c) {$/;"	f	class:SharedLRU
set_clone	scrub_types.cc	/^void inconsistent_snapset_wrapper::set_clone(snapid_t snap)$/;"	f	class:inconsistent_snapset_wrapper
set_clone_missing	scrub_types.cc	/^void inconsistent_snapset_wrapper::set_clone_missing(snapid_t snap)$/;"	f	class:inconsistent_snapset_wrapper
set_complaint_and_threshold	TrackedOp.h	/^  void set_complaint_and_threshold(float time, int threshold) {$/;"	f	class:OpTracker
set_crc	buffer.cc	/^    void set_crc(const pair<size_t, size_t> &fromto,$/;"	f	class:buffer::raw
set_crc_enabled	bit_vector.hpp	/^  void set_crc_enabled(bool enabled) {$/;"	f	class:ceph::BitVector
set_daemon_default	options.h	/^  Option& set_daemon_default(const T& v) {$/;"	f	struct:Option
set_data_digest_mismatch	scrub_types.h	/^  void set_data_digest_mismatch() {$/;"	f	struct:inconsistent_obj_wrapper
set_data_digest_mismatch_info	scrub_types.h	/^  void set_data_digest_mismatch_info() {$/;"	f	struct:shard_info_wrapper
set_debug_mode	mempool.cc	/^void mempool::set_debug_mode(bool d)$/;"	f	class:mempool
set_default	options.h	/^  Option& set_default(const T& v) {$/;"	f	struct:Option
set_description	options.h	/^  Option& set_description(const char* new_desc) {$/;"	f	struct:Option
set_destination	Graylog.cc	/^void Graylog::set_destination(const std::string& host, int port)$/;"	f	class:ceph::logging::Graylog
set_ec_hash_mismatch	scrub_types.h	/^  void set_ec_hash_mismatch() {$/;"	f	struct:shard_info_wrapper
set_ec_size_mismatch	scrub_types.h	/^  void set_ec_size_mismatch() {$/;"	f	struct:shard_info_wrapper
set_enum_allowed	options.h	/^  Option& set_enum_allowed(const std::list<std::string> allowed)$/;"	f	struct:Option
set_failure	ceph_json.h	/^  void set_failure() { success = false; }$/;"	f	class:JSONParser
set_formatter	obj_bencher.h	/^  void set_formatter(Formatter *f) {$/;"	f	class:ObjBencher
set_fsid	Graylog.cc	/^void Graylog::set_fsid(const uuid_d& fsid)$/;"	f	class:ceph::logging::Graylog
set_halflife	DecayCounter.h	/^  void set_halflife(double hl) {$/;"	f	class:DecayRate
set_hash	hobject.h	/^  void set_hash(uint32_t value) { $/;"	f	struct:hobject_t
set_head_mismatch	scrub_types.cc	/^void inconsistent_snapset_wrapper::set_head_mismatch()$/;"	f	class:inconsistent_snapset_wrapper
set_headless	scrub_types.cc	/^void inconsistent_snapset_wrapper::set_headless()$/;"	f	class:inconsistent_snapset_wrapper
set_hinfo_corrupted	scrub_types.h	/^  void set_hinfo_corrupted() {$/;"	f	struct:shard_info_wrapper
set_hinfo_inconsistency	scrub_types.h	/^  void set_hinfo_inconsistency() {$/;"	f	struct:inconsistent_obj_wrapper
set_hinfo_missing	scrub_types.h	/^  void set_hinfo_missing() {$/;"	f	struct:shard_info_wrapper
set_history_size_and_duration	TrackedOp.h	/^  void set_history_size_and_duration(uint32_t new_size, uint32_t new_duration) {$/;"	f	class:OpTracker
set_history_slow_op_size_and_threshold	TrackedOp.h	/^  void set_history_slow_op_size_and_threshold(uint32_t new_size, uint32_t new_threshold) {$/;"	f	class:OpTracker
set_hostname	Graylog.cc	/^void Graylog::set_hostname(const std::string& host)$/;"	f	class:ceph::logging::Graylog
set_id	entity_name.cc	/^set_id(const std::string &id_)$/;"	f	class:EntityName
set_indent	TextTable.h	/^  void set_indent(int i) { indent = i; }$/;"	f	class:TextTable
set_info	zipkin_trace.h	/^  void set_info(const blkin_trace_info *i) {}$/;"	f	class:ZTracer::Trace
set_info_corrupted	scrub_types.cc	/^void inconsistent_snapset_wrapper::set_info_corrupted()$/;"	f	class:inconsistent_snapset_wrapper
set_info_corrupted	scrub_types.h	/^  void set_info_corrupted() {$/;"	f	struct:shard_info_wrapper
set_info_missing	scrub_types.cc	/^void inconsistent_snapset_wrapper::set_info_missing()$/;"	f	class:inconsistent_snapset_wrapper
set_info_missing	scrub_types.h	/^  void set_info_missing() {$/;"	f	struct:shard_info_wrapper
set_init_flags	ceph_context.cc	/^void CephContext::set_init_flags(int flags)$/;"	f	class:CephContext
set_ioprio	Thread.cc	/^int Thread::set_ioprio(int cls, int prio)$/;"	f	class:Thread
set_ioprio	WorkQueue.cc	/^void ThreadPool::set_ioprio(int cls, int priority)$/;"	f	class:ThreadPool
set_kernel_secret	secret.c	/^int set_kernel_secret(const char *secret, const char *key_name)$/;"	f
set_key	hobject.h	/^  void set_key(const std::string &key_) {$/;"	f	struct:hobject_t
set_keys	map_cacher.hpp	/^  void set_keys($/;"	f	class:MapCacher::MapCacher
set_log_channel	LogClient.h	/^  void set_log_channel(const std::string& v) {$/;"	f	class:LogChannel
set_log_prio	LogClient.h	/^  void set_log_prio(const std::string& v) {$/;"	f	class:LogChannel
set_log_to_monitors	LogClient.h	/^  void set_log_to_monitors(bool v) {$/;"	f	class:LogChannel
set_log_to_syslog	LogClient.h	/^  void set_log_to_syslog(bool v) {$/;"	f	class:LogChannel
set_long_description	options.h	/^  Option& set_long_description(const char* new_desc) {$/;"	f	struct:Option
set_max	AsyncReserver.h	/^  void set_max(unsigned max) {$/;"	f	class:AsyncReserver
set_max_readahead_size	Readahead.cc	/^void Readahead::set_max_readahead_size(uint64_t max_readahead_size) {$/;"	f	class:Readahead
set_max_tokens	PrioritizedQueue.h	/^    void set_max_tokens(unsigned mt) {$/;"	f	struct:PrioritizedQueue::SubQueue
set_max_tokens	mClockPriorityQueue.h	/^      void set_max_tokens(unsigned mt) {$/;"	f	struct:ceph::mClockQueue::SubQueue
set_message_attrs	EventTrace.cc	/^void EventTrace::set_message_attrs(const Message *m, string& oid, string& context, bool incl_oid)$/;"	f	class:EventTrace
set_min	options.h	/^  Option& set_min(const T& mi) {$/;"	f	struct:Option
set_min_max	options.h	/^  Option& set_min_max(const T& mi, const T& ma) {$/;"	f	struct:Option
set_min_priority	AsyncReserver.h	/^  void set_min_priority(unsigned min) {$/;"	f	class:AsyncReserver
set_min_readahead_size	Readahead.cc	/^void Readahead::set_min_readahead_size(uint64_t min_readahead_size) {$/;"	f	class:Readahead
set_missing	scrub_types.h	/^  void set_missing() {$/;"	f	struct:shard_info_wrapper
set_name	entity_name.cc	/^void EntityName::set_name(entity_name_t n)$/;"	f	class:EntityName
set_name	perf_counters.h	/^  void set_name(std::string s) {$/;"	f	class:PerfCounters
set_namespace	obj_bencher.h	/^  virtual void set_namespace(const std::string&) {}$/;"	f	class:ObjBencher
set_nonblocking	buffer.cc	/^    int set_nonblocking(int *fds) {$/;"	f	class:buffer::raw_pipe	file:
set_obj_size_info_mismatch	scrub_types.h	/^  void set_obj_size_info_mismatch() {$/;"	f	struct:shard_info_wrapper
set_object	scrub_types.cc	/^void shard_info_wrapper::set_object(const ScrubMap::object& object)$/;"	f	class:shard_info_wrapper
set_object_info_inconsistency	scrub_types.h	/^  void set_object_info_inconsistency() {$/;"	f	struct:inconsistent_obj_wrapper
set_omap_digest_mismatch	scrub_types.h	/^  void set_omap_digest_mismatch() {$/;"	f	struct:inconsistent_obj_wrapper
set_omap_digest_mismatch_info	scrub_types.h	/^  void set_omap_digest_mismatch_info() {$/;"	f	struct:shard_info_wrapper
set_outstream	obj_bencher.h	/^  void set_outstream(ostream& os) {$/;"	f	class:ObjBencher
set_params	Throttle.cc	/^bool BackoffThrottle::set_params($/;"	f	class:BackoffThrottle
set_pipe_size	buffer.cc	/^    int set_pipe_size(int *fds, long length) {$/;"	f	class:buffer::raw_pipe	file:
set_port	zipkin_trace.h	/^  void set_port(int p) {}$/;"	f	class:ZTracer::Endpoint
set_prio_adjust	perf_counters.h	/^  void set_prio_adjust(int p) {$/;"	f	class:PerfCounters
set_prio_default	perf_counters.h	/^  void set_prio_default(int prio_)$/;"	f	class:PerfCountersBuilder
set_read_error	scrub_types.h	/^  void set_read_error() {$/;"	f	struct:shard_info_wrapper
set_rval	Continuation.h	/^  void set_rval(int new_rval) { rval = new_rval; }$/;"	f	class:Continuation
set_safe	options.h	/^  Option &set_safe() {$/;"	f	struct:Option
set_shard	hobject.h	/^  void set_shard(shard_id_t s) {$/;"	f	struct:ghobject_t
set_show_time	obj_bencher.h	/^  void set_show_time(bool dt) {$/;"	f	class:ObjBencher
set_size	random_cache.hpp	/^  void set_size(size_t new_size) {$/;"	f	class:RandomCache
set_size	shared_cache.hpp	/^  void set_size(size_t new_size) {$/;"	f	class:SharedLRU
set_size	simple_cache.hpp	/^  void set_size(size_t new_size) {$/;"	f	class:SimpleLRU
set_size_and_duration	TrackedOp.h	/^  void set_size_and_duration(uint32_t new_size, uint32_t new_duration) {$/;"	f	class:OpHistory
set_size_mismatch	scrub_types.cc	/^void inconsistent_snapset_wrapper::set_size_mismatch()$/;"	f	class:inconsistent_snapset_wrapper
set_size_mismatch	scrub_types.h	/^  void set_size_mismatch() {$/;"	f	struct:inconsistent_obj_wrapper
set_size_mismatch_info	scrub_types.h	/^  void set_size_mismatch_info() {$/;"	f	struct:shard_info_wrapper
set_slow_op_size_and_threshold	TrackedOp.h	/^  void set_slow_op_size_and_threshold(uint32_t new_size, uint32_t new_threshold) {$/;"	f	class:OpHistory
set_snapset_corrupted	scrub_types.cc	/^void inconsistent_snapset_wrapper::set_snapset_corrupted()$/;"	f	class:inconsistent_snapset_wrapper
set_snapset_corrupted	scrub_types.h	/^  void set_snapset_corrupted() {$/;"	f	struct:shard_info_wrapper
set_snapset_error	scrub_types.cc	/^void inconsistent_snapset_wrapper::set_snapset_error()$/;"	f	class:inconsistent_snapset_wrapper
set_snapset_inconsistency	scrub_types.h	/^  void set_snapset_inconsistency() {$/;"	f	struct:inconsistent_obj_wrapper
set_snapset_missing	scrub_types.cc	/^void inconsistent_snapset_wrapper::set_snapset_missing()$/;"	f	class:inconsistent_snapset_wrapper
set_snapset_missing	scrub_types.h	/^  void set_snapset_missing() {$/;"	f	struct:shard_info_wrapper
set_source	buffer.cc	/^    int set_source(int fd, loff_t *off) {$/;"	f	class:buffer::raw_pipe
set_stat_error	scrub_types.h	/^  void set_stat_error() {$/;"	f	struct:shard_info_wrapper
set_state	RWLock.h	/^    void set_state(LockState s) {$/;"	f	class:final::Context
set_status	HTMLFormatter.cc	/^void HTMLFormatter::set_status(int status, const char* status_name)$/;"	f	class:ceph::HTMLFormatter
set_str_val	armor.c	/^static int set_str_val(char **pdst, const char *end, char c)$/;"	f	file:
set_syslog_facility	LogClient.h	/^  void set_syslog_facility(const std::string& v) {$/;"	f	class:LogChannel
set_tracking	TrackedOp.h	/^  void set_tracking(bool enable) {$/;"	f	class:OpTracker
set_trigger_requests	Readahead.cc	/^void Readahead::set_trigger_requests(int trigger_requests) {$/;"	f	class:Readahead
set_type	entity_name.cc	/^set_type(const char *type_)$/;"	f	class:EntityName
set_type	entity_name.cc	/^set_type(uint32_t type_)$/;"	f	class:EntityName
set_uid_gid	ceph_context.h	/^  void set_uid_gid(uid_t u, gid_t g) {$/;"	f	class:CephContext
set_uid_gid_strings	ceph_context.h	/^  void set_uid_gid_strings(std::string u, std::string g) {$/;"	f	class:CephContext
set_val	config.cc	/^int md_config_t::set_val(const std::string &key, const char *val,$/;"	f	class:md_config_t
set_val	config.h	/^  int set_val(const std::string &key, const string& s, bool meta=true,$/;"	f	struct:md_config_t
set_val_impl	config.cc	/^int md_config_t::set_val_impl(const std::string &raw_val, const Option &opt,$/;"	f	class:md_config_t
set_val_or_die	config.cc	/^void md_config_t::set_val_or_die(const std::string &key,$/;"	f	class:md_config_t
set_validator	options.h	/^  Option &set_validator(const validator_fn_t  &validator_)$/;"	f	struct:Option
set_value	options.h	/^  Option& set_value(value_t& v, T new_value) {$/;"	f	struct:Option
set_value	options.h	/^  Option& set_value(value_t& v, const T& new_value) {$/;"	f	struct:Option
set_value	options.h	/^  Option& set_value(value_t& v, const char *new_value) {$/;"	f	struct:Option
set_version	scrub_types.h	/^  void set_version(uint64_t ver) { version = ver; }$/;"	f	struct:inconsistent_obj_wrapper
set_wq	WorkQueue.h	/^  void set_wq(BaseShardedWQ* swq) {$/;"	f	class:ShardedThreadPool
shard_id	hobject.h	/^  shard_id_t shard_id;$/;"	m	struct:ghobject_t
shard_info_wrapper	scrub_types.h	/^  shard_info_wrapper(const ScrubMap::object& object) {$/;"	f	struct:shard_info_wrapper
shard_info_wrapper	scrub_types.h	/^struct shard_info_wrapper : public librados::shard_info_t {$/;"	s
sharded_in_flight_list	TrackedOp.h	/^  vector<ShardedTrackingData*> sharded_in_flight_list;$/;"	m	class:OpTracker
sharded_pool	WorkQueue.h	/^    ShardedThreadPool* sharded_pool;$/;"	m	class:ShardedThreadPool::ShardedWQ
shardedpool_cond	WorkQueue.h	/^  Cond shardedpool_cond;$/;"	m	class:ShardedThreadPool
shardedpool_lock	WorkQueue.h	/^  Mutex shardedpool_lock;$/;"	m	class:ShardedThreadPool
shardedthreadpool_worker	WorkQueue.cc	/^void ShardedThreadPool::shardedthreadpool_worker(uint32_t thread_index)$/;"	f	class:ShardedThreadPool
share	deleter.h	/^inline deleter deleter::share() {$/;"	f	class:deleter
share_address_from	zipkin_trace.h	/^  void share_address_from(const Endpoint *endpoint) {}$/;"	f	class:ZTracer::Endpoint
shared_lock_type	shunique_lock.h	/^  typedef boost::shared_lock<Mutex> shared_lock_type;$/;"	t	class:ceph::shunique_lock
should_wait	Throttle.h	/^  bool should_wait(int64_t c) const {$/;"	f	class:Throttle
show_config	config.cc	/^void md_config_t::show_config(Formatter *f)$/;"	f	class:md_config_t
show_config	config.cc	/^void md_config_t::show_config(std::ostream& out)$/;"	f	class:md_config_t
show_time	obj_bencher.h	/^  bool show_time;$/;"	m	class:ObjBencher
shunique_lock	shunique_lock.h	/^  shunique_lock(mutex_type& m, AcquireType at, std::try_to_lock_t)$/;"	f	class:ceph::shunique_lock
shunique_lock	shunique_lock.h	/^  shunique_lock(mutex_type& m, AcquireType at,$/;"	f	class:ceph::shunique_lock
shunique_lock	shunique_lock.h	/^  shunique_lock(mutex_type& m, acquire_shared_t)$/;"	f	class:ceph::shunique_lock
shunique_lock	shunique_lock.h	/^  shunique_lock(mutex_type& m, acquire_shared_t, std::adopt_lock_t)$/;"	f	class:ceph::shunique_lock
shunique_lock	shunique_lock.h	/^  shunique_lock(mutex_type& m, acquire_unique_t)$/;"	f	class:ceph::shunique_lock
shunique_lock	shunique_lock.h	/^  shunique_lock(mutex_type& m, acquire_unique_t, std::adopt_lock_t)$/;"	f	class:ceph::shunique_lock
shunique_lock	shunique_lock.h	/^  shunique_lock(shunique_lock&& l) noexcept : shunique_lock() {$/;"	f	class:ceph::shunique_lock
shunique_lock	shunique_lock.h	/^class shunique_lock {$/;"	c	namespace:ceph
shutdown	LogClient.h	/^  void shutdown() {$/;"	f	class:LogClient
shutdown	OutputDataSocket.cc	/^void OutputDataSocket::shutdown()$/;"	f	class:OutputDataSocket
shutdown	Timer.cc	/^void SafeTimer::shutdown()$/;"	f	class:SafeTimer
shutdown	TrackedOp.h	/^  bool shutdown;$/;"	m	class:OpHistory
shutdown	admin_socket.cc	/^void AdminSocket::shutdown()$/;"	f	class:AdminSocket
shutdown	ceph_crypto.cc	/^void ceph::crypto::shutdown(bool shared)$/;"	f	class:ceph::crypto
shutdown	ceph_crypto.cc	/^void ceph::crypto::shutdown(bool)$/;"	f	class:ceph::crypto
shutdown_clear	Throttle.h	/^  Cond shutdown_clear;$/;"	m	class:Throttle
shutting_down	Throttle.h	/^  bool shutting_down = false;$/;"	m	class:Throttle
sigkill	SubProcess.h	/^  int sigkill;$/;"	m	class:SubProcessTimed
signal	WorkQueue.h	/^    void signal() {$/;"	f	class:ThreadPool::PointerWQ
signal_exit	Preforker.h	/^  int signal_exit(int r) {$/;"	f	class:Preforker
signal_mask_to_str	signal.cc	/^std::string signal_mask_to_str()$/;"	f
signature_of	function_signature.h	/^struct signature_of$/;"	s
signature_of_impl	function_signature.h	/^struct signature_of_impl$/;"	s
signature_of_impl	function_signature.h	/^struct signature_of_impl<F, true>$/;"	s
signature_of_member	function_signature.h	/^struct signature_of_member$/;"	s
signed_rep	ceph_time.h	/^    typedef int64_t signed_rep;$/;"	t	namespace:ceph::time_detail
signedspan	ceph_time.h	/^    typedef std::chrono::duration<signed_rep, std::nano> signedspan;$/;"	t	namespace:ceph::time_detail
simple_spin_lock	simple_spin.h	/^inline void simple_spin_lock(std::atomic_flag *lock)$/;"	f
simple_spin_lock	simple_spin.h	/^inline void simple_spin_lock(std::atomic_flag& lock)$/;"	f
simple_spin_unlock	simple_spin.h	/^inline void simple_spin_unlock(std::atomic_flag *lock)$/;"	f
simple_spin_unlock	simple_spin.h	/^inline void simple_spin_unlock(std::atomic_flag& lock)$/;"	f
singleton	ceph_context.h	/^    T *singleton;$/;"	m	struct:CephContext::TypedSingletonWrapper
size	BackTrace.h	/^  size_t size;$/;"	m	struct:ceph::BackTrace
size	Formatter.h	/^      int size;$/;"	m	struct:ceph::JSONFormatter::json_formatter_stack_entry_d
size	MemoryModel.h	/^    long size;$/;"	m	struct:MemoryModel::snap
size	PrebufferedStreambuf.cc	/^size_t PrebufferedStreambuf::size() const$/;"	f	class:PrebufferedStreambuf
size	PrioritizedQueue.h	/^    int64_t size;$/;"	m	struct:PrioritizedQueue::SubQueue
size	WeightedPriorityQueue.h	/^	unsigned size;$/;"	m	class:WeightedPriorityQueue::Queue
size	autovector.h	/^  size_type size() const { return num_stack_items_ + vect_.size(); }$/;"	f	class:ceph::autovector
size	bit_vector.hpp	/^uint64_t BitVector<_b>::size() const {$/;"	f	class:ceph::BitVector
size	bloom_filter.hpp	/^  inline virtual std::size_t size() const$/;"	f	class:bloom_filter
size	mClockPriorityQueue.h	/^      int64_t size;$/;"	m	struct:ceph::mClockQueue::SubQueue
size	shared_cache.hpp	/^  unsigned size;$/;"	m	class:SharedLRU
size	sharedptr_registry.hpp	/^  unsigned size() {$/;"	f	class:SharedPtrRegistry
size	sstring.hh	/^            Size size;$/;"	m	struct:basic_sstring::contents::external_type
size	sstring.hh	/^            int8_t size;$/;"	m	struct:basic_sstring::contents::internal_type
size_list	bloom_filter.hpp	/^  std::vector<std::size_t> size_list;$/;"	m	class:compressible_bloom_filter
size_type	autovector.h	/^  typedef typename std::vector<T>::size_type size_type;$/;"	t	class:ceph::autovector
skip	BackTrace.h	/^  int skip;$/;"	m	struct:ceph::BackTrace
sleep	Cycles.cc	/^Cycles::sleep(uint64_t us)$/;"	f	class:Cycles
slot	ceph_crypto.h	/^      PK11SlotInfo *slot;$/;"	m	class:ceph::crypto::HMAC
slow_op	TrackedOp.h	/^  set<pair<utime_t, TrackedOpRef> > slow_op;$/;"	m	class:OpHistory
slversion	crc32c_intel_fast_asm.s	/^slversion crc32_iscsi_00, 00,   02,  0014$/;"	l
slversion	crc32c_intel_fast_zero_asm.s	/^slversion crc32_iscsi_zero_00, 00,   02,  0014$/;"	l
snap	MemoryModel.h	/^    snap() : peak(0), size(0), hwm(0), rss(0), data(0), lib(0),$/;"	f	struct:MemoryModel::snap
snap	MemoryModel.h	/^  struct snap {$/;"	s	class:MemoryModel
snap	hobject.h	/^  snapid_t snap;$/;"	m	struct:hobject_t
snaps	snap_types.h	/^  vector<snapid_t> snaps;  \/\/ existent snaps, in descending order$/;"	m	struct:SnapContext
snprintf	PrebufferedStreambuf.cc	/^int PrebufferedStreambuf::snprintf(char* dst, size_t avail) const$/;"	f	class:PrebufferedStreambuf
socket	event_socket.h	/^  int socket;$/;"	m	class:EventSocket
socket_cloexec	compat.cc	/^int socket_cloexec(int domain, int type, int protocol)$/;"	f
socketpair_cloexec	compat.cc	/^int socketpair_cloexec(int domain, int type, int protocol, int sv[2])$/;"	f
sorted	bounded_key_counter.h	/^  view_type sorted;$/;"	m	class:BoundedKeyCounter
sorted_position	bounded_key_counter.h	/^  typename view_type::iterator sorted_position;$/;"	m	class:BoundedKeyCounter
source_consumed	buffer.cc	/^    bool source_consumed;$/;"	m	class:buffer::raw_pipe	file:
span_id	zipkin_trace.h	/^    int64_t span_id;$/;"	m	struct:blkin_trace_info
spawn	SubProcess.h	/^inline int SubProcess::spawn() {$/;"	f	class:SubProcess
splice	buffer.cc	/^  void buffer::list::splice(unsigned off, unsigned len, list *claim_by \/*, bufferlist& replace_with *\/)$/;"	f	class:buffer::list
split_dashdash	ceph_argparse.cc	/^bool split_dashdash(const std::vector<const char*>& args,$/;"	f
srv_protocol_to_str	dns_resolve.h	/^    std::string srv_protocol_to_str(SRV_Protocol proto) {$/;"	f	class:ceph::DNSResolver
ss	LogClient.h	/^  stringstream ss;$/;"	m	class:LogClientTemp
stagePtr	Continuation.h	/^  typedef bool (Continuation::*stagePtr)(int r);$/;"	t	class:Continuation
stage_to_activate	Continuation.h	/^    int stage_to_activate;$/;"	m	class:Continuation::Callback
stages_in_flight	Continuation.h	/^  std::set<int> stages_in_flight;$/;"	m	class:Continuation
stages_processing	Continuation.h	/^  std::set<int> stages_processing;$/;"	m	class:Continuation
stamp	LogEntry.h	/^  utime_t stamp;$/;"	m	struct:LogEntry
stamp	LogEntry.h	/^  utime_t stamp;$/;"	m	struct:LogEntryKey
stamp	TrackedOp.h	/^    utime_t stamp;$/;"	m	struct:TrackedOp::Event
start	Finisher.cc	/^void Finisher::start()$/;"	f	class:Finisher
start	WorkQueue.cc	/^void ShardedThreadPool::start()$/;"	f	class:ShardedThreadPool
start	WorkQueue.cc	/^void ThreadPool::start()$/;"	f	class:ThreadPool
start_after	scrub_types.h	/^  librados::object_id_t start_after;$/;"	m	struct:scrub_ls_arg_t
start_command	CommandTable.h	/^  T& start_command()$/;"	f	class:CommandTable
start_op	AsyncOpTracker.cc	/^void AsyncOpTracker::start_op() {$/;"	f	class:AsyncOpTracker
start_op	ContextCompletion.cc	/^void ContextCompletion::start_op() {$/;"	f	class:ceph::ContextCompletion
start_op	Throttle.cc	/^C_OrderedThrottle *OrderedThrottle::start_op(Context *on_finish) {$/;"	f	class:OrderedThrottle
start_op	Throttle.cc	/^void SimpleThrottle::start_op()$/;"	f	class:SimpleThrottle
start_service_thread	ceph_context.cc	/^void CephContext::start_service_thread()$/;"	f	class:CephContext
start_threads	WorkQueue.cc	/^void ShardedThreadPool::start_threads()$/;"	f	class:ShardedThreadPool
start_threads	WorkQueue.cc	/^void ThreadPool::start_threads()$/;"	f	class:ThreadPool
start_time	obj_bencher.h	/^  utime_t start_time; \/\/start time for benchmark$/;"	m	struct:bench_data
started	obj_bencher.h	/^  int started;$/;"	m	struct:bench_data
state	RWLock.h	/^    LockState state;$/;"	m	class:final::Context
state	TrackedOp.h	/^  atomic<int> state = {STATE_UNTRACKED};$/;"	m	class:TrackedOp
state_string	TrackedOp.h	/^  virtual const char *state_string() const {$/;"	f	class:TrackedOp
state_t	Checksummer.h	/^    typedef XXH32_state_t *state_t;$/;"	t	struct:Checksummer::xxhash32
state_t	Checksummer.h	/^    typedef XXH64_state_t *state_t;$/;"	t	struct:Checksummer::xxhash64
state_t	Checksummer.h	/^    typedef int state_t;$/;"	t	struct:Checksummer::crc32c
state_t	Checksummer.h	/^    typedef int state_t;$/;"	t	struct:Checksummer::crc32c_16
state_t	Checksummer.h	/^    typedef int state_t;$/;"	t	struct:Checksummer::crc32c_8
states	dns_resolve.h	/^    std::list<res_state> states;$/;"	m	class:ceph::DNSResolver
static_from_cstring	buffer.cc	/^buffer::list buffer::list::static_from_cstring(char* c) {$/;"	f	class:buffer::list
static_from_mem	buffer.cc	/^buffer::list buffer::list::static_from_mem(char* c, size_t l) {$/;"	f	class:buffer::list
static_from_string	buffer.cc	/^buffer::list buffer::list::static_from_string(string& s) {$/;"	f	class:buffer::list
status_printer	obj_bencher.cc	/^void *ObjBencher::status_printer(void *_bencher) {$/;"	f	class:ObjBencher
std	LogEntry.h	/^namespace std {$/;"	n
std	ceph_time.h	/^namespace std {$/;"	n
std	hobject.h	/^namespace std {$/;"	n
std	lockdep.cc	/^namespace std {$/;"	n	file:
std	shunique_lock.h	/^namespace std {$/;"	n
std	sstring.hh	/^namespace std {$/;"	n
std_fd_op	SubProcess.h	/^  enum std_fd_op{$/;"	g	class:SubProcess
stderr_op	SubProcess.h	/^  std_fd_op stderr_op;$/;"	m	class:SubProcess
stderr_pipe_in_fd	SubProcess.h	/^  int stderr_pipe_in_fd;$/;"	m	class:SubProcess
stdin_op	SubProcess.h	/^  std_fd_op stdin_op;$/;"	m	class:SubProcess
stdin_pipe_out_fd	SubProcess.h	/^  int stdin_pipe_out_fd;$/;"	m	class:SubProcess
stdout_op	SubProcess.h	/^  std_fd_op stdout_op;$/;"	m	class:SubProcess
stdout_pipe_in_fd	SubProcess.h	/^  int stdout_pipe_in_fd;$/;"	m	class:SubProcess
stop	Finisher.cc	/^void Finisher::stop()$/;"	f	class:Finisher
stop	WorkQueue.cc	/^void ShardedThreadPool::stop()$/;"	f	class:ShardedThreadPool
stop	WorkQueue.cc	/^void ThreadPool::stop(bool clear_after)$/;"	f	class:ThreadPool
stop_threads	WorkQueue.h	/^  std::atomic<bool> stop_threads = { false };$/;"	m	class:ShardedThreadPool
stopping	Timer.h	/^  bool stopping;$/;"	m	class:SafeTimer
store_trace	TrackedOp.h	/^  ZTracer::Trace store_trace;$/;"	m	class:TrackedOp
str	TrackedOp.h	/^    string str;$/;"	m	struct:TrackedOp::Event
str	ceph_argparse.cc	/^  const char *str;$/;"	m	struct:strict_str_convert	file:
str	entity_name.cc	/^  const char *str;$/;"	m	struct:str_to_entity_type_t	file:
str	sstring.hh	/^            char_type str[max_size];$/;"	m	struct:basic_sstring::contents::internal_type
str	sstring.hh	/^            char_type* str;$/;"	m	struct:basic_sstring::contents::external_type
str	sstring.hh	/^    char_type* str() {$/;"	f	class:basic_sstring
str	sstring.hh	/^    const char_type* str() const {$/;"	f	class:basic_sstring
str_begin	sstring.hh	/^const char* str_begin(const char(&s)[N]) { return s; }$/;"	f
str_begin	sstring.hh	/^const char_type* str_begin(const basic_sstring<char_type, size_type, max_size>& s) { return s.begin(); }$/;"	f
str_end	sstring.hh	/^const char* str_end(const char(&s)[N]) { return str_begin(s) + str_len(s); }$/;"	f
str_end	sstring.hh	/^const char_type* str_end(const basic_sstring<char_type, size_type, max_size>& s) { return s.end(); }$/;"	f
str_len	sstring.hh	/^size_t str_len(const First& first, const Second& second, const Tail&... tail) {$/;"	f
str_len	sstring.hh	/^size_t str_len(const char(&s)[N]) { return N - 1; }$/;"	f
str_len	sstring.hh	/^size_type str_len(const basic_sstring<char_type, size_type, max_size>& s) { return s.size(); }$/;"	f
str_to_ceph_entity_type	entity_name.cc	/^uint32_t str_to_ceph_entity_type(const char * str)$/;"	f
str_to_entity_type_t	entity_name.cc	/^struct str_to_entity_type_t {$/;"	s	file:
str_to_level	LogEntry.cc	/^clog_type LogEntry::str_to_level(std::string const &str)$/;"	f	class:LogEntry
strict	WeightedPriorityQueue.h	/^    Queue strict;$/;"	m	class:WeightedPriorityQueue
strict_iec_cast	strtol.cc	/^T strict_iec_cast(const boost::string_view str, std::string *err)$/;"	f
strict_iec_cast	strtol.cc	/^T strict_iec_cast(const char *str, std::string *err)$/;"	f
strict_iecstrtoll	strtol.cc	/^uint64_t strict_iecstrtoll(const boost::string_view str, std::string *err)$/;"	f
strict_iecstrtoll	strtol.cc	/^uint64_t strict_iecstrtoll(const char *str, std::string *err)$/;"	f
strict_si_cast	strtol.cc	/^T strict_si_cast(const boost::string_view str, std::string *err)$/;"	f
strict_si_cast	strtol.cc	/^T strict_si_cast(const char *str, std::string *err)$/;"	f
strict_sistrtoll	strtol.cc	/^uint64_t strict_sistrtoll(const boost::string_view str, std::string *err)$/;"	f
strict_sistrtoll	strtol.cc	/^uint64_t strict_sistrtoll(const char *str, std::string *err)$/;"	f
strict_str_convert	ceph_argparse.cc	/^  strict_str_convert(const char *str,  std::string *err)$/;"	f	struct:strict_str_convert
strict_str_convert	ceph_argparse.cc	/^struct strict_str_convert {$/;"	s	file:
strict_strtod	strtol.cc	/^double strict_strtod(const boost::string_view str, std::string *err)$/;"	f
strict_strtod	strtol.cc	/^double strict_strtod(const char *str, std::string *err)$/;"	f
strict_strtof	strtol.cc	/^float strict_strtof(const boost::string_view str, std::string *err)$/;"	f
strict_strtof	strtol.cc	/^float strict_strtof(const char *str, std::string *err)$/;"	f
strict_strtol	strtol.cc	/^int strict_strtol(const boost::string_view str, int base, std::string *err)$/;"	f
strict_strtol	strtol.cc	/^int strict_strtol(const char *str, int base, std::string *err)$/;"	f
strict_strtoll	strtol.cc	/^long long strict_strtoll(const boost::string_view str, int base, std::string *err)$/;"	f
strict_strtoll	strtol.cc	/^long long strict_strtoll(const char *str, int base, std::string *err)$/;"	f
string_to_clog_type	LogEntry.cc	/^clog_type string_to_clog_type(const string& s)$/;"	f
string_to_syslog_facility	LogEntry.cc	/^int string_to_syslog_facility(string s)$/;"	f
string_to_syslog_level	LogEntry.cc	/^int string_to_syslog_level(string s)$/;"	f
string_to_vec	ceph_argparse.cc	/^void string_to_vec(std::vector<std::string>& args, std::string argstr)$/;"	f
stringify_visitor	cmdparse.cc	/^class stringify_visitor : public boost::static_visitor<string>$/;"	c	file:
strings	BackTrace.h	/^  char **strings;$/;"	m	struct:ceph::BackTrace
sub	histogram.h	/^  void sub(const pow2_hist_t& o) {$/;"	f	struct:pow2_hist_t
substr	sstring.hh	/^    basic_sstring substr(size_t from, size_t len = npos)  const {$/;"	f	class:basic_sstring
substr_of	buffer.cc	/^  void buffer::list::substr_of(const list& other, unsigned off, unsigned len)$/;"	f	class:buffer::list
subsys	config.h	/^  ceph::logging::SubsystemMap subsys;$/;"	m	struct:md_config_t
success	ceph_json.h	/^  bool success;$/;"	m	class:JSONParser
suicide_grace	HeartbeatMap.h	/^  time_t grace, suicide_grace;$/;"	m	struct:ceph::heartbeat_handle_d
suicide_grace	WorkQueue.h	/^    time_t suicide_grace;$/;"	m	class:ThreadPool::TPHandle
suicide_interval	WorkQueue.h	/^    time_t timeout_interval, suicide_interval;$/;"	m	class:ShardedThreadPool::BaseShardedWQ
suicide_interval	WorkQueue.h	/^    time_t timeout_interval, suicide_interval;$/;"	m	struct:ThreadPool::WorkQueue_
suicide_timeout	HeartbeatMap.h	/^  std::atomic<unsigned> timeout = { 0 }, suicide_timeout = { 0 };$/;"	m	struct:ceph::heartbeat_handle_d
supported	sstring.hh	/^  static constexpr bool supported = true;$/;"	m	struct:denc_traits
suppressContent	ceph_crypto_cms.cc	/^    PRBool suppressContent;$/;"	m	struct:decodeOptionsStr	file:
suspend	ceph_timer.h	/^      void suspend() {$/;"	f	class:ceph::timer_detail::timer
suspend_tp_timeout	WorkQueue.cc	/^void ThreadPool::TPHandle::suspend_tp_timeout()$/;"	f	class:ThreadPool::TPHandle
suspended	ceph_timer.h	/^      bool suspended;$/;"	m	class:ceph::timer_detail::timer
swap	buffer.cc	/^  void buffer::list::swap(list& other)$/;"	f	class:buffer::list
swap	buffer.cc	/^  void buffer::ptr::swap(ptr& other)$/;"	f	class:buffer::ptr
swap	hobject.h	/^  void swap(ghobject_t &o) {$/;"	f	struct:ghobject_t
swap	hobject.h	/^  void swap(hobject_t &o) {$/;"	f	struct:hobject_t
swap	shunique_lock.h	/^  void swap(ceph::shunique_lock<Mutex> sh1,$/;"	f	namespace:std
swap	tracked_int_ptr.hpp	/^  void swap(TrackedIntPtr &other) {$/;"	f	class:TrackedIntPtr
symkey	ceph_crypto.h	/^      PK11SymKey *symkey;$/;"	m	class:ceph::crypto::HMAC
sync_filesystem	sync_filesystem.h	/^inline int sync_filesystem(int fd)$/;"	f
syslog_facility	LogClient.h	/^  std::string syslog_facility;$/;"	m	class:LogChannel
t	ceph_timer.h	/^	typename TC::time_point t;$/;"	m	struct:ceph::timer_detail::timer::event
table	bloom_filter.hpp	/^  inline const cell_type* table() const$/;"	f	class:bloom_filter
table_size_	bloom_filter.hpp	/^  std::size_t         table_size_;   \/\/\/< bit table size in bytes$/;"	m	class:bloom_filter
tags	options.h	/^  std::list<const char*> tags;$/;"	m	struct:Option
tail	LogEntry.h	/^  list<LogEntry> tail;$/;"	m	struct:LogSummary
take	Throttle.cc	/^int64_t Throttle::take(int64_t c)$/;"	f	class:Throttle
take	Throttle.cc	/^uint64_t BackoffThrottle::take(uint64_t c)$/;"	f	class:BackoffThrottle
take_tokens	PrioritizedQueue.h	/^    void take_tokens(unsigned t) {$/;"	f	struct:PrioritizedQueue::SubQueue
take_tokens	mClockPriorityQueue.h	/^      void take_tokens(unsigned t) {$/;"	f	struct:ceph::mClockQueue::SubQueue
target_element_count_	bloom_filter.hpp	/^  std::size_t         target_element_count_;  \/\/\/< target number of unique insertions$/;"	m	class:bloom_filter
tget	perf_counters.cc	/^utime_t PerfCounters::tget(int idx) const$/;"	f	class:PerfCounters
thread	Timer.h	/^  SafeTimerThread *thread;$/;"	m	class:SafeTimer
thread	ceph_timer.h	/^      std::thread thread;$/;"	m	class:ceph::timer_detail::timer
thread_id	HeartbeatMap.h	/^  pthread_t thread_id;$/;"	m	struct:ceph::heartbeat_handle_d
thread_id	Thread.h	/^  pthread_t thread_id;$/;"	m	class:Thread
thread_index	WorkQueue.h	/^    uint32_t thread_index;$/;"	m	struct:ShardedThreadPool::WorkThreadSharded
thread_name	Finisher.h	/^  string thread_name;$/;"	m	class:Finisher
thread_name	Thread.h	/^  const char *thread_name;$/;"	m	class:Thread
thread_name	WorkQueue.h	/^  string thread_name;$/;"	m	class:ShardedThreadPool
thread_name	WorkQueue.h	/^  string thread_name;$/;"	m	class:ThreadPool
threads_shardedpool	WorkQueue.h	/^  vector<WorkThreadSharded*> threads_shardedpool;$/;"	m	class:ShardedThreadPool
tid	CommandTable.h	/^  ceph_tid_t tid;$/;"	m	class:CommandOp
time_detail	ceph_time.cc	/^  namespace time_detail {$/;"	n	namespace:ceph	file:
time_detail	ceph_time.h	/^  namespace time_detail {$/;"	n	namespace:ceph
time_point	ceph_time.h	/^      typedef std::chrono::time_point<coarse_mono_clock> time_point;$/;"	t	class:ceph::time_detail::coarse_mono_clock
time_point	ceph_time.h	/^      typedef std::chrono::time_point<coarse_real_clock> time_point;$/;"	t	class:ceph::time_detail::coarse_real_clock
time_point	ceph_time.h	/^      typedef std::chrono::time_point<mono_clock> time_point;$/;"	t	class:ceph::time_detail::mono_clock
time_point	ceph_time.h	/^      typedef std::chrono::time_point<real_clock> time_point;$/;"	t	class:ceph::time_detail::real_clock
timedout	SubProcess.h	/^static bool timedout = false; \/\/ only used after fork$/;"	v
timeout	HeartbeatMap.h	/^  std::atomic<unsigned> timeout = { 0 }, suicide_timeout = { 0 };$/;"	m	struct:ceph::heartbeat_handle_d
timeout	SubProcess.h	/^  int timeout;$/;"	m	class:SubProcessTimed
timeout_interval	WorkQueue.h	/^    time_t timeout_interval, suicide_interval;$/;"	m	class:ShardedThreadPool::BaseShardedWQ
timeout_interval	WorkQueue.h	/^    time_t timeout_interval, suicide_interval;$/;"	m	struct:ThreadPool::WorkQueue_
timeout_sighandler	SubProcess.h	/^static void timeout_sighandler(int sig) {$/;"	f
timer	ceph_timer.h	/^      timer() {$/;"	f	class:ceph::timer_detail::timer
timer	ceph_timer.h	/^      timer(construct_suspended_t) {$/;"	f	class:ceph::timer_detail::timer
timer	ceph_timer.h	/^    class timer {$/;"	c	namespace:ceph::timer_detail
timer_detail	ceph_timer.h	/^  namespace timer_detail {$/;"	n	namespace:ceph
timer_thread	Timer.cc	/^void SafeTimer::timer_thread()$/;"	f	class:SafeTimer
timer_thread	ceph_timer.h	/^      void timer_thread() {$/;"	f	class:ceph::timer_detail::timer
timespan	ceph_time.h	/^    typedef std::chrono::duration<rep, std::nano> timespan;$/;"	t	namespace:ceph::time_detail
tinc	perf_counters.cc	/^void PerfCounters::tinc(int idx, ceph::timespan amt, uint32_t avgcount)$/;"	f	class:PerfCounters
tinc	perf_counters.cc	/^void PerfCounters::tinc(int idx, utime_t amt, uint32_t avgcount)$/;"	f	class:PerfCounters
to_ceph_timespec	ceph_time.cc	/^    struct ceph_timespec coarse_real_clock::to_ceph_timespec($/;"	f	class:ceph::time_detail::coarse_real_clock
to_ceph_timespec	ceph_time.cc	/^    struct ceph_timespec real_clock::to_ceph_timespec(const time_point& t) {$/;"	f	class:ceph::time_detail::real_clock
to_ceph_timespec	ceph_time.cc	/^    void coarse_real_clock::to_ceph_timespec(const time_point& t,$/;"	f	class:ceph::time_detail::coarse_real_clock
to_ceph_timespec	ceph_time.cc	/^    void real_clock::to_ceph_timespec(const time_point& t,$/;"	f	class:ceph::time_detail::real_clock
to_cstr	entity_name.cc	/^to_cstr() const$/;"	f	class:EntityName
to_double	ceph_time.h	/^      static double to_double(const time_point& t) {$/;"	f	class:ceph::time_detail::coarse_real_clock
to_double	ceph_time.h	/^      static double to_double(const time_point& t) {$/;"	f	class:ceph::time_detail::real_clock
to_finish	WorkQueue.h	/^    list<U> to_finish;$/;"	m	class:ThreadPool::WorkQueueVal
to_legacy	fs_types.cc	/^void file_layout_t::to_legacy(ceph_file_layout *fl) const$/;"	f	class:file_layout_t
to_lower_underscore	Formatter.cc	/^char XMLFormatter::to_lower_underscore(char c) const$/;"	f	class:ceph::XMLFormatter
to_microseconds	Cycles.cc	/^uint64_t Cycles::to_microseconds(uint64_t cycles, double cycles_per_sec)$/;"	f	class:Cycles
to_nanoseconds	Cycles.cc	/^uint64_t Cycles::to_nanoseconds(uint64_t cycles, double cycles_per_sec)$/;"	f	class:Cycles
to_process	WorkQueue.h	/^    list<U> to_process;$/;"	m	class:ThreadPool::WorkQueueVal
to_raw_object	deleter.h	/^  static void* to_raw_object(impl* i) {$/;"	f	class:final
to_raw_object	deleter.h	/^  void* to_raw_object() const {$/;"	f	class:final
to_seconds	Cycles.cc	/^double Cycles::to_seconds(uint64_t cycles, double cycles_per_sec)$/;"	f	class:Cycles
to_sstring	sstring.hh	/^    static inline string_type to_sstring(const char* value) {$/;"	f	class:basic_sstring
to_sstring	sstring.hh	/^    static inline string_type to_sstring(double value) {$/;"	f	class:basic_sstring
to_sstring	sstring.hh	/^    static inline string_type to_sstring(float value) {$/;"	f	class:basic_sstring
to_sstring	sstring.hh	/^    static inline string_type to_sstring(int value) {$/;"	f	class:basic_sstring
to_sstring	sstring.hh	/^    static inline string_type to_sstring(long double value) {$/;"	f	class:basic_sstring
to_sstring	sstring.hh	/^    static inline string_type to_sstring(long long value) {$/;"	f	class:basic_sstring
to_sstring	sstring.hh	/^    static inline string_type to_sstring(long value) {$/;"	f	class:basic_sstring
to_sstring	sstring.hh	/^    static inline string_type to_sstring(sstring value) {$/;"	f	class:basic_sstring
to_sstring	sstring.hh	/^    static inline string_type to_sstring(unsigned long long value) {$/;"	f	class:basic_sstring
to_sstring	sstring.hh	/^    static inline string_type to_sstring(unsigned long value) {$/;"	f	class:basic_sstring
to_sstring	sstring.hh	/^    static inline string_type to_sstring(unsigned value) {$/;"	f	class:basic_sstring
to_sstring	sstring.hh	/^inline string_type to_sstring(T value) {$/;"	f
to_sstring_sprintf	sstring.hh	/^    static inline string_type to_sstring_sprintf(T value, const char* fmt) {$/;"	f	class:basic_sstring
to_str	buffer.cc	/^  string buffer::list::to_str() const {$/;"	f	class:buffer::list
to_str	entity_name.cc	/^to_str() const$/;"	f	class:EntityName
to_str	hobject.cc	/^string hobject_t::to_str() const$/;"	f	class:hobject_t
to_system_time_point	ceph_time.h	/^      static std::chrono::time_point<Clock, Duration> to_system_time_point($/;"	f	class:ceph::time_detail::real_clock
to_system_time_point	ceph_time.h	/^      static time_point to_system_time_point($/;"	f	class:ceph::time_detail::real_clock
to_timespec	ceph_time.h	/^      static struct timespec to_timespec(const time_point& t) {$/;"	f	class:ceph::time_detail::coarse_real_clock
to_timespec	ceph_time.h	/^      static struct timespec to_timespec(const time_point& t) {$/;"	f	class:ceph::time_detail::real_clock
to_timespec	ceph_time.h	/^      static void to_timespec(const time_point& t, struct timespec& ts) {$/;"	f	class:ceph::time_detail::coarse_real_clock
to_timespec	ceph_time.h	/^      static void to_timespec(const time_point& t, struct timespec& ts) {$/;"	f	class:ceph::time_detail::real_clock
to_timeval	ceph_time.h	/^      static struct timeval to_timeval(const time_point& t) {$/;"	f	class:ceph::time_detail::coarse_real_clock
to_timeval	ceph_time.h	/^      static struct timeval to_timeval(const time_point& t) {$/;"	f	class:ceph::time_detail::real_clock
to_timeval	ceph_time.h	/^      static void to_timeval(const time_point& t, struct timeval& tv) {$/;"	f	class:ceph::time_detail::coarse_real_clock
to_timeval	ceph_time.h	/^      static void to_timeval(const time_point& t, struct timeval& tv) {$/;"	f	class:ceph::time_detail::real_clock
tokens	PrioritizedQueue.h	/^    unsigned tokens, max_tokens;$/;"	m	struct:PrioritizedQueue::SubQueue
tokens	mClockPriorityQueue.h	/^      unsigned tokens, max_tokens;$/;"	m	struct:ceph::mClockQueue::SubQueue
total_prio	WeightedPriorityQueue.h	/^      unsigned total_prio;$/;"	m	class:WeightedPriorityQueue::Queue
total_priority	PrioritizedQueue.h	/^  int64_t total_priority;$/;"	m	class:PrioritizedQueue
tpinit	EventTrace.cc	/^bool EventTrace::tpinit = false;$/;"	m	class:EventTrace	file:
tpinit	EventTrace.h	/^  static bool tpinit;$/;"	m	class:EventTrace
tr	cohort_lru.h	/^	TTree tr;$/;"	m	struct:cohort::lru::TreeX::Partition
trace_id	zipkin_trace.h	/^    int64_t trace_id;$/;"	m	struct:blkin_trace_info
trace_oid_elapsed	EventTrace.cc	/^void EventTrace::trace_oid_elapsed(const Message *m, const char *event, double elapsed,$/;"	f	class:EventTrace
trace_oid_elapsed	EventTrace.cc	/^void EventTrace::trace_oid_elapsed(const char *oid, const char *event, const char *context,$/;"	f	class:EventTrace
trace_oid_event	EventTrace.cc	/^void EventTrace::trace_oid_event(const Message *m, const char *event, const char *file,$/;"	f	class:EventTrace
trace_oid_event	EventTrace.cc	/^void EventTrace::trace_oid_event(const char *oid, const char *event, const char *context,$/;"	f	class:EventTrace
tracepoint	EventTrace.cc	29;"	d	file:
tracepoint_provider	TracepointProvider.h	/^    TracepointProvider *tracepoint_provider;$/;"	m	class:TracepointProvider::Singleton
track	RWLock.h	/^  bool track, lockdep;$/;"	m	class:final
track_c_str	buffer.cc	/^  void buffer::track_c_str(bool b) {$/;"	f	class:buffer
track_cached_crc	buffer.cc	/^  void buffer::track_cached_crc(bool b) {$/;"	f	class:buffer
tracked_op_list_t	TrackedOp.h	/^    &TrackedOp::tracker_item> > tracked_op_list_t;$/;"	t	class:TrackedOp
tracker	TrackedOp.h	/^  OpTracker *tracker;          \/\/\/< the tracker we are associated with$/;"	m	class:TrackedOp
tracker_item	TrackedOp.h	/^  boost::intrusive::list_member_hook<> tracker_item;$/;"	m	class:TrackedOp
tracking_enabled	TrackedOp.h	/^  bool tracking_enabled;$/;"	m	class:OpTracker
tracking_start	TrackedOp.h	/^  void tracking_start() {$/;"	f	class:TrackedOp
traits_ty	PrebufferedStreambuf.h	/^  typedef std::char_traits<char> traits_ty;$/;"	t	class:PrebufferedStreambuf
trim	str_map.cc	/^string trim(const string& str) {$/;"	f
trim_cache	random_cache.hpp	/^  void trim_cache(uint64_t evict_count) {$/;"	f	class:RandomCache
trim_cache	shared_cache.hpp	/^  void trim_cache(list<VPtr> *to_release) {$/;"	f	class:SharedLRU
trim_cache	simple_cache.hpp	/^  void trim_cache() {$/;"	f	class:SimpleLRU
trim_whitespace	ConfUtils.cc	/^trim_whitespace(std::string &str, bool strip_internal)$/;"	f	class:ConfFile
truncate	SloppyCRCMap.cc	/^void SloppyCRCMap::truncate(uint64_t offset)$/;"	f	class:SloppyCRCMap
try_assign_to_mempool	buffer.cc	/^    void try_assign_to_mempool(int pool) {$/;"	f	class:buffer::raw
try_assign_to_mempool	buffer.cc	/^  void buffer::list::try_assign_to_mempool(int pool)$/;"	f	class:buffer::list
try_assign_to_mempool	buffer.cc	/^  void buffer::ptr::try_assign_to_mempool(int pool) {$/;"	f	class:buffer::ptr
try_create	Thread.cc	/^int Thread::try_create(size_t stacksize)$/;"	f	class:Thread
try_get_read	RWLock.h	/^  bool try_get_read() const {$/;"	f	class:final
try_get_write	RWLock.h	/^  bool try_get_write(bool lockdep=true) {$/;"	f	class:final
try_lock	mutex_debug.h	/^  bool try_lock(bool no_lockdep = false) {$/;"	f	class:ceph::mutex_debug_detail::mutex_debugging
try_lock	shunique_lock.h	/^  bool try_lock() {$/;"	f	class:ceph::shunique_lock
try_lock	shunique_lock.h	/^  bool try_lock(ceph::acquire_shared_t) {$/;"	f	class:ceph::shunique_lock
try_lock	shunique_lock.h	/^  bool try_lock(ceph::acquire_unique_t) {$/;"	f	class:ceph::shunique_lock
try_lock_for	shunique_lock.h	/^  bool try_lock_for(ceph::acquire_shared_t,$/;"	f	class:ceph::shunique_lock
try_lock_for	shunique_lock.h	/^  bool try_lock_for(ceph::acquire_unique_t,$/;"	f	class:ceph::shunique_lock
try_lock_for	shunique_lock.h	/^  bool try_lock_for(const std::chrono::duration<Rep, Period>& dur) {$/;"	f	class:ceph::shunique_lock
try_lock_impl	mutex_debug.h	/^  bool try_lock_impl() {$/;"	f	class:ceph::mutex_debug_detail::mutex_debug_impl
try_lock_shared	shunique_lock.h	/^  bool try_lock_shared() {$/;"	f	class:ceph::shunique_lock
try_lock_shared_for	shunique_lock.h	/^  bool try_lock_shared_for(const std::chrono::duration<Rep, Period>& dur) {$/;"	f	class:ceph::shunique_lock
try_lock_shared_until	shunique_lock.h	/^  bool try_lock_shared_until(const std::chrono::time_point<Clock,$/;"	f	class:ceph::shunique_lock
try_lock_until	shunique_lock.h	/^  bool try_lock_until(ceph::acquire_shared_t,$/;"	f	class:ceph::shunique_lock
try_lock_until	shunique_lock.h	/^  bool try_lock_until(ceph::acquire_unique_t,$/;"	f	class:ceph::shunique_lock
try_lock_until	shunique_lock.h	/^  bool try_lock_until(const std::chrono::time_point<Clock, Duration>& time) {$/;"	f	class:ceph::shunique_lock
try_merge	interval_map.h	/^  void try_merge(mapiter niter) {$/;"	f	class:interval_map
tset	perf_counters.cc	/^void PerfCounters::tset(int idx, utime_t amt)$/;"	f	class:PerfCounters
type	LogClient.h	/^  clog_type type;$/;"	m	class:LogClientTemp
type	entity_name.cc	/^  uint32_t type;$/;"	m	struct:str_to_entity_type_t	file:
type	entity_name.h	/^  uint32_t type;$/;"	m	struct:EntityName
type	event_socket.h	/^  int type;$/;"	m	class:EventSocket
type	function_signature.h	/^    typedef typename boost::function_types::function_type<F>::type type;$/;"	t	struct:signature_of_impl
type	function_signature.h	/^    typedef typename boost::function_types::function_type<L>::type type;$/;"	t	struct:signature_of_member
type	function_signature.h	/^    typedef typename signature_of_impl<F, boost::is_class<F>::value>::type type;$/;"	t	struct:signature_of
type	function_signature.h	/^    typedef typename signature_of_member<decltype(&F::operator())>::type type;$/;"	t	struct:signature_of_impl
type	inline_variant.h	/^		P>::type type;$/;"	t	struct:detail::as_map::insert_helper::apply
type	inline_variant.h	/^	typedef boost::mpl::pair<AType, Ind> type;$/;"	t	struct:detail::make_pair::apply
type	inline_variant.h	/^        typedef Type1 type;$/;"	t	struct:check_same::apply
type	inline_variant.h	/^        typedef typename boost::remove_const< typename boost::remove_reference<parameter_type>::type >::type type;$/;"	t	struct:detail::function_arg_extractor::apply
type	inline_variant.h	/^        typedef void type;$/;"	t	struct:detail::check_in::apply
type	inline_variant.h	/^    typedef generic_visitor<Result, Variant, Functions...> type;$/;"	t	struct:detail::generic_visitor
type	inline_variant.h	/^    typedef generic_visitor<result_type, Variant, Functions...> type;$/;"	t	struct:get_generic_visitor
type	inline_variant.h	/^    typedef typename boost::mpl::fold<Seq, boost::mpl::map0<>, insert_helper>::type type;$/;"	t	struct:detail::as_map
type	options.h	/^  const type_t type;$/;"	m	struct:Option
type	perf_counters.h	/^    enum perfcounter_type_d type;$/;"	m	struct:PerfCounters::perf_counter_data_any_d	typeref:enum:PerfCounters::perf_counter_data_any_d::perfcounter_type_d
type_id	entity_name.h	/^  std::string type_id;$/;"	m	struct:EntityName
type_t	options.h	/^  enum type_t {$/;"	g	struct:Option
type_to_str	options.h	/^  const char *type_to_str(type_t t) const {$/;"	f	struct:Option
u	sstring.hh	/^    } u;$/;"	m	class:basic_sstring	typeref:union:basic_sstring::contents
u64	perf_counters.h	/^    std::atomic<uint64_t> u64 = { 0 };$/;"	m	struct:PerfCounters::perf_counter_data_any_d
uint8_t	perf_counters.h	/^enum perfcounter_type_d : uint8_t$/;"	g
uint8_t	perf_counters.h	/^enum unit_t : uint8_t$/;"	g
unblock_all_signals	signal.cc	/^void unblock_all_signals(sigset_t *old_sigset)$/;"	f
underflow	PrebufferedStreambuf.cc	/^PrebufferedStreambuf::int_type PrebufferedStreambuf::underflow()$/;"	f	class:PrebufferedStreambuf
unique	shunique_lock.h	/^    none, unique, shared$/;"	m	struct:ceph::shunique_lock::ownership
unique_lock	cohort_lru.h	/^      typedef std::unique_lock<LK> unique_lock;$/;"	t	class:cohort::lru::TreeX
unique_lock_type	shunique_lock.h	/^  typedef std::unique_lock<Mutex> unique_lock_type;$/;"	t	class:ceph::shunique_lock
uniquity	backport14.h	/^struct uniquity {$/;"	s	namespace:ceph::_backport14
uniquity	backport14.h	/^struct uniquity<T[N]> {$/;"	s	namespace:ceph::_backport14
uniquity	backport14.h	/^struct uniquity<T[]> {$/;"	s	namespace:ceph::_backport14
unit	perf_counters.h	/^    enum unit_t unit;$/;"	m	struct:PerfCounters::perf_counter_data_any_d	typeref:enum:PerfCounters::perf_counter_data_any_d::unit_t
unlikely	likely.h	22;"	d
unlock	RWLock.h	/^    void unlock() {$/;"	f	class:final::Context
unlock	RWLock.h	/^    void unlock() {$/;"	f	class:final::RLocker
unlock	RWLock.h	/^    void unlock() {$/;"	f	class:final::WLocker
unlock	RWLock.h	/^  void unlock(bool lockdep=true) const {$/;"	f	class:final
unlock	WorkQueue.h	/^    void unlock() {$/;"	f	class:ThreadPool::BatchWorkQueue
unlock	WorkQueue.h	/^    void unlock() {$/;"	f	class:ThreadPool::WorkQueue
unlock	WorkQueue.h	/^    void unlock() {$/;"	f	class:ThreadPool::WorkQueueVal
unlock	WorkQueue.h	/^  void unlock() {$/;"	f	class:ThreadPool
unlock	cohort_lru.h	/^      void unlock() {$/;"	f	class:cohort::lru::TreeX
unlock	mutex_debug.h	/^  void unlock(bool no_lockdep = false) {$/;"	f	class:ceph::mutex_debug_detail::mutex_debugging
unlock	shunique_lock.h	/^  void unlock() {$/;"	f	class:ceph::shunique_lock
unpause	WorkQueue.cc	/^void ShardedThreadPool::unpause()$/;"	f	class:ShardedThreadPool
unpause	WorkQueue.cc	/^void ThreadPool::unpause()$/;"	f	class:ThreadPool
unref	cohort_lru.h	/^      void unref(Object* o, uint32_t flags) {$/;"	f	class:cohort::lru::LRU
unregister_command	admin_socket.cc	/^int AdminSocket::unregister_command(std::string command)$/;"	f	class:AdminSocket
unregister_inflight_op	TrackedOp.cc	/^void OpTracker::unregister_inflight_op(TrackedOp *i)$/;"	f	class:OpTracker
unused_tail_length	buffer.cc	/^  unsigned buffer::ptr::unused_tail_length() const$/;"	f	class:buffer::ptr
update	Readahead.cc	/^Readahead::extent_t Readahead::update(const vector<extent_t>& extents, uint64_t limit) {$/;"	f	class:Readahead
update	Readahead.cc	/^Readahead::extent_t Readahead::update(uint64_t offset, uint64_t length, uint64_t limit) {$/;"	f	class:Readahead
update_config	LogClient.cc	/^void LogChannel::update_config(map<string,string> &log_to_monitors,$/;"	f	class:LogChannel
update_crc32	sctp_crc32.c	/^update_crc32(uint32_t crc32c,$/;"	f	file:
update_legacy_val	config.cc	/^void md_config_t::update_legacy_val(const Option &opt,$/;"	f	class:md_config_t
update_max_pipe_size	buffer.cc	/^  int update_max_pipe_size() {$/;"	f
upper_bound	histogram.h	/^  int32_t upper_bound() const {$/;"	f	struct:pow2_hist_t
url_escape	url_escape.cc	/^std::string url_escape(const std::string& s)$/;"	f
url_unescape	url_escape.cc	/^std::string url_unescape(const std::string& s)$/;"	f
use_perf	Throttle.h	/^  const bool use_perf;$/;"	m	class:BackoffThrottle
use_perf	Throttle.h	/^  const bool use_perf;$/;"	m	class:Throttle
va_ceph_argparse_binary_flag	ceph_argparse.cc	/^static bool va_ceph_argparse_binary_flag(std::vector<const char*> &args,$/;"	f	file:
va_ceph_argparse_witharg	ceph_argparse.cc	/^static int va_ceph_argparse_witharg(std::vector<const char*> &args,$/;"	f	file:
val	ConfUtils.h	/^  std::string key, val, newsection;$/;"	m	class:ConfLine
val	DecayCounter.h	/^  double val;           \/\/ value$/;"	m	class:DecayCounter
val	config.cc	/^  Option::value_t val;$/;"	m	class:assign_visitor	file:
valid	zipkin_trace.h	/^  bool valid() const { return false; }$/;"	f	class:ZTracer::Trace
validate	options.cc	/^int Option::validate(const Option::value_t &new_value, std::string *err) const$/;"	f	class:Option
validate_schema	config.cc	/^void md_config_t::validate_schema()$/;"	f	class:md_config_t
validator	options.h	/^  validator_fn_t validator;$/;"	m	struct:Option
validator_fn_t	options.h	/^  typedef std::function<int(std::string *, std::string *)> validator_fn_t;$/;"	t	struct:Option
vals	scrub_types.h	/^  std::vector<bufferlist> vals;$/;"	m	struct:scrub_ls_result_t
value	lru_map.h	/^    V value;$/;"	m	struct:lru_map::entry
value	options.h	/^  value_t value;$/;"	m	struct:Option
value_greater	bounded_key_counter.h	/^  static bool value_greater(const value_type *lhs, const value_type *rhs)$/;"	f	class:BoundedKeyCounter
value_sanitize	util.cc	/^static char* value_sanitize(char *value)$/;"	f	file:
value_set	util.cc	/^static bool value_set(char *buf, const char *prefix,$/;"	f	file:
value_t	Checksummer.h	/^    typedef __le16 value_t;$/;"	t	struct:Checksummer::crc32c_16
value_t	Checksummer.h	/^    typedef __le32 value_t;$/;"	t	struct:Checksummer::crc32c
value_t	Checksummer.h	/^    typedef __le32 value_t;$/;"	t	struct:Checksummer::xxhash32
value_t	Checksummer.h	/^    typedef __le64 value_t;$/;"	t	struct:Checksummer::xxhash64
value_t	Checksummer.h	/^    typedef __u8 value_t;$/;"	t	struct:Checksummer::crc32c_8
value_type	autovector.h	/^    typedef TValueType value_type;$/;"	t	class:ceph::autovector::iterator_impl
value_type	autovector.h	/^  typedef T value_type;$/;"	t	class:ceph::autovector
value_type	cohort_lru.h	/^      typedef T value_type;$/;"	t	class:cohort::lru::TreeX
values	config.h	/^  std::map<std::string, Option::value_t> values;$/;"	m	struct:md_config_t
values_	autovector.h	/^  value_type values_[kSize];       \/\/ the first `kSize` items$/;"	m	class:ceph::autovector
vec_stddev	obj_bencher.cc	/^static T vec_stddev(vector<T>& v)$/;"	f	file:
vec_to_argv	ceph_argparse.cc	/^void vec_to_argv(const char *argv0, std::vector<const char*>& args,$/;"	f
vect_	autovector.h	/^    TAutoVector* vect_ = nullptr;$/;"	m	class:ceph::autovector::iterator_impl
vect_	autovector.h	/^  std::vector<T> vect_;$/;"	m	class:ceph::autovector
vel	DecayCounter.h	/^  double vel;           \/\/ recent velocity$/;"	m	class:DecayCounter
verify	Checksummer.h	/^  static int verify($/;"	f	class:Checksummer
verify_config	TracepointProvider.cc	/^void TracepointProvider::verify_config(const struct md_config_t *conf) {$/;"	f	class:TracepointProvider
version	LogEntry.h	/^  version_t version;$/;"	m	struct:LogSummary
visit_values	perf_histogram.h	/^  void visit_values(FDE onDimensionEnter, FV onValue, FDL onDimensionLeave,$/;"	f	class:PerfHistogram
wait	Cond.h	/^  int wait() {$/;"	f	class:C_SaferCond
wait	RefCountedObj.h	/^  int wait() {$/;"	f	struct:RefCountedCond
wait	Throttle.cc	/^bool Throttle::wait(int64_t m)$/;"	f	class:Throttle
wait	Throttle.h	/^  std::chrono::duration<double> wait() {$/;"	f	class:BackoffThrottle
wait	WorkQueue.h	/^  void wait(Cond &c) {$/;"	f	class:ThreadPool
wait_cond	WorkQueue.h	/^  Cond wait_cond;$/;"	m	class:ShardedThreadPool
wait_for_empty	Finisher.cc	/^void Finisher::wait_for_empty()$/;"	f	class:Finisher
wait_for_ops	AsyncOpTracker.cc	/^void AsyncOpTracker::wait_for_ops(Context *on_finish) {$/;"	f	class:AsyncOpTracker
wait_for_pending	Readahead.cc	/^void Readahead::wait_for_pending() {$/;"	f	class:Readahead
wait_for_pending	Readahead.cc	/^void Readahead::wait_for_pending(Context *ctx) {$/;"	f	class:Readahead
wait_for_ret	Throttle.cc	/^int OrderedThrottle::wait_for_ret() {$/;"	f	class:OrderedThrottle
wait_for_ret	Throttle.cc	/^int SimpleThrottle::wait_for_ret()$/;"	f	class:SimpleThrottle
waiter_mutex	Cond.h	/^  Mutex *waiter_mutex;$/;"	m	class:Cond
waiters	Throttle.h	/^  list<std::condition_variable*> waiters;$/;"	m	class:BackoffThrottle
waiters	Throttle.h	/^  uint32_t waiters = 0;$/;"	m	class:OrderedThrottle
waiters	Throttle.h	/^  uint32_t waiters = 0;$/;"	m	class:SimpleThrottle
waiting	shared_cache.hpp	/^  int waiting;$/;"	m	class:SharedLRU
waiting	sharedptr_registry.hpp	/^  int waiting;$/;"	m	class:SharedPtrRegistry
wake	WorkQueue.h	/^    void wake() {$/;"	f	class:ThreadPool::BatchWorkQueue
wake	WorkQueue.h	/^    void wake() {$/;"	f	class:ThreadPool::WorkQueue
wake	WorkQueue.h	/^  void wake() {$/;"	f	class:ThreadPool
want_new_desc	TrackedOp.h	/^  mutable atomic<bool> want_new_desc = {false};$/;"	m	class:TrackedOp
warn	LogClient.h	/^  LogClientTemp warn() {$/;"	f	class:LogChannel
warn	LogClient.h	/^  void warn(std::stringstream &s) {$/;"	f	class:LogChannel
warn_interval_multiplier	TrackedOp.h	/^  uint32_t warn_interval_multiplier = 1; \/\/< limits output of a given op warning$/;"	m	class:TrackedOp
wasted	buffer.cc	/^  unsigned buffer::ptr::wasted() const$/;"	f	class:buffer::ptr
weak_refs	shared_cache.hpp	/^  map<K, pair<WeakVPtr, V*>, C> weak_refs;$/;"	m	class:SharedLRU
what	buffer.cc	/^  const char * buffer::bad_alloc::what() const throw () {$/;"	f	class:buffer::bad_alloc
what	buffer.cc	/^  const char * buffer::end_of_buffer::what() const throw () {$/;"	f	class:buffer::end_of_buffer
what	buffer.cc	/^  const char * buffer::error::what() const throw () {$/;"	f	class:buffer::error
what	buffer.cc	/^  const char * buffer::malformed_input::what() const throw () {$/;"	f	class:buffer::malformed_input
who	LogEntry.h	/^  entity_inst_t who;$/;"	m	struct:LogEntry
who	LogEntry.h	/^  entity_inst_t who;$/;"	m	struct:LogEntryKey
width	TextTable.h	/^    int width;$/;"	m	struct:TextTable::TextTableColumn
with_counters	perf_counters.cc	/^void PerfCountersCollection::with_counters(std::function<void($/;"	f	class:PerfCountersCollection
work_queues	WorkQueue.h	/^  vector<WorkQueue_*> work_queues;$/;"	m	class:ThreadPool
worker	WorkQueue.cc	/^void ThreadPool::worker(WorkThread *wt)$/;"	f	class:ThreadPool
wq	WorkQueue.h	/^  BaseShardedWQ* wq;$/;"	m	class:ShardedThreadPool
wq	WorkQueue.h	/^  GenContextWQ *wq;$/;"	m	class:C_QueueInWQ
write	SloppyCRCMap.cc	/^void SloppyCRCMap::write(uint64_t offset, uint64_t len, const bufferlist& bl,$/;"	f	class:SloppyCRCMap
write	buffer.cc	/^  void buffer::list::write(int off, int len, std::ostream& out) const$/;"	f	class:buffer::list
write_bench	obj_bencher.cc	/^int ObjBencher::write_bench(int secondsToRun,$/;"	f	class:ObjBencher
write_fd	buffer.cc	/^int buffer::list::write_fd(int fd) const$/;"	f	class:buffer::list
write_fd	buffer.cc	/^int buffer::list::write_fd(int fd, uint64_t offset) const$/;"	f	class:buffer::list
write_fd_zero_copy	buffer.cc	/^int buffer::list::write_fd_zero_copy(int fd) const$/;"	f	class:buffer::list
write_file	buffer.cc	/^int buffer::list::write_file(const char *fn, int mode)$/;"	f	class:buffer::list
write_raw_data	Formatter.cc	/^void JSONFormatter::write_raw_data(const char *data)$/;"	f	class:ceph::JSONFormatter
write_raw_data	Formatter.cc	/^void TableFormatter::write_raw_data(const char *data) {$/;"	f	class:ceph::TableFormatter
write_raw_data	Formatter.cc	/^void XMLFormatter::write_raw_data(const char *data)$/;"	f	class:ceph::XMLFormatter
write_stream	buffer.cc	/^void buffer::list::write_stream(std::ostream &out) const$/;"	f	class:buffer::list
xio_mempool	buffer.cc	/^    xio_mempool(struct xio_reg_mem *_mp, unsigned l) :$/;"	f	class:buffer::xio_mempool
xio_mempool	buffer.cc	/^  class buffer::xio_mempool : public buffer::raw {$/;"	c	class:buffer	file:
xio_msg_buffer	buffer.cc	/^    xio_msg_buffer(XioDispatchHook* _m_hook, const char *d,$/;"	f	class:buffer::xio_msg_buffer
xio_msg_buffer	buffer.cc	/^  class buffer::xio_msg_buffer : public buffer::raw {$/;"	c	class:buffer	file:
xxhash32	Checksummer.h	/^  struct xxhash32 {$/;"	s	class:Checksummer
xxhash64	Checksummer.h	/^  struct xxhash64 {$/;"	s	class:Checksummer
zero	SloppyCRCMap.cc	/^void SloppyCRCMap::zero(uint64_t offset, uint64_t len)$/;"	f	class:SloppyCRCMap
zero	buffer.cc	/^  void buffer::list::zero()$/;"	f	class:buffer::list
zero	buffer.cc	/^  void buffer::list::zero(unsigned o, unsigned l)$/;"	f	class:buffer::list
zero	buffer.cc	/^  void buffer::ptr::zero()$/;"	f	class:buffer::ptr
zero	buffer.cc	/^  void buffer::ptr::zero(bool crc_reset)$/;"	f	class:buffer::ptr
zero	buffer.cc	/^  void buffer::ptr::zero(unsigned o, unsigned l)$/;"	f	class:buffer::ptr
zero	buffer.cc	/^  void buffer::ptr::zero(unsigned o, unsigned l, bool crc_reset)$/;"	f	class:buffer::ptr
zero	ceph_time.h	/^      static time_point zero() {$/;"	f	class:ceph::time_detail::coarse_real_clock
zero	ceph_time.h	/^      static time_point zero() {$/;"	f	class:ceph::time_detail::mono_clock
zero_copy_to_fd	buffer.cc	/^    virtual int zero_copy_to_fd(int fd, loff_t *offset) {$/;"	f	class:buffer::raw
zero_copy_to_fd	buffer.cc	/^  int buffer::ptr::zero_copy_to_fd(int fd, int64_t *offset) const$/;"	f	class:buffer::ptr
zero_crc	SloppyCRCMap.h	/^  uint32_t zero_crc;$/;"	m	class:SloppyCRCMap
zeroes	crc32c_ppc_asm.S	/^#define zeroes		v29$/;"	d
ztrace_init	zipkin_trace.h	/^static inline int ztrace_init() { return 0; }$/;"	f	namespace:ZTracer
~AdminSocket	admin_socket.cc	/^AdminSocket::~AdminSocket()$/;"	f	class:AdminSocket
~AdminSocketHook	admin_socket.h	/^  virtual ~AdminSocketHook() {}$/;"	f	class:AdminSocketHook
~AsyncOpTracker	AsyncOpTracker.cc	/^AsyncOpTracker::~AsyncOpTracker() {$/;"	f	class:AsyncOpTracker
~BackTrace	BackTrace.h	/^  ~BackTrace() {$/;"	f	struct:ceph::BackTrace
~BackoffThrottle	Throttle.cc	/^BackoffThrottle::~BackoffThrottle()$/;"	f	class:BackoffThrottle
~BaseShardedWQ	WorkQueue.h	/^    virtual ~BaseShardedWQ() {}$/;"	f	class:ShardedThreadPool::BaseShardedWQ
~CephContext	ceph_context.cc	/^CephContext::~CephContext()$/;"	f	class:CephContext
~CommandTable	CommandTable.h	/^  ~CommandTable()$/;"	f	class:CommandTable
~Cond	Cond.h	/^  virtual ~Cond() { $/;"	f	class:Cond
~ConfFile	ConfUtils.cc	/^~ConfFile()$/;"	f	class:ConfFile
~Continuation	Continuation.h	/^  virtual ~Continuation() { assert(on_finish == NULL); }$/;"	f	class:Continuation
~DNSResolver	dns_resolve.cc	/^DNSResolver::~DNSResolver()$/;"	f	class:ceph::DNSResolver
~Digest	ceph_crypto.h	/^      ~Digest () {$/;"	f	class:ceph::crypto::Digest
~DoutPrefixProvider	dout.h	/^  virtual ~DoutPrefixProvider() {}$/;"	f	class:DoutPrefixProvider
~EventTrace	EventTrace.cc	/^EventTrace::~EventTrace()$/;"	f	class:EventTrace
~Finisher	Finisher.h	/^  ~Finisher() {$/;"	f	class:Finisher
~ForkWatcher	ceph_context.h	/^    virtual ~ForkWatcher() {}$/;"	f	class:CephContext::ForkWatcher
~Formatter	Formatter.cc	/^Formatter::~Formatter() { }$/;"	f	class:ceph::Formatter
~Graylog	Graylog.cc	/^Graylog::~Graylog()$/;"	f	class:ceph::logging::Graylog
~HMAC	ceph_crypto.cc	/^ceph::crypto::HMAC::~HMAC()$/;"	f	class:ceph::crypto::HMAC
~HMACSHA1	ceph_crypto.cc	/^ceph::crypto::HMACSHA1::~HMACSHA1()$/;"	f	class:ceph::crypto::HMACSHA1
~HMACSHA256	ceph_crypto.cc	/^ceph::crypto::HMACSHA256::~HMACSHA256()$/;"	f	class:ceph::crypto::HMACSHA256
~HTMLFormatter	HTMLFormatter.cc	/^HTMLFormatter::~HTMLFormatter()$/;"	f	class:ceph::HTMLFormatter
~HeartbeatMap	HeartbeatMap.cc	/^HeartbeatMap::~HeartbeatMap()$/;"	f	class:ceph::HeartbeatMap
~JSONObj	ceph_json.cc	/^JSONObj::~JSONObj()$/;"	f	class:JSONObj
~JSONObjIter	ceph_json.cc	/^JSONObjIter::~JSONObjIter()$/;"	f	class:JSONObjIter
~JSONParser	ceph_json.cc	/^JSONParser::~JSONParser()$/;"	f	class:JSONParser
~LRU	cohort_lru.h	/^      ~LRU() { delete[] qlane; }$/;"	f	class:cohort::lru::LRU
~Locker	Mutex.h	/^    ~Locker() {$/;"	f	class:Mutex::Locker
~LogClient	LogClient.h	/^  virtual ~LogClient() {$/;"	f	class:LogClient
~LogClientTemp	LogClient.cc	/^LogClientTemp::~LogClientTemp()$/;"	f	class:LogClientTemp
~Mutex	Mutex.cc	/^Mutex::~Mutex() {$/;"	f	class:Mutex
~ObjBencher	obj_bencher.h	/^  virtual ~ObjBencher() {}$/;"	f	class:ObjBencher
~Object	cohort_lru.h	/^      virtual ~Object() {}$/;"	f	class:cohort::lru::Object
~ObjectFactory	cohort_lru.h	/^      virtual ~ObjectFactory() {};$/;"	f	class:cohort::lru::ObjectFactory
~OpHistory	TrackedOp.h	/^  ~OpHistory() {$/;"	f	class:OpHistory
~OpQueue	OpQueue.h	/^    virtual ~OpQueue() {}; $/;"	f	class:OpQueue
~OpTracker	TrackedOp.cc	/^OpTracker::~OpTracker() {$/;"	f	class:OpTracker
~OrderedThrottle	Throttle.cc	/^OrderedThrottle::~OrderedThrottle() {$/;"	f	class:OrderedThrottle
~OutputDataSocket	OutputDataSocket.cc	/^OutputDataSocket::~OutputDataSocket()$/;"	f	class:OutputDataSocket
~Partition	cohort_lru.h	/^	~Partition() {$/;"	f	struct:cohort::lru::TreeX::Partition
~PerfCounters	perf_counters.cc	/^PerfCounters::~PerfCounters()$/;"	f	class:PerfCounters
~PerfCountersBuilder	perf_counters.cc	/^PerfCountersBuilder::~PerfCountersBuilder()$/;"	f	class:PerfCountersBuilder
~PerfCountersCollection	perf_counters.cc	/^PerfCountersCollection::~PerfCountersCollection()$/;"	f	class:PerfCountersCollection
~Plugin	PluginRegistry.h	/^    virtual ~Plugin() {}$/;"	f	class:ceph::Plugin
~PluginRegistry	PluginRegistry.cc	/^PluginRegistry::~PluginRegistry()$/;"	f	class:PluginRegistry
~PriCache	PriorityCache.cc	/^  PriCache::~PriCache() {$/;"	f	class:PriorityCache::PriCache
~RLocker	RWLock.h	/^    ~RLocker() {$/;"	f	class:final::RLocker
~RWLock	RWLock.h	/^  ~RWLock() {$/;"	f	class:final
~RandomCache	random_cache.hpp	/^  ~RandomCache() {$/;"	f	class:RandomCache
~Readahead	Readahead.cc	/^Readahead::~Readahead() {$/;"	f	class:Readahead
~RefCountedObject	RefCountedObj.h	/^  virtual ~RefCountedObject() {$/;"	f	struct:RefCountedObject
~RefCountedWaitObject	RefCountedObj.h	/^  virtual ~RefCountedWaitObject() {$/;"	f	struct:RefCountedWaitObject
~ResolvHWrapper	dns_resolve.h	/^    virtual ~ResolvHWrapper() {}$/;"	f	class:ceph::ResolvHWrapper
~SafeTimer	Timer.cc	/^SafeTimer::~SafeTimer()$/;"	f	class:SafeTimer
~ShardedThreadPool	WorkQueue.h	/^  ~ShardedThreadPool(){};$/;"	f	class:ShardedThreadPool
~SharedLRU	shared_cache.hpp	/^  ~SharedLRU() {$/;"	f	class:SharedLRU
~SimpleThrottle	Throttle.cc	/^SimpleThrottle::~SimpleThrottle()$/;"	f	class:SimpleThrottle
~Singleton	TracepointProvider.h	/^    ~Singleton() {$/;"	f	class:TracepointProvider::Singleton
~SingletonWrapper	ceph_context.h	/^    virtual ~SingletonWrapper() {}$/;"	f	struct:CephContext::SingletonWrapper
~StoreDriver	map_cacher.hpp	/^  virtual ~StoreDriver() {}$/;"	f	class:MapCacher::StoreDriver
~SubProcess	SubProcess.h	/^inline SubProcess::~SubProcess() {$/;"	f	class:SubProcess
~TextTable	TextTable.h	/^  ~TextTable() {}$/;"	f	class:TextTable
~TextTableColumn	TextTable.h	/^    ~TextTableColumn() {}$/;"	f	struct:TextTable::TextTableColumn
~Thread	Thread.cc	/^Thread::~Thread()$/;"	f	class:Thread
~ThreadPool	WorkQueue.cc	/^ThreadPool::~ThreadPool()$/;"	f	class:ThreadPool
~Throttle	Throttle.cc	/^Throttle::~Throttle()$/;"	f	class:Throttle
~TracepointProvider	TracepointProvider.cc	/^TracepointProvider::~TracepointProvider() {$/;"	f	class:TracepointProvider
~TrackedIntPtr	tracked_int_ptr.hpp	/^  ~TrackedIntPtr() {$/;"	f	class:TrackedIntPtr
~TrackedOp	TrackedOp.h	/^  virtual ~TrackedOp() {}$/;"	f	class:TrackedOp
~Transaction	map_cacher.hpp	/^  virtual ~Transaction() {}$/;"	f	class:MapCacher::Transaction
~TreeX	cohort_lru.h	/^      ~TreeX() {$/;"	f	class:cohort::lru::TreeX
~Tub	Tub.h	/^  ~Tub() {$/;"	f	class:Tub
~UpdateContext	lru_map.h	/^      virtual ~UpdateContext() {}$/;"	f	class:lru_map::UpdateContext
~WLocker	RWLock.h	/^    ~WLocker() {$/;"	f	class:final::WLocker
~WorkQueue_	WorkQueue.h	/^    virtual ~WorkQueue_() {}$/;"	f	struct:ThreadPool::WorkQueue_
~bloom_filter	bloom_filter.hpp	/^  virtual ~bloom_filter()$/;"	f	class:bloom_filter
~deleter	deleter.h	/^inline deleter::~deleter() {$/;"	f	class:deleter
~impl	deleter.h	/^  virtual ~impl() {}$/;"	f	struct:deleter::impl
~iterator_impl	autovector.h	/^    ~iterator_impl() {}$/;"	f	class:ceph::autovector::iterator_impl
~lockdep_stopper_t	lockdep.cc	/^  ~lockdep_stopper_t() {$/;"	f	struct:lockdep_stopper_t
~lru_map	lru_map.h	/^  virtual ~lru_map() {}$/;"	f	class:lru_map
~md_config_obs_t	config_obs.h	/^  virtual ~md_config_obs_t() {}$/;"	f	class:md_config_obs_t
~md_config_t	config.cc	/^md_config_t::~md_config_t()$/;"	f	class:md_config_t
~mutex_debug_impl	mutex_debug.h	/^  ~mutex_debug_impl() {$/;"	f	class:ceph::mutex_debug_detail::mutex_debug_impl
~mutex_debugging_base	mutex_debug.cc	/^mutex_debugging_base::~mutex_debugging_base() {$/;"	f	class:ceph::mutex_debug_detail::mutex_debugging_base
~raw	buffer.cc	/^    virtual ~raw() {$/;"	f	class:buffer::raw
~raw_hack_aligned	buffer.cc	/^    ~raw_hack_aligned() {$/;"	f	class:buffer::raw_hack_aligned
~shunique_lock	shunique_lock.h	/^  ~shunique_lock() {$/;"	f	class:ceph::shunique_lock
~timer	ceph_timer.h	/^      ~timer() {$/;"	f	class:ceph::timer_detail::timer
~xio_mempool	buffer.cc	/^    ~xio_mempool() {}$/;"	f	class:buffer::xio_mempool
