!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ACCEPTING	xio/XioConnection.h	/^    ACCEPTING,$/;"	m	class:XioConnection::session_startup_states
ACTIVE	xio/XioConnection.h	/^  enum type { ACTIVE, PASSIVE };$/;"	e	enum:XioConnection::type
ALIGN_TO_PAGE_SIZE	async/rdma/Infiniband.h	34;"	d
ASYNC_COALESCE_THRESHOLD	async/AsyncConnection.cc	/^const int ASYNC_COALESCE_THRESHOLD = 256;$/;"	v
ASYNC_IOV_MAX	async/AsyncConnection.h	/^static const int ASYNC_IOV_MAX = (IOV_MAX >= 1024 ? IOV_MAX \/ 4 : IOV_MAX);$/;"	v
Accepter	simple/Accepter.h	/^  Accepter(SimpleMessenger *r, uint64_t n) $/;"	f	class:Accepter
Accepter	simple/Accepter.h	/^class Accepter : public Thread {$/;"	c
AssociatedCenters	async/Event.h	/^    AssociatedCenters(CephContext *c) {$/;"	f	struct:EventCenter::AssociatedCenters
AssociatedCenters	async/Event.h	/^  struct AssociatedCenters {$/;"	s	class:EventCenter
AsyncConnection	async/AsyncConnection.cc	/^AsyncConnection::AsyncConnection(CephContext *cct, AsyncMessenger *m, DispatchQueue *q,$/;"	f	class:AsyncConnection
AsyncConnection	async/AsyncConnection.h	/^class AsyncConnection : public Connection {$/;"	c
AsyncConnectionRef	async/AsyncConnection.h	/^typedef boost::intrusive_ptr<AsyncConnection> AsyncConnectionRef;$/;"	t
AsyncMessenger	async/AsyncMessenger.cc	/^AsyncMessenger::AsyncMessenger(CephContext *cct, entity_name_t name,$/;"	f	class:AsyncMessenger
AsyncMessenger	async/AsyncMessenger.h	/^class AsyncMessenger : public SimplePolicyMessenger {$/;"	c
BUFFER_DATA	xio/XioMessenger.cc	/^  BUFFER_DATA$/;"	e	enum:bl_type	file:
BUFFER_MIDDLE	xio/XioMessenger.cc	/^  BUFFER_MIDDLE,$/;"	e	enum:bl_type	file:
BUFFER_PAYLOAD	xio/XioMessenger.cc	/^  BUFFER_PAYLOAD,$/;"	e	enum:bl_type	file:
CACHE_LINE_SIZE	xio/XioPortal.h	34;"	d
CACHE_PAD	xio/XioPortal.h	36;"	d
CANWRITE	async/AsyncConnection.h	/^    CANWRITE,$/;"	m	class:AsyncConnection::WriteStatus
CEPH_ARRAY_MAP_HH_	async/dpdk/array_map.h	24;"	d
CEPH_ASYNCMESSENGER_H	async/AsyncMessenger.h	18;"	d
CEPH_CIRCULAR_BUFFER_HH_	async/dpdk/circular_buffer.h	24;"	d
CEPH_COMMON_NET_UTILS_H	async/net_handler.h	18;"	d
CEPH_CONNECTION_H	Connection.h	16;"	d
CEPH_DISPATCHER_H	Dispatcher.h	17;"	d
CEPH_DISPATCHQUEUE_H	DispatchQueue.h	16;"	d
CEPH_DPDK_DEV_H	async/dpdk/DPDK.h	37;"	d
CEPH_DPDK_RTE_H_	async/dpdk/dpdk_rte.h	19;"	d
CEPH_DPDK_TCP_H_	async/dpdk/TCP.h	24;"	d
CEPH_EVENTDPDK_H	async/dpdk/EventDPDK.h	17;"	d
CEPH_INFINIBAND_H	async/rdma/Infiniband.h	18;"	d
CEPH_IP_TYPES_H_H	async/dpdk/ip_types.h	38;"	d
CEPH_LW_SHARED_PTR_H_	async/dpdk/shared_ptr.h	24;"	d
CEPH_MESSAGE_H	Message.h	16;"	d
CEPH_MESSENGER_H	Messenger.h	18;"	d
CEPH_MSGR_PIPE_H	simple/Pipe.h	16;"	d
CEPH_MSG_ACCEPTER_H	simple/Accepter.h	16;"	d
CEPH_MSG_ARP_H_	async/dpdk/ARP.h	38;"	d
CEPH_MSG_ASYNCCONNECTION_H	async/AsyncConnection.h	18;"	d
CEPH_MSG_ASYNC_POSIXSTACK_H	async/PosixStack.h	18;"	d
CEPH_MSG_ASYNC_STACK_H	async/Stack.h	18;"	d
CEPH_MSG_BYTEORDER_H_	async/dpdk/byteorder.h	37;"	d
CEPH_MSG_CHECKSUM_H_	async/dpdk/IPChecksum.h	37;"	d
CEPH_MSG_CONST_H_	async/dpdk/const.h	37;"	d
CEPH_MSG_DPDKSTACK_H	async/dpdk/DPDKStack.h	16;"	d
CEPH_MSG_DPDK_ALIGN_HH_	async/dpdk/align.h	23;"	d
CEPH_MSG_DPDK_CAPTURE_H	async/dpdk/capture.h	17;"	d
CEPH_MSG_DPDK_NET_H	async/dpdk/net.h	16;"	d
CEPH_MSG_DPDK_QUEUE_H_	async/dpdk/queue.h	23;"	d
CEPH_MSG_DPDK_TCP_STACK_H	async/dpdk/TCP-Stack.h	25;"	d
CEPH_MSG_ETHERNET_H_	async/dpdk/ethernet.h	24;"	d
CEPH_MSG_EVENTEPOLL_H	async/EventEpoll.h	18;"	d
CEPH_MSG_EVENTKQUEUE_H	async/EventKqueue.h	18;"	d
CEPH_MSG_EVENTSELECT_H	async/EventSelect.h	18;"	d
CEPH_MSG_EVENT_H	async/Event.h	18;"	d
CEPH_MSG_IP_H_	async/dpdk/IP.h	38;"	d
CEPH_MSG_PACKET_H_	async/dpdk/Packet.h	38;"	d
CEPH_MSG_PACKET_UTIL_H_	async/dpdk/PacketUtil.h	37;"	d
CEPH_MSG_PIPECONNECTION_H	simple/PipeConnection.h	16;"	d
CEPH_MSG_RDMASTACK_H	async/rdma/RDMAStack.h	18;"	d
CEPH_MSG_STREAM_H_	async/dpdk/stream.h	37;"	d
CEPH_MSG_TOEPLITZ_H_	async/dpdk/toeplitz.h	45;"	d
CEPH_MSG_TYPES_H	msg_types.h	16;"	d
CEPH_SIMPLEMESSENGER_H	simple/SimpleMessenger.h	16;"	d
CEPH_TRANSFER_H_	async/dpdk/transfer.h	23;"	d
CEPH_USERSPACEEVENT_H	async/dpdk/UserspaceEvent.h	17;"	d
CLIENT	msg_types.h	/^  static entity_name_t CLIENT(int64_t i=NEW) { return entity_name_t(TYPE_CLIENT, i); }$/;"	f	class:entity_name_t
CLOSED	async/dpdk/TCP.h	/^    static constexpr tcp_state CLOSED         = tcp_state::CLOSED;$/;"	m	class:tcp_state::tcp_option::option_kind::tcp::tcb
CLOSED	async/dpdk/TCP.h	/^  CLOSED          = (1 << 0),$/;"	m	class:tcp_state
CLOSE_WAIT	async/dpdk/TCP.h	/^    static constexpr tcp_state CLOSE_WAIT     = tcp_state::CLOSE_WAIT;$/;"	m	class:tcp_state::tcp_option::option_kind::tcp::tcb
CLOSE_WAIT	async/dpdk/TCP.h	/^  CLOSE_WAIT      = (1 << 7),$/;"	m	class:tcp_state
CLOSING	async/dpdk/TCP.h	/^    static constexpr tcp_state CLOSING        = tcp_state::CLOSING;$/;"	m	class:tcp_state::tcp_option::option_kind::tcp::tcb
CLOSING	async/dpdk/TCP.h	/^  CLOSING         = (1 << 8),$/;"	m	class:tcp_state
CONNECTING	xio/XioConnection.h	/^    CONNECTING,$/;"	m	class:XioConnection::session_startup_states
CQ_DEPTH	async/rdma/Infiniband.cc	/^static const uint32_t CQ_DEPTH = 30000;$/;"	v	file:
CRYPTOPP_ENABLE_NAMESPACE_WEAK	async/dpdk/TCP.h	36;"	d
CState	xio/XioConnection.h	/^    explicit CState(XioConnection* _xcon)$/;"	f	class:XioConnection::CState
CState	xio/XioConnection.h	/^  class CState$/;"	c	class:XioConnection
C_actual_remove_tcb	async/dpdk/TCP.h	/^    C_actual_remove_tcb(tcb *t): tc(t->shared_from_this()) {}$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::C_actual_remove_tcb
C_actual_remove_tcb	async/dpdk/TCP.h	/^  class C_actual_remove_tcb : public EventCallback {$/;"	c	class:tcp_state::tcp_option::option_kind::tcp
C_all_data_acked	async/dpdk/TCP.h	/^    C_all_data_acked(tcb *t): tc(t) {}$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::C_all_data_acked
C_all_data_acked	async/dpdk/TCP.h	/^  class C_all_data_acked : public EventCallback {$/;"	c	class:tcp_state::tcp_option::option_kind::tcp
C_arp_learn	async/dpdk/net.cc	/^  C_arp_learn(DPDKWorker *w, ethernet_address l2, ipv4_address l3)$/;"	f	class:C_arp_learn
C_arp_learn	async/dpdk/net.cc	/^class C_arp_learn : public EventCallback {$/;"	c	file:
C_clean_handler	async/AsyncConnection.cc	/^  explicit C_clean_handler(AsyncConnectionRef c): conn(c) {}$/;"	f	class:C_clean_handler
C_clean_handler	async/AsyncConnection.cc	/^class C_clean_handler : public EventCallback {$/;"	c	file:
C_drain	async/Stack.cc	/^  explicit C_drain(size_t c)$/;"	f	class:C_drain
C_drain	async/Stack.cc	/^class C_drain : public EventCallback {$/;"	c	file:
C_free_on_cpu	async/dpdk/Packet.cc	/^  C_free_on_cpu(deleter &&d, std::function<void()> &&c):$/;"	f	class:C_free_on_cpu
C_free_on_cpu	async/dpdk/Packet.cc	/^class C_free_on_cpu : public EventCallback {$/;"	c	file:
C_handle_arp_timeout	async/dpdk/ARP.h	/^    C_handle_arp_timeout(arp_for *a, l3addr addr, bool first):$/;"	f	class:arp_for::C_handle_arp_timeout
C_handle_arp_timeout	async/dpdk/ARP.h	/^  class C_handle_arp_timeout : public EventCallback {$/;"	c	class:arp_for
C_handle_connection	async/rdma/RDMAStack.h	/^    C_handle_connection(RDMAConnectedSocketImpl *w): csi(w), active(true) {}$/;"	f	class:RDMAConnectedSocketImpl::C_handle_connection
C_handle_connection	async/rdma/RDMAStack.h	/^  class C_handle_connection : public EventCallback {$/;"	c	class:RDMAConnectedSocketImpl
C_handle_cq_async	async/rdma/RDMAStack.h	/^    C_handle_cq_async(RDMADispatcher *w): dispatcher(w) {}$/;"	f	class:RDMADispatcher::C_handle_cq_async
C_handle_cq_async	async/rdma/RDMAStack.h	/^  class C_handle_cq_async : public EventCallback {$/;"	c	class:RDMADispatcher
C_handle_cq_tx	async/rdma/RDMAStack.h	/^    C_handle_cq_tx(RDMAWorker *w): worker(w) {}$/;"	f	class:RDMAWorker::C_handle_cq_tx
C_handle_cq_tx	async/rdma/RDMAStack.h	/^  class C_handle_cq_tx : public EventCallback {$/;"	c	class:RDMAWorker
C_handle_delayed_ack	async/dpdk/TCP.h	/^    C_handle_delayed_ack(tcb *t): tc(t) { }$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::C_handle_delayed_ack
C_handle_delayed_ack	async/dpdk/TCP.h	/^  class C_handle_delayed_ack : public EventCallback {$/;"	c	class:tcp_state::tcp_option::option_kind::tcp
C_handle_dev_stats	async/dpdk/DPDK.cc	/^  C_handle_dev_stats(DPDKQueuePair *qp): _qp(qp) { }$/;"	f	class:C_handle_dev_stats
C_handle_dev_stats	async/dpdk/DPDK.cc	/^class C_handle_dev_stats : public EventCallback {$/;"	c	file:
C_handle_frag_timeout	async/dpdk/IP.cc	/^  C_handle_frag_timeout(ipv4 *i): _ipv4(i) {}$/;"	f	class:C_handle_frag_timeout
C_handle_frag_timeout	async/dpdk/IP.cc	/^class C_handle_frag_timeout : public EventCallback {$/;"	c	file:
C_handle_l2forward	async/dpdk/net.cc	/^  C_handle_l2forward(std::shared_ptr<DPDKDevice> &p, unsigned &qd, Packet pkt, unsigned target)$/;"	f	class:C_handle_l2forward
C_handle_l2forward	async/dpdk/net.cc	/^class C_handle_l2forward : public EventCallback {$/;"	c	file:
C_handle_notify	async/Event.cc	/^  C_handle_notify(EventCenter *c, CephContext *cc): center(c), cct(cc) {}$/;"	f	class:C_handle_notify
C_handle_notify	async/Event.cc	/^class C_handle_notify : public EventCallback {$/;"	c	file:
C_handle_persist	async/dpdk/TCP.h	/^    C_handle_persist(tcb *t): tc(t) { }$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::C_handle_persist
C_handle_persist	async/dpdk/TCP.h	/^  class C_handle_persist : public EventCallback {$/;"	c	class:tcp_state::tcp_option::option_kind::tcp
C_handle_read	async/AsyncConnection.cc	/^  explicit C_handle_read(AsyncConnectionRef c): conn(c) {}$/;"	f	class:C_handle_read
C_handle_read	async/AsyncConnection.cc	/^class C_handle_read : public EventCallback {$/;"	c	file:
C_handle_reap	async/AsyncMessenger.cc	/^  explicit C_handle_reap(AsyncMessenger *m): msgr(m) {}$/;"	f	class:C_handle_reap
C_handle_reap	async/AsyncMessenger.cc	/^class C_handle_reap : public EventCallback {$/;"	c	file:
C_handle_retransmit	async/dpdk/TCP.h	/^    C_handle_retransmit(tcb *t): tc(t) { }$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::C_handle_retransmit
C_handle_retransmit	async/dpdk/TCP.h	/^  class C_handle_retransmit : public EventCallback {$/;"	c	class:tcp_state::tcp_option::option_kind::tcp
C_handle_write	async/AsyncConnection.cc	/^  explicit C_handle_write(AsyncConnectionRef c): conn(c) {}$/;"	f	class:C_handle_write
C_handle_write	async/AsyncConnection.cc	/^class C_handle_write : public EventCallback {$/;"	c	file:
C_processor_accept	async/AsyncMessenger.cc	/^  explicit C_processor_accept(Processor *p): pro(p) {}$/;"	f	class:Processor::C_processor_accept
C_processor_accept	async/AsyncMessenger.cc	/^class Processor::C_processor_accept : public EventCallback {$/;"	c	class:Processor	file:
C_submit_event	async/Event.h	/^    C_submit_event(func &&_f, bool nw)$/;"	f	class:EventCenter::C_submit_event
C_submit_event	async/Event.h	/^  class C_submit_event : public EventCallback {$/;"	c	class:EventCenter
C_tick_wakeup	async/AsyncConnection.cc	/^  explicit C_tick_wakeup(AsyncConnectionRef c): conn(c) {}$/;"	f	class:C_tick_wakeup
C_tick_wakeup	async/AsyncConnection.cc	/^class C_tick_wakeup : public EventCallback {$/;"	c	file:
C_time_wakeup	async/AsyncConnection.cc	/^  explicit C_time_wakeup(AsyncConnectionRef c): conn(c) {}$/;"	f	class:C_time_wakeup
C_time_wakeup	async/AsyncConnection.cc	/^class C_time_wakeup : public EventCallback {$/;"	c	file:
Chunk	async/rdma/Infiniband.cc	/^Infiniband::MemoryManager::Chunk::Chunk(ibv_mr* m, uint32_t len, char* b)$/;"	f	class:Infiniband::MemoryManager::Chunk
Chunk	async/rdma/Infiniband.h	/^    class Chunk {$/;"	c	class:Infiniband::MemoryManager
Chunk	async/rdma/Infiniband.h	/^  typedef MemoryManager::Chunk Chunk;$/;"	t	class:Infiniband
Chunk	async/rdma/RDMAStack.h	/^  typedef Infiniband::MemoryManager::Chunk Chunk;$/;"	t	class:RDMAConnectedSocketImpl
Chunk	async/rdma/RDMAStack.h	/^  typedef Infiniband::MemoryManager::Chunk Chunk;$/;"	t	class:RDMADispatcher
Chunk	async/rdma/RDMAStack.h	/^  typedef Infiniband::MemoryManager::Chunk Chunk;$/;"	t	class:RDMAWorker
ChunkIter	async/rdma/RDMAStack.h	/^  typedef std::vector<Chunk*>::iterator ChunkIter;$/;"	t	class:RDMAWorker
Cluster	async/rdma/Infiniband.cc	/^Infiniband::MemoryManager::Cluster::Cluster(MemoryManager& m, uint32_t s)$/;"	f	class:Infiniband::MemoryManager::Cluster
Cluster	async/rdma/Infiniband.h	/^    class Cluster {$/;"	c	class:Infiniband::MemoryManager
Cluster	async/rdma/Infiniband.h	/^  typedef MemoryManager::Cluster Cluster;$/;"	t	class:Infiniband
CompletionChannel	async/rdma/Infiniband.cc	/^Infiniband::CompletionChannel::CompletionChannel(CephContext *c, Infiniband &ib)$/;"	f	class:Infiniband::CompletionChannel
CompletionChannel	async/rdma/Infiniband.h	/^  class CompletionChannel {$/;"	c	class:Infiniband
CompletionChannel	async/rdma/RDMAStack.h	/^  typedef Infiniband::CompletionChannel CompletionChannel;$/;"	t	class:RDMAConnectedSocketImpl
CompletionChannel	async/rdma/RDMAStack.h	/^  typedef Infiniband::CompletionChannel CompletionChannel;$/;"	t	class:RDMAWorker
CompletionHook	Message.h	/^    explicit CompletionHook(Message *_m) : m(_m) {}$/;"	f	class:Message::CompletionHook
CompletionHook	Message.h	/^  class CompletionHook : public Context {$/;"	c	class:Message
CompletionQueue	async/rdma/Infiniband.h	/^    CompletionQueue(CephContext *c, Infiniband &ib,$/;"	f	class:Infiniband::CompletionQueue
CompletionQueue	async/rdma/Infiniband.h	/^  class CompletionQueue {$/;"	c	class:Infiniband
CompletionQueue	async/rdma/RDMAStack.h	/^  typedef Infiniband::CompletionQueue CompletionQueue;$/;"	t	class:RDMAConnectedSocketImpl
CompletionQueue	async/rdma/RDMAStack.h	/^  typedef Infiniband::CompletionQueue CompletionQueue;$/;"	t	class:RDMAWorker
ConnList	xio/XioConnection.h	/^				    &XioConnection::conns_hook > > ConnList;$/;"	t	class:XioConnection
ConnectedSocket	async/Stack.h	/^  ConnectedSocket() {};$/;"	f	class:ConnectedSocket
ConnectedSocket	async/Stack.h	/^  explicit ConnectedSocket(std::unique_ptr<ConnectedSocketImpl> csi)$/;"	f	class:ConnectedSocket
ConnectedSocket	async/Stack.h	/^class ConnectedSocket {$/;"	c
ConnectedSocketImpl	async/Stack.h	/^class ConnectedSocketImpl {$/;"	c
Connection	Connection.h	/^  Connection(CephContext *cct, Messenger *m)$/;"	f	struct:Connection
Connection	Connection.h	/^struct Connection : public RefCountedObject {$/;"	s
ConnectionRef	Connection.h	/^typedef boost::intrusive_ptr<Connection> ConnectionRef;$/;"	t
DEAD	xio/XioConnection.h	/^      DEAD } state;$/;"	e	enum:XioConnection::lifecycle::lf_state
DEBUGLVL	Message.cc	197;"	d	file:
DELETED	xio/XioConnection.h	/^    DELETED,$/;"	m	class:XioConnection::session_states
DENC	msg_types.h	/^  DENC(entity_name_t, v, p) {$/;"	f	class:entity_name_t
DISCONNECTED	xio/XioConnection.h	/^    DISCONNECTED,$/;"	m	class:XioConnection::session_states
DISPATCH_STRATEGY_H	DispatchStrategy.h	16;"	d
DPDKDevice	async/dpdk/DPDK.h	/^  DPDKDevice(CephContext *c, uint8_t port_idx, uint16_t num_queues, bool use_lro, bool enable_fc):$/;"	f	class:DPDKDevice
DPDKDevice	async/dpdk/DPDK.h	/^class DPDKDevice {$/;"	c
DPDKDriver	async/dpdk/EventDPDK.h	/^  DPDKDriver(CephContext *c): cct(c), manager(c) {}$/;"	f	class:DPDKDriver
DPDKDriver	async/dpdk/EventDPDK.h	/^class DPDKDriver : public EventDriver {$/;"	c
DPDKQueuePair	async/dpdk/DPDK.cc	/^DPDKQueuePair::DPDKQueuePair(CephContext *c, EventCenter *cen, DPDKDevice* dev, uint8_t qid)$/;"	f	class:DPDKQueuePair
DPDKQueuePair	async/dpdk/DPDK.h	/^class DPDKQueuePair {$/;"	c
DPDKRXGCPoller	async/dpdk/DPDK.h	/^    explicit DPDKRXGCPoller(DPDKQueuePair *qp)$/;"	f	class:DPDKQueuePair::DPDKRXGCPoller
DPDKRXGCPoller	async/dpdk/DPDK.h	/^  class DPDKRXGCPoller : public EventCenter::Poller {$/;"	c	class:DPDKQueuePair
DPDKRXPoller	async/dpdk/DPDK.h	/^    explicit DPDKRXPoller(DPDKQueuePair *qp)$/;"	f	class:DPDKQueuePair::DPDKRXPoller
DPDKRXPoller	async/dpdk/DPDK.h	/^  class DPDKRXPoller : public EventCenter::Poller {$/;"	c	class:DPDKQueuePair
DPDKServerSocketImpl	async/dpdk/DPDKStack.h	/^DPDKServerSocketImpl<Protocol>::DPDKServerSocketImpl($/;"	f	class:DPDKServerSocketImpl
DPDKServerSocketImpl	async/dpdk/DPDKStack.h	/^class DPDKServerSocketImpl : public ServerSocketImpl {$/;"	c
DPDKStack	async/dpdk/DPDKStack.h	/^  explicit DPDKStack(CephContext *cct, const string &t): NetworkStack(cct, t) {$/;"	f	class:DPDKStack
DPDKStack	async/dpdk/DPDKStack.h	/^class DPDKStack : public NetworkStack {$/;"	c
DPDKTXGCPoller	async/dpdk/DPDK.h	/^    explicit DPDKTXGCPoller(DPDKQueuePair *qp)$/;"	f	class:DPDKQueuePair::DPDKTXGCPoller
DPDKTXGCPoller	async/dpdk/DPDK.h	/^  class DPDKTXGCPoller : public EventCenter::Poller {$/;"	c	class:DPDKQueuePair
DPDKTXPoller	async/dpdk/DPDK.h	/^    explicit DPDKTXPoller(DPDKQueuePair *qp)$/;"	f	class:DPDKQueuePair::DPDKTXPoller
DPDKTXPoller	async/dpdk/DPDK.h	/^  class DPDKTXPoller : public EventCenter::Poller {$/;"	c	class:DPDKQueuePair
DPDKWorker	async/dpdk/DPDKStack.h	/^  explicit DPDKWorker(CephContext *c, unsigned i): Worker(c, i) {}$/;"	f	class:DPDKWorker
DPDKWorker	async/dpdk/DPDKStack.h	/^class DPDKWorker : public Worker {$/;"	c
D_ACCEPT	DispatchQueue.h	/^  enum { D_CONNECT = 1, D_ACCEPT, D_BAD_REMOTE_RESET, D_BAD_RESET, D_CONN_REFUSED, D_NUM_CODES };$/;"	e	enum:DispatchQueue::__anon2
D_BAD_REMOTE_RESET	DispatchQueue.h	/^  enum { D_CONNECT = 1, D_ACCEPT, D_BAD_REMOTE_RESET, D_BAD_RESET, D_CONN_REFUSED, D_NUM_CODES };$/;"	e	enum:DispatchQueue::__anon2
D_BAD_RESET	DispatchQueue.h	/^  enum { D_CONNECT = 1, D_ACCEPT, D_BAD_REMOTE_RESET, D_BAD_RESET, D_CONN_REFUSED, D_NUM_CODES };$/;"	e	enum:DispatchQueue::__anon2
D_CONNECT	DispatchQueue.h	/^  enum { D_CONNECT = 1, D_ACCEPT, D_BAD_REMOTE_RESET, D_BAD_RESET, D_CONN_REFUSED, D_NUM_CODES };$/;"	e	enum:DispatchQueue::__anon2
D_CONN_REFUSED	DispatchQueue.h	/^  enum { D_CONNECT = 1, D_ACCEPT, D_BAD_REMOTE_RESET, D_BAD_RESET, D_CONN_REFUSED, D_NUM_CODES };$/;"	e	enum:DispatchQueue::__anon2
D_NUM_CODES	DispatchQueue.h	/^  enum { D_CONNECT = 1, D_ACCEPT, D_BAD_REMOTE_RESET, D_BAD_RESET, D_CONN_REFUSED, D_NUM_CODES };$/;"	e	enum:DispatchQueue::__anon2
DelayedDelivery	async/AsyncConnection.h	/^    explicit DelayedDelivery(AsyncMessenger *omsgr, EventCenter *c,$/;"	f	class:AsyncConnection::DelayedDelivery
DelayedDelivery	async/AsyncConnection.h	/^  class DelayedDelivery : public EventCallback {$/;"	c	class:AsyncConnection
DelayedDelivery	simple/Pipe.cc	/^  explicit DelayedDelivery(Pipe *p)$/;"	f	class:Pipe::DelayedDelivery
DelayedDelivery	simple/Pipe.cc	/^class Pipe::DelayedDelivery: public Thread {$/;"	c	class:Pipe	file:
Device	async/rdma/Infiniband.cc	/^Device::Device(CephContext *cct, ibv_device* d): device(d), device_attr(new ibv_device_attr), active_port(nullptr)$/;"	f	class:Device
Device	async/rdma/Infiniband.h	/^class Device {$/;"	c
DeviceList	async/rdma/Infiniband.h	/^  DeviceList(CephContext *cct): device_list(ibv_get_device_list(&num)) {$/;"	f	class:DeviceList
DeviceList	async/rdma/Infiniband.h	/^class DeviceList {$/;"	c
DispatchQueue	DispatchQueue.h	/^  DispatchQueue(CephContext *cct, Messenger *msgr, string &name)$/;"	f	class:DispatchQueue
DispatchQueue	DispatchQueue.h	/^class DispatchQueue {$/;"	c
DispatchStrategy	DispatchStrategy.h	/^  DispatchStrategy() {}$/;"	f	class:DispatchStrategy
DispatchStrategy	DispatchStrategy.h	/^class DispatchStrategy$/;"	c
DispatchThread	DispatchQueue.h	/^    explicit DispatchThread(DispatchQueue *dq) : dq(dq) {}$/;"	f	class:DispatchQueue::DispatchThread
DispatchThread	DispatchQueue.h	/^  class DispatchThread : public Thread {$/;"	c	class:DispatchQueue
Dispatcher	Dispatcher.h	/^  explicit Dispatcher(CephContext *cct_)$/;"	f	class:Dispatcher
Dispatcher	Dispatcher.h	/^class Dispatcher {$/;"	c
ESTABLISHED	async/dpdk/TCP.h	/^    static constexpr tcp_state ESTABLISHED    = tcp_state::ESTABLISHED;$/;"	m	class:tcp_state::tcp_option::option_kind::tcp::tcb
ESTABLISHED	async/dpdk/TCP.h	/^  ESTABLISHED     = (1 << 4),$/;"	m	class:tcp_state
EVENT_NONE	async/Event.h	48;"	d
EVENT_READABLE	async/Event.h	49;"	d
EVENT_WRITABLE	async/Event.h	50;"	d
EntityComp	xio/XioConnection.h	/^  struct EntityComp$/;"	s	class:XioConnection
EntityHook	xio/XioConnection.h	/^			  &XioConnection::conns_entity_map_hook> EntityHook;$/;"	t	class:XioConnection
EntitySet	xio/XioConnection.h	/^		       bi::compare<EntityComp> > EntitySet;$/;"	t	class:XioConnection
EpollDriver	async/EventEpoll.h	/^  explicit EpollDriver(CephContext *c): epfd(-1), events(NULL), cct(c), size(0) {}$/;"	f	class:EpollDriver
EpollDriver	async/EventEpoll.h	/^class EpollDriver : public EventDriver {$/;"	c
EventCallback	async/Event.h	/^class EventCallback {$/;"	c
EventCallbackRef	async/Event.h	/^typedef EventCallback* EventCallbackRef;$/;"	t
EventCenter	async/Event.h	/^  explicit EventCenter(CephContext *c):$/;"	f	class:EventCenter
EventCenter	async/Event.h	/^class EventCenter {$/;"	c
EventDriver	async/Event.h	/^class EventDriver {$/;"	c
FAST_STRATEGY_H	FastStrategy.h	17;"	d
FIN_WAIT_1	async/dpdk/TCP.h	/^    static constexpr tcp_state FIN_WAIT_1     = tcp_state::FIN_WAIT_1;$/;"	m	class:tcp_state::tcp_option::option_kind::tcp::tcb
FIN_WAIT_1	async/dpdk/TCP.h	/^  FIN_WAIT_1      = (1 << 5),$/;"	m	class:tcp_state
FIN_WAIT_2	async/dpdk/TCP.h	/^    static constexpr tcp_state FIN_WAIT_2     = tcp_state::FIN_WAIT_2;$/;"	m	class:tcp_state::tcp_option::option_kind::tcp::tcb
FIN_WAIT_2	async/dpdk/TCP.h	/^  FIN_WAIT_2      = (1 << 6),$/;"	m	class:tcp_state
FLAG_BAD_AUTH	xio/XioConnection.h	/^    static const int FLAG_BAD_AUTH = 0x0001;$/;"	m	class:XioConnection::CState
FLAG_MAPPED	xio/XioConnection.h	/^    static const int FLAG_MAPPED = 0x0002;$/;"	m	class:XioConnection::CState
FLAG_NONE	xio/XioConnection.h	/^    static const int FLAG_NONE = 0x0000;$/;"	m	class:XioConnection::CState
FLAG_RESET	xio/XioConnection.h	/^    static const int FLAG_RESET = 0x0004;$/;"	m	class:XioConnection::CState
FLOW_CONTROLLED	xio/XioConnection.h	/^    FLOW_CONTROLLED,$/;"	m	class:XioConnection::session_states
FastStrategy	FastStrategy.h	/^  FastStrategy() {}$/;"	f	class:FastStrategy
FastStrategy	FastStrategy.h	/^class FastStrategy : public DispatchStrategy {$/;"	c
FileEvent	async/Event.h	/^    FileEvent(): mask(0), read_cb(NULL), write_cb(NULL) {}$/;"	f	struct:EventCenter::FileEvent
FileEvent	async/Event.h	/^  struct FileEvent {$/;"	s	class:EventCenter
FiredFileEvent	async/Event.h	/^struct FiredFileEvent {$/;"	s
HAS_HEAVY_TRAFFIC	Messenger.h	/^  static const int HAS_HEAVY_TRAFFIC    = 0x0001;$/;"	m	class:Messenger
HAS_MANY_CONNECTIONS	Messenger.h	/^  static const int HAS_MANY_CONNECTIONS = 0x0002;$/;"	m	class:Messenger
HAVE_EPOLL	async/Event.h	26;"	d
HAVE_EVPORT	async/Event.h	36;"	d
HAVE_KQUEUE	async/Event.h	30;"	d
HEARTBEAT	Messenger.h	/^  static const int HEARTBEAT            = 0x0004;$/;"	m	class:Messenger
HUGE_PAGE_SIZE	async/rdma/Infiniband.h	33;"	d
IBSYNMsg	async/rdma/Infiniband.h	/^struct IBSYNMsg {$/;"	s
IDLE	xio/XioConnection.h	/^    IDLE = 0,$/;"	m	class:XioConnection::session_startup_states
INCOMING_MSG_RELEASE	xio/XioSubmit.h	/^    INCOMING_MSG_RELEASE$/;"	e	enum:XioSubmit::submit_type
INIT	xio/XioConnection.h	/^      INIT,$/;"	e	enum:XioConnection::lifecycle::lf_state
INIT	xio/XioConnection.h	/^    INIT = 0,$/;"	m	class:XioConnection::session_states
Impl	async/dpdk/DPDKStack.cc	/^DPDKWorker::Impl::Impl(CephContext *cct, unsigned i, EventCenter *c, std::shared_ptr<DPDKDevice> dev)$/;"	f	class:DPDKWorker::Impl
Impl	async/dpdk/DPDKStack.h	/^  struct Impl {$/;"	s	class:DPDKWorker
Infiniband	async/rdma/Infiniband.cc	/^Infiniband::Infiniband(CephContext *cct, const std::string &device_name, uint8_t port_num)$/;"	f	class:Infiniband
Infiniband	async/rdma/Infiniband.h	/^class Infiniband {$/;"	c
KEVENT_NOWAIT	async/EventKqueue.cc	25;"	d	file:
KqueueDriver	async/EventKqueue.h	/^  explicit KqueueDriver(CephContext *c): kqfd(-1), res_events(NULL), cct(c), $/;"	f	class:KqueueDriver
KqueueDriver	async/EventKqueue.h	/^class KqueueDriver : public EventDriver {$/;"	c
LAST_ACK	async/dpdk/TCP.h	/^    static constexpr tcp_state LAST_ACK       = tcp_state::LAST_ACK;$/;"	m	class:tcp_state::tcp_option::option_kind::tcp::tcb
LAST_ACK	async/dpdk/TCP.h	/^  LAST_ACK        = (1 << 9),$/;"	m	class:tcp_state
LEVELS	xio/XioMessenger.cc	/^static const level_pair LEVELS[] = {$/;"	m	namespace:xio_log	file:
LISTEN	async/dpdk/TCP.h	/^    static constexpr tcp_state LISTEN         = tcp_state::LISTEN;$/;"	m	class:tcp_state::tcp_option::option_kind::tcp::tcb
LISTEN	async/dpdk/TCP.h	/^  LISTEN          = (1 << 1),$/;"	m	class:tcp_state
LOCAL_DISCON	xio/XioConnection.h	/^      LOCAL_DISCON,$/;"	e	enum:XioConnection::lifecycle::lf_state
Lane	xio/XioPortal.h	/^    struct Lane$/;"	s	struct:XioPortal::SubmitQueue
LocalDeliveryThread	DispatchQueue.h	/^    explicit LocalDeliveryThread(DispatchQueue *dq) : dq(dq) {}$/;"	f	class:DispatchQueue::LocalDeliveryThread
LocalDeliveryThread	DispatchQueue.h	/^  class LocalDeliveryThread : public Thread {$/;"	c	class:DispatchQueue
MARKER	async/dpdk/DPDK.cc	/^typedef void    *MARKER[0];   \/**< generic marker for a point in a structure *\/$/;"	t	file:
MAX_ACK_EVENT	async/rdma/Infiniband.h	/^    static const uint32_t MAX_ACK_EVENT = 5000;$/;"	m	class:Infiniband::CompletionChannel
MAX_EVENTCENTER	async/Event.h	/^  static const int MAX_EVENTCENTER = 24;$/;"	m	class:EventCenter
MAX_INLINE_DATA	async/rdma/Infiniband.cc	/^static const uint32_t MAX_INLINE_DATA = 0;$/;"	v	file:
MAX_SHARED_RX_SGE_COUNT	async/rdma/Infiniband.cc	/^static const uint32_t MAX_SHARED_RX_SGE_COUNT = 1;$/;"	v	file:
MAX_XIO_BUF_SIZE	xio/XioMessenger.cc	587;"	d	file:
MB	xio/XioPool.h	/^  static const int MB = 8;$/;"	m	class:XioPool
MDS	msg_types.h	/^  static entity_name_t MDS(int64_t i=NEW) { return entity_name_t(TYPE_MDS, i); }$/;"	f	class:entity_name_t
MGR	msg_types.h	/^  static entity_name_t MGR(int64_t i=NEW) { return entity_name_t(TYPE_MGR, i); }$/;"	f	class:entity_name_t
MON	msg_types.h	/^  static entity_name_t MON(int64_t i=NEW) { return entity_name_t(TYPE_MON, i); }$/;"	f	class:entity_name_t
MSGR_SIGPIPE_STOPPER	Messenger.h	601;"	d
MSGR_SIGPIPE_STOPPER	Messenger.h	603;"	d
MSG_COMMAND	Message.h	99;"	d
MSG_COMMAND_REPLY	Message.h	100;"	d
MSG_CRC_ALL	Message.h	179;"	d
MSG_CRC_DATA	Message.h	177;"	d
MSG_CRC_HEADER	Message.h	178;"	d
MSG_DATA_PING	Message.h	182;"	d
MSG_FORWARD	Message.h	58;"	d
MSG_GETPOOLSTATS	Message.h	52;"	d
MSG_GETPOOLSTATSREPLY	Message.h	53;"	d
MSG_LOG	Message.h	49;"	d
MSG_LOGACK	Message.h	50;"	d
MSG_MAGIC_REDUPE	Message.h	224;"	d
MSG_MAGIC_TRACE_CTR	Message.h	221;"	d
MSG_MAGIC_TRACE_DTOR	Message.h	217;"	d
MSG_MAGIC_TRACE_HDR	Message.h	218;"	d
MSG_MAGIC_TRACE_XCON	Message.h	216;"	d
MSG_MAGIC_TRACE_XIO	Message.h	219;"	d
MSG_MAGIC_TRACE_XMSGR	Message.h	220;"	d
MSG_MAGIC_XIO	Message.h	215;"	d
MSG_MDS_BEACON	Message.h	127;"	d
MSG_MDS_CACHEEXPIRE	Message.h	140;"	d
MSG_MDS_CACHEREJOIN	Message.h	135;"	d
MSG_MDS_DENTRYLINK	Message.h	144;"	d
MSG_MDS_DENTRYUNLINK	Message.h	141;"	d
MSG_MDS_DIRUPDATE	Message.h	139;"	d
MSG_MDS_DISCOVER	Message.h	136;"	d
MSG_MDS_DISCOVERREPLY	Message.h	137;"	d
MSG_MDS_EXPORTCAPS	Message.h	166;"	d
MSG_MDS_EXPORTCAPSACK	Message.h	167;"	d
MSG_MDS_EXPORTDIR	Message.h	160;"	d
MSG_MDS_EXPORTDIRACK	Message.h	161;"	d
MSG_MDS_EXPORTDIRCANCEL	Message.h	155;"	d
MSG_MDS_EXPORTDIRDISCOVER	Message.h	153;"	d
MSG_MDS_EXPORTDIRDISCOVERACK	Message.h	154;"	d
MSG_MDS_EXPORTDIRFINISH	Message.h	164;"	d
MSG_MDS_EXPORTDIRNOTIFY	Message.h	162;"	d
MSG_MDS_EXPORTDIRNOTIFYACK	Message.h	163;"	d
MSG_MDS_EXPORTDIRPREP	Message.h	156;"	d
MSG_MDS_EXPORTDIRPREPACK	Message.h	157;"	d
MSG_MDS_EXPORTDIRWARNING	Message.h	158;"	d
MSG_MDS_EXPORTDIRWARNINGACK	Message.h	159;"	d
MSG_MDS_FINDINO	Message.h	145;"	d
MSG_MDS_FINDINOREPLY	Message.h	146;"	d
MSG_MDS_FRAGMENTNOTIFY	Message.h	142;"	d
MSG_MDS_GATHERCAPS	Message.h	168;"	d
MSG_MDS_HEARTBEAT	Message.h	170;"	d
MSG_MDS_INODEFILECAPS	Message.h	151;"	d
MSG_MDS_INODEUPDATE	Message.h	138;"	d
MSG_MDS_LOCK	Message.h	150;"	d
MSG_MDS_OFFLOAD_TARGETS	Message.h	143;"	d
MSG_MDS_OPENINO	Message.h	147;"	d
MSG_MDS_OPENINOREPLY	Message.h	148;"	d
MSG_MDS_RESOLVE	Message.h	133;"	d
MSG_MDS_RESOLVEACK	Message.h	134;"	d
MSG_MDS_SLAVE_REQUEST	Message.h	128;"	d
MSG_MDS_TABLE_REQUEST	Message.h	129;"	d
MSG_MGR_BEACON	Message.h	197;"	d
MSG_MGR_CONFIGURE	Message.h	193;"	d
MSG_MGR_DIGEST	Message.h	203;"	d
MSG_MGR_MAP	Message.h	200;"	d
MSG_MGR_OPEN	Message.h	192;"	d
MSG_MGR_REPORT	Message.h	194;"	d
MSG_MON_COMMAND	Message.h	47;"	d
MSG_MON_COMMAND_ACK	Message.h	48;"	d
MSG_MON_ELECTION	Message.h	40;"	d
MSG_MON_GLOBAL_ID	Message.h	55;"	d
MSG_MON_HEALTH	Message.h	174;"	d
MSG_MON_HEALTH_CHECKS	Message.h	189;"	d
MSG_MON_JOIN	Message.h	43;"	d
MSG_MON_MGR_REPORT	Message.h	205;"	d
MSG_MON_PAXOS	Message.h	41;"	d
MSG_MON_PROBE	Message.h	42;"	d
MSG_MON_SCRUB	Message.h	39;"	d
MSG_MON_SYNC	Message.h	44;"	d
MSG_NOP	Message.h	187;"	d
MSG_OSD_ALIVE	Message.h	67;"	d
MSG_OSD_BACKFILL_RESERVE	Message.h	102;"	d
MSG_OSD_BEACON	Message.h	76;"	d
MSG_OSD_BOOT	Message.h	65;"	d
MSG_OSD_EC_READ	Message.h	112;"	d
MSG_OSD_EC_READ_REPLY	Message.h	113;"	d
MSG_OSD_EC_WRITE	Message.h	110;"	d
MSG_OSD_EC_WRITE_REPLY	Message.h	111;"	d
MSG_OSD_FAILURE	Message.h	66;"	d
MSG_OSD_FORCE_RECOVERY	Message.h	104;"	d
MSG_OSD_FULL	Message.h	69;"	d
MSG_OSD_MARK_ME_DOWN	Message.h	68;"	d
MSG_OSD_PGTEMP	Message.h	74;"	d
MSG_OSD_PG_BACKFILL	Message.h	96;"	d
MSG_OSD_PG_BACKFILL_REMOVE	Message.h	97;"	d
MSG_OSD_PG_CREATE	Message.h	88;"	d
MSG_OSD_PG_CREATED	Message.h	120;"	d
MSG_OSD_PG_INFO	Message.h	82;"	d
MSG_OSD_PG_LOG	Message.h	80;"	d
MSG_OSD_PG_NOTIFY	Message.h	78;"	d
MSG_OSD_PG_PULL	Message.h	107;"	d
MSG_OSD_PG_PUSH	Message.h	106;"	d
MSG_OSD_PG_PUSH_REPLY	Message.h	108;"	d
MSG_OSD_PG_QUERY	Message.h	79;"	d
MSG_OSD_PG_RECOVERY_DELETE	Message.h	122;"	d
MSG_OSD_PG_RECOVERY_DELETE_REPLY	Message.h	123;"	d
MSG_OSD_PG_REMOVE	Message.h	81;"	d
MSG_OSD_PG_SCAN	Message.h	95;"	d
MSG_OSD_PG_TRIM	Message.h	83;"	d
MSG_OSD_PG_UPDATE_LOG_MISSING	Message.h	117;"	d
MSG_OSD_PG_UPDATE_LOG_MISSING_REPLY	Message.h	118;"	d
MSG_OSD_PING	Message.h	64;"	d
MSG_OSD_RECOVERY_RESERVE	Message.h	103;"	d
MSG_OSD_REPOP	Message.h	115;"	d
MSG_OSD_REPOPREPLY	Message.h	116;"	d
MSG_OSD_REP_SCRUB	Message.h	93;"	d
MSG_OSD_REP_SCRUBMAP	Message.h	121;"	d
MSG_OSD_SCRUB	Message.h	91;"	d
MSG_OSD_SCRUB_RESERVE	Message.h	92;"	d
MSG_OSD_SUBOP	Message.h	71;"	d
MSG_OSD_SUBOPREPLY	Message.h	72;"	d
MSG_PAXOS	Message.h	60;"	d
MSG_PGSTATS	Message.h	85;"	d
MSG_PGSTATSACK	Message.h	86;"	d
MSG_REMOVE_SNAPS	Message.h	89;"	d
MSG_ROUTE	Message.h	57;"	d
MSG_SERVICE_MAP	Message.h	206;"	d
MSG_TIMECHECK	Message.h	173;"	d
MemoryManager	async/rdma/Infiniband.cc	/^Infiniband::MemoryManager::MemoryManager(Device *d, ProtectionDomain *p, bool hugepage)$/;"	f	class:Infiniband::MemoryManager
MemoryManager	async/rdma/Infiniband.h	/^  class MemoryManager {$/;"	c	class:Infiniband
MemoryManager	async/rdma/RDMAStack.h	/^  typedef Infiniband::MemoryManager MemoryManager;$/;"	t	class:RDMAWorker
Message	Message.h	/^  Message() {$/;"	f	class:Message
Message	Message.h	/^  Message(int t, int version=1, int compat_version=0) {$/;"	f	class:Message
Message	Message.h	/^class Message : public RefCountedObject { \/\/ 消息类; 消息格式：header + user data + footer$/;"	c
MessageRef	Message.h	/^typedef boost::intrusive_ptr<Message> MessageRef;$/;"	t
Messenger	Messenger.h	/^  Messenger(CephContext *cct_, entity_name_t w)$/;"	f	class:Messenger
Messenger	Messenger.h	/^class Messenger {$/;"	c
NEW	msg_types.h	/^  static const int64_t NEW = -1;$/;"	m	class:entity_name_t
NOWRITE	async/AsyncConnection.h	/^    NOWRITE,$/;"	m	class:AsyncConnection::WriteStatus
NUM_SLABS	xio/XioPool.h	/^    NUM_SLABS,$/;"	e	enum:XioPoolStats::pool_sizes
NativeConnectedSocketImpl	async/dpdk/DPDKStack.h	/^  NativeConnectedSocketImpl(NativeConnectedSocketImpl &&rhs)$/;"	f	class:NativeConnectedSocketImpl
NativeConnectedSocketImpl	async/dpdk/DPDKStack.h	/^  explicit NativeConnectedSocketImpl(typename Protocol::connection conn)$/;"	f	class:NativeConnectedSocketImpl
NativeConnectedSocketImpl	async/dpdk/DPDKStack.h	/^class NativeConnectedSocketImpl : public ConnectedSocketImpl {$/;"	c
NetHandler	async/net_handler.h	/^    explicit NetHandler(CephContext *c): cct(c) {}$/;"	f	class:ceph::NetHandler
NetHandler	async/net_handler.h	/^  class NetHandler {$/;"	c	namespace:ceph
NetworkStack	async/Stack.cc	/^NetworkStack::NetworkStack(CephContext *c, const string &t): type(t), started(false), cct(c)$/;"	f	class:NetworkStack
NetworkStack	async/Stack.h	/^class NetworkStack : public CephContext::ForkWatcher {$/;"	c
OP_FLAG_LOCKED	xio/XioConnection.h	/^    static const int OP_FLAG_LOCKED = 0x0001;$/;"	m	class:XioConnection::CState
OP_FLAG_LRU	xio/XioConnection.h	/^    static const int OP_FLAG_LRU = 0x0002;$/;"	m	class:XioConnection::CState
OP_FLAG_NONE	xio/XioConnection.h	/^    static const int OP_FLAG_NONE = 0x0000;$/;"	m	class:XioConnection::CState
OSD	msg_types.h	/^  static entity_name_t OSD(int64_t i=NEW) { return entity_name_t(TYPE_OSD, i); }$/;"	f	class:entity_name_t
OUTGOING_MSG	xio/XioSubmit.h	/^    OUTGOING_MSG,$/;"	e	enum:XioSubmit::submit_type
PASSIVE	xio/XioConnection.h	/^  enum type { ACTIVE, PASSIVE };$/;"	e	enum:XioConnection::type
Packet	async/dpdk/Packet.h	/^  Packet(std::unique_ptr<impl>&& impl) : _impl(std::move(impl)) {}$/;"	f	class:Packet
Packet	async/dpdk/Packet.h	/^class Packet {$/;"	c
Packet	async/dpdk/Packet.h	/^inline Packet::Packet(): _impl(impl::allocate(1)) {$/;"	f	class:Packet
Packet	async/dpdk/Packet.h	/^inline Packet::Packet(Iterator begin, Iterator end, deleter del) {$/;"	f	class:Packet
Packet	async/dpdk/Packet.h	/^inline Packet::Packet(Packet&& x, deleter d): _impl(std::move(x._impl)) {$/;"	f	class:Packet
Packet	async/dpdk/Packet.h	/^inline Packet::Packet(Packet&& x, fragment frag)$/;"	f	class:Packet
Packet	async/dpdk/Packet.h	/^inline Packet::Packet(Packet&& x, fragment frag, deleter d)$/;"	f	class:Packet
Packet	async/dpdk/Packet.h	/^inline Packet::Packet(const char* data, size_t size):$/;"	f	class:Packet
Packet	async/dpdk/Packet.h	/^inline Packet::Packet(fragment frag): _impl(new impl(frag)) {$/;"	f	class:Packet
Packet	async/dpdk/Packet.h	/^inline Packet::Packet(fragment frag, Packet&& x)$/;"	f	class:Packet
Packet	async/dpdk/Packet.h	/^inline Packet::Packet(fragment frag, deleter d)$/;"	f	class:Packet
Packet	async/dpdk/Packet.h	/^inline Packet::Packet(size_t nr_frags): _impl(impl::allocate(nr_frags)) {$/;"	f	class:Packet
Packet	async/dpdk/Packet.h	/^inline Packet::Packet(std::vector<fragment> frag, deleter d)$/;"	f	class:Packet
Pipe	simple/Pipe.cc	/^Pipe::Pipe(SimpleMessenger *r, int st, PipeConnection *con)$/;"	f	class:Pipe
Pipe	simple/Pipe.h	/^  class Pipe : public RefCountedObject {$/;"	c
PipeConnection	simple/PipeConnection.h	/^  PipeConnection(CephContext *cct, Messenger *m)$/;"	f	class:PipeConnection
PipeConnection	simple/PipeConnection.h	/^class PipeConnection : public Connection {$/;"	c
PipeConnectionRef	simple/PipeConnection.h	/^typedef boost::intrusive_ptr<PipeConnection> PipeConnectionRef;$/;"	t
Policy	Messenger.h	/^    Policy()$/;"	f	struct:Messenger::Policy
Policy	Messenger.h	/^    Policy(bool l, bool s, bool st, bool r, uint64_t req)$/;"	f	struct:Messenger::Policy
Policy	Messenger.h	/^  struct Policy {$/;"	s	class:Messenger
Poller	async/Event.cc	/^EventCenter::Poller::Poller(EventCenter* center, const string& name)$/;"	f	class:EventCenter::Poller
Poller	async/Event.h	/^  class Poller {$/;"	c	class:EventCenter
Port	async/rdma/Infiniband.cc	/^Port::Port(CephContext *cct, struct ibv_context* ictxt, uint8_t ipn): ctxt(ictxt), port_num(ipn), port_attr(new ibv_port_attr)$/;"	f	class:Port
Port	async/rdma/Infiniband.h	/^class Port {$/;"	c
PosixConnectedSocketImpl	async/PosixStack.cc	/^  explicit PosixConnectedSocketImpl(NetHandler &h, const entity_addr_t &sa, int f, bool connected)$/;"	f	class:final
PosixNetworkStack	async/PosixStack.cc	/^PosixNetworkStack::PosixNetworkStack(CephContext *c, const string &t)$/;"	f	class:PosixNetworkStack
PosixNetworkStack	async/PosixStack.h	/^class PosixNetworkStack : public NetworkStack {$/;"	c
PosixServerSocketImpl	async/PosixStack.cc	/^  explicit PosixServerSocketImpl(NetHandler &h, int f): handler(h), _fd(f) {}$/;"	f	class:PosixServerSocketImpl
PosixServerSocketImpl	async/PosixStack.cc	/^class PosixServerSocketImpl : public ServerSocketImpl {$/;"	c	file:
PosixWorker	async/PosixStack.h	/^  PosixWorker(CephContext *c, unsigned i)$/;"	f	class:PosixWorker
PosixWorker	async/PosixStack.h	/^class PosixWorker : public Worker {$/;"	c
Processor	async/AsyncMessenger.cc	/^Processor::Processor(AsyncMessenger *r, Worker *w, CephContext *c)$/;"	f	class:Processor
Processor	async/AsyncMessenger.h	/^class Processor {$/;"	c
ProtectionDomain	async/rdma/Infiniband.cc	/^Infiniband::ProtectionDomain::ProtectionDomain(CephContext *cct, Device *device)$/;"	f	class:Infiniband::ProtectionDomain
ProtectionDomain	async/rdma/Infiniband.h	/^  class ProtectionDomain {$/;"	c	class:Infiniband
QSThread	QueueStrategy.h	/^    explicit QSThread(QueueStrategy *dq) : thread_q(), dq(dq), cond() {}$/;"	f	class:QueueStrategy::QSThread
QSThread	QueueStrategy.h	/^  class QSThread : public Thread {$/;"	c	class:QueueStrategy
QUEUE_STRATEGY_H	QueueStrategy.h	17;"	d
Queue	Message.h	/^				     &Message::dispatch_q > > Queue;$/;"	t	class:Message
Queue	QueueStrategy.h	/^				       &QSThread::thread_q > > Queue;$/;"	t	class:QueueStrategy::QSThread
Queue	xio/XioSubmit.h	/^		    > Queue;$/;"	t	struct:XioSubmit
QueueItem	DispatchQueue.h	/^    QueueItem(int type, Connection *con) : type(type), con(con), m(0) {}$/;"	f	class:DispatchQueue::QueueItem
QueueItem	DispatchQueue.h	/^    explicit QueueItem(Message *m) : type(-1), con(0), m(m) {}$/;"	f	class:DispatchQueue::QueueItem
QueueItem	DispatchQueue.h	/^  class QueueItem {$/;"	c	class:DispatchQueue
QueuePair	async/rdma/Infiniband.cc	/^Infiniband::QueuePair::QueuePair($/;"	f	class:Infiniband::QueuePair
QueuePair	async/rdma/Infiniband.h	/^  class QueuePair {$/;"	c	class:Infiniband
QueuePair	async/rdma/RDMAStack.h	/^  typedef Infiniband::QueuePair QueuePair;$/;"	t	class:RDMADispatcher
QueueStrategy	QueueStrategy.cc	/^QueueStrategy::QueueStrategy(int _n_threads)$/;"	f	class:QueueStrategy
QueueStrategy	QueueStrategy.h	/^class QueueStrategy : public DispatchStrategy {$/;"	c
RDMAConnectedSocketImpl	async/rdma/RDMAConnectedSocketImpl.cc	/^RDMAConnectedSocketImpl::RDMAConnectedSocketImpl(CephContext *cct, Infiniband* ib, RDMADispatcher* s,$/;"	f	class:RDMAConnectedSocketImpl
RDMAConnectedSocketImpl	async/rdma/RDMAStack.h	/^class RDMAConnectedSocketImpl : public ConnectedSocketImpl {$/;"	c
RDMADispatcher	async/rdma/RDMAStack.cc	/^RDMADispatcher::RDMADispatcher(CephContext* c, RDMAStack* s)$/;"	f	class:RDMADispatcher
RDMADispatcher	async/rdma/RDMAStack.h	/^class RDMADispatcher {$/;"	c
RDMAServerSocketImpl	async/rdma/RDMAServerSocketImpl.cc	/^RDMAServerSocketImpl::RDMAServerSocketImpl(CephContext *cct, Infiniband* i, RDMADispatcher *s, RDMAWorker *w, entity_addr_t& a)$/;"	f	class:RDMAServerSocketImpl
RDMAServerSocketImpl	async/rdma/RDMAStack.h	/^class RDMAServerSocketImpl : public ServerSocketImpl {$/;"	c
RDMAStack	async/rdma/RDMAStack.cc	/^RDMAStack::RDMAStack(CephContext *cct, const string &t): NetworkStack(cct, t)$/;"	f	class:RDMAStack
RDMAStack	async/rdma/RDMAStack.h	/^class RDMAStack : public NetworkStack {$/;"	c
RDMAWorker	async/rdma/RDMAStack.cc	/^RDMAWorker::RDMAWorker(CephContext *c, unsigned i)$/;"	f	class:RDMAWorker
RDMAWorker	async/rdma/RDMAStack.h	/^class RDMAWorker : public Worker {$/;"	c
READY	xio/XioConnection.h	/^    READY,$/;"	m	class:XioConnection::session_startup_states
RECONNECTING	xio/XioConnection.h	/^      RECONNECTING,$/;"	e	enum:XioConnection::lifecycle::lf_state
REMOTE_DISCON	xio/XioConnection.h	/^      REMOTE_DISCON,$/;"	e	enum:XioConnection::lifecycle::lf_state
REPLACING	async/AsyncConnection.h	/^    REPLACING,$/;"	m	class:AsyncConnection::WriteStatus
Reader	simple/Pipe.h	/^      explicit Reader(Pipe *p) : pipe(p) {}$/;"	f	class:Pipe::Reader
Reader	simple/Pipe.h	/^    class Reader : public Thread {$/;"	c	class:Pipe
ReapDeadConnectionThreshold	async/AsyncMessenger.h	/^  static const uint64_t ReapDeadConnectionThreshold = 5;$/;"	m	class:AsyncMessenger
ReaperThread	simple/SimpleMessenger.h	/^    explicit ReaperThread(SimpleMessenger *m) : msgr(m) {}$/;"	f	class:SimpleMessenger::ReaperThread
ReaperThread	simple/SimpleMessenger.h	/^  class ReaperThread : public Thread {$/;"	c	class:SimpleMessenger
SEQ_MASK	async/AsyncConnection.cc	29;"	d	file:
SEQ_MASK	simple/Pipe.cc	42;"	d	file:
SIMPLE_POLICY_MESSENGER_H	SimplePolicyMessenger.h	17;"	d
SLAB_1024	xio/XioPool.h	/^    SLAB_1024,$/;"	e	enum:XioPoolStats::pool_sizes
SLAB_256	xio/XioPool.h	/^    SLAB_256,$/;"	e	enum:XioPoolStats::pool_sizes
SLAB_64	xio/XioPool.h	/^    SLAB_64 = 0,$/;"	e	enum:XioPoolStats::pool_sizes
SLAB_MAX	xio/XioPool.h	/^    SLAB_MAX,$/;"	e	enum:XioPoolStats::pool_sizes
SLAB_OVERFLOW	xio/XioPool.h	/^    SLAB_OVERFLOW,$/;"	e	enum:XioPoolStats::pool_sizes
SLAB_PAGE	xio/XioPool.h	/^    SLAB_PAGE,$/;"	e	enum:XioPoolStats::pool_sizes
SM_IOV_MAX	simple/Pipe.h	/^static const int SM_IOV_MAX = (IOV_MAX >= 1024 ? IOV_MAX \/ 4 : IOV_MAX);$/;"	v
SOCKET_PRIORITY_MIN_DELAY	Messenger.h	36;"	d
START	xio/XioConnection.h	/^    START,$/;"	m	class:XioConnection::session_states
STATE_ACCEPTING	async/AsyncConnection.h	/^    STATE_ACCEPTING,$/;"	e	enum:AsyncConnection::__anon8
STATE_ACCEPTING	simple/Pipe.h	/^      STATE_ACCEPTING,$/;"	e	enum:Pipe::__anon1
STATE_ACCEPTING_READY	async/AsyncConnection.h	/^    STATE_ACCEPTING_READY,$/;"	e	enum:AsyncConnection::__anon8
STATE_ACCEPTING_WAIT_BANNER_ADDR	async/AsyncConnection.h	/^    STATE_ACCEPTING_WAIT_BANNER_ADDR,$/;"	e	enum:AsyncConnection::__anon8
STATE_ACCEPTING_WAIT_CONNECT_MSG	async/AsyncConnection.h	/^    STATE_ACCEPTING_WAIT_CONNECT_MSG,$/;"	e	enum:AsyncConnection::__anon8
STATE_ACCEPTING_WAIT_CONNECT_MSG_AUTH	async/AsyncConnection.h	/^    STATE_ACCEPTING_WAIT_CONNECT_MSG_AUTH,$/;"	e	enum:AsyncConnection::__anon8
STATE_ACCEPTING_WAIT_SEQ	async/AsyncConnection.h	/^    STATE_ACCEPTING_WAIT_SEQ,$/;"	e	enum:AsyncConnection::__anon8
STATE_CLOSED	async/AsyncConnection.h	/^    STATE_CLOSED,$/;"	e	enum:AsyncConnection::__anon8
STATE_CLOSED	simple/Pipe.h	/^      STATE_CLOSED,$/;"	e	enum:Pipe::__anon1
STATE_CLOSING	simple/Pipe.h	/^      STATE_CLOSING,$/;"	e	enum:Pipe::__anon1
STATE_CONNECTING	async/AsyncConnection.h	/^    STATE_CONNECTING,$/;"	e	enum:AsyncConnection::__anon8
STATE_CONNECTING	simple/Pipe.h	/^      STATE_CONNECTING,$/;"	e	enum:Pipe::__anon1
STATE_CONNECTING_RE	async/AsyncConnection.h	/^    STATE_CONNECTING_RE,$/;"	e	enum:AsyncConnection::__anon8
STATE_CONNECTING_READY	async/AsyncConnection.h	/^    STATE_CONNECTING_READY,$/;"	e	enum:AsyncConnection::__anon8
STATE_CONNECTING_SEND_CONNECT_MSG	async/AsyncConnection.h	/^    STATE_CONNECTING_SEND_CONNECT_MSG,$/;"	e	enum:AsyncConnection::__anon8
STATE_CONNECTING_WAIT_ACK_SEQ	async/AsyncConnection.h	/^    STATE_CONNECTING_WAIT_ACK_SEQ,$/;"	e	enum:AsyncConnection::__anon8
STATE_CONNECTING_WAIT_BANNER_AND_IDENTIFY	async/AsyncConnection.h	/^    STATE_CONNECTING_WAIT_BANNER_AND_IDENTIFY,$/;"	e	enum:AsyncConnection::__anon8
STATE_CONNECTING_WAIT_CONNECT_REPLY	async/AsyncConnection.h	/^    STATE_CONNECTING_WAIT_CONNECT_REPLY,$/;"	e	enum:AsyncConnection::__anon8
STATE_CONNECTING_WAIT_CONNECT_REPLY_AUTH	async/AsyncConnection.h	/^    STATE_CONNECTING_WAIT_CONNECT_REPLY_AUTH,$/;"	e	enum:AsyncConnection::__anon8
STATE_NONE	async/AsyncConnection.h	/^    STATE_NONE,$/;"	e	enum:AsyncConnection::__anon8
STATE_OPEN	async/AsyncConnection.h	/^    STATE_OPEN,$/;"	e	enum:AsyncConnection::__anon8
STATE_OPEN	simple/Pipe.h	/^      STATE_OPEN,$/;"	e	enum:Pipe::__anon1
STATE_OPEN_KEEPALIVE2	async/AsyncConnection.h	/^    STATE_OPEN_KEEPALIVE2,$/;"	e	enum:AsyncConnection::__anon8
STATE_OPEN_KEEPALIVE2_ACK	async/AsyncConnection.h	/^    STATE_OPEN_KEEPALIVE2_ACK,$/;"	e	enum:AsyncConnection::__anon8
STATE_OPEN_MESSAGE_HEADER	async/AsyncConnection.h	/^    STATE_OPEN_MESSAGE_HEADER,$/;"	e	enum:AsyncConnection::__anon8
STATE_OPEN_MESSAGE_READ_DATA	async/AsyncConnection.h	/^    STATE_OPEN_MESSAGE_READ_DATA,$/;"	e	enum:AsyncConnection::__anon8
STATE_OPEN_MESSAGE_READ_DATA_PREPARE	async/AsyncConnection.h	/^    STATE_OPEN_MESSAGE_READ_DATA_PREPARE,$/;"	e	enum:AsyncConnection::__anon8
STATE_OPEN_MESSAGE_READ_FOOTER_AND_DISPATCH	async/AsyncConnection.h	/^    STATE_OPEN_MESSAGE_READ_FOOTER_AND_DISPATCH,$/;"	e	enum:AsyncConnection::__anon8
STATE_OPEN_MESSAGE_READ_FRONT	async/AsyncConnection.h	/^    STATE_OPEN_MESSAGE_READ_FRONT,$/;"	e	enum:AsyncConnection::__anon8
STATE_OPEN_MESSAGE_READ_MIDDLE	async/AsyncConnection.h	/^    STATE_OPEN_MESSAGE_READ_MIDDLE,$/;"	e	enum:AsyncConnection::__anon8
STATE_OPEN_MESSAGE_THROTTLE_BYTES	async/AsyncConnection.h	/^    STATE_OPEN_MESSAGE_THROTTLE_BYTES,$/;"	e	enum:AsyncConnection::__anon8
STATE_OPEN_MESSAGE_THROTTLE_DISPATCH_QUEUE	async/AsyncConnection.h	/^    STATE_OPEN_MESSAGE_THROTTLE_DISPATCH_QUEUE,$/;"	e	enum:AsyncConnection::__anon8
STATE_OPEN_MESSAGE_THROTTLE_MESSAGE	async/AsyncConnection.h	/^    STATE_OPEN_MESSAGE_THROTTLE_MESSAGE,$/;"	e	enum:AsyncConnection::__anon8
STATE_OPEN_TAG_ACK	async/AsyncConnection.h	/^    STATE_OPEN_TAG_ACK,$/;"	e	enum:AsyncConnection::__anon8
STATE_OPEN_TAG_CLOSE	async/AsyncConnection.h	/^    STATE_OPEN_TAG_CLOSE,$/;"	e	enum:AsyncConnection::__anon8
STATE_STANDBY	async/AsyncConnection.h	/^    STATE_STANDBY,$/;"	e	enum:AsyncConnection::__anon8
STATE_STANDBY	simple/Pipe.h	/^      STATE_STANDBY,$/;"	e	enum:Pipe::__anon1
STATE_WAIT	async/AsyncConnection.h	/^    STATE_WAIT,       \/\/ just wait for racing connection$/;"	e	enum:AsyncConnection::__anon8
STATE_WAIT	simple/Pipe.h	/^      STATE_WAIT       \/\/ just wait for racing connection$/;"	e	enum:Pipe::__anon1
STATE_WAIT_SEND	async/AsyncConnection.h	/^    STATE_WAIT_SEND,$/;"	e	enum:AsyncConnection::__anon8
SYN_RECEIVED	async/dpdk/TCP.h	/^    static constexpr tcp_state SYN_RECEIVED   = tcp_state::SYN_RECEIVED;$/;"	m	class:tcp_state::tcp_option::option_kind::tcp::tcb
SYN_RECEIVED	async/dpdk/TCP.h	/^  SYN_RECEIVED    = (1 << 3),$/;"	m	class:tcp_state
SYN_SENT	async/dpdk/TCP.h	/^    static constexpr tcp_state SYN_SENT       = tcp_state::SYN_SENT;$/;"	m	class:tcp_state::tcp_option::option_kind::tcp::tcb
SYN_SENT	async/dpdk/TCP.h	/^  SYN_SENT        = (1 << 2),$/;"	m	class:tcp_state
SaveEvent	async/EventKqueue.h	/^  struct SaveEvent{$/;"	s	class:KqueueDriver
SelectDriver	async/EventSelect.h	/^  explicit SelectDriver(CephContext *c): max_fd(0), cct(c) {}$/;"	f	class:SelectDriver
SelectDriver	async/EventSelect.h	/^class SelectDriver : public EventDriver {$/;"	c
SendQ	xio/XioConnection.h	/^    SendQ():keepalive(false), ack(false){}$/;"	f	struct:XioConnection::SendQ
SendQ	xio/XioConnection.h	/^  struct SendQ {$/;"	s	class:XioConnection
ServerSocket	async/Stack.h	/^  ServerSocket() {}$/;"	f	class:ServerSocket
ServerSocket	async/Stack.h	/^  explicit ServerSocket(std::unique_ptr<ServerSocketImpl> ssi)$/;"	f	class:ServerSocket
ServerSocket	async/Stack.h	/^class ServerSocket {$/;"	c
ServerSocketImpl	async/Stack.h	/^class ServerSocketImpl {$/;"	c
SimpleMessenger	simple/SimpleMessenger.cc	/^SimpleMessenger::SimpleMessenger(CephContext *cct, entity_name_t name,$/;"	f	class:SimpleMessenger
SimpleMessenger	simple/SimpleMessenger.h	/^class SimpleMessenger : public SimplePolicyMessenger {$/;"	c
SimplePolicyMessenger	SimplePolicyMessenger.h	/^  SimplePolicyMessenger(CephContext *cct, entity_name_t name,$/;"	f	class:SimplePolicyMessenger
SimplePolicyMessenger	SimplePolicyMessenger.h	/^class SimplePolicyMessenger : public Messenger$/;"	c
SocketOptions	async/Stack.h	/^struct SocketOptions {$/;"	s
StackSingleton	async/AsyncMessenger.cc	/^  StackSingleton(CephContext *c): cct(c) {}$/;"	f	struct:StackSingleton
StackSingleton	async/AsyncMessenger.cc	/^struct StackSingleton {$/;"	s	file:
SubmitQueue	xio/XioPortal.h	/^    SubmitQueue() : ix(0)$/;"	f	struct:XioPortal::SubmitQueue
SubmitQueue	xio/XioPortal.h	/^  struct SubmitQueue$/;"	s	class:XioPortal
TCP_MSG_LEN	async/rdma/Infiniband.cc	/^static const uint32_t TCP_MSG_LEN = sizeof("0000:00000000:00000000:00000000:00000000000000000000000000000000");$/;"	v	file:
TCP_PREFETCH_MIN_SIZE	async/AsyncConnection.cc	/^const int AsyncConnection::TCP_PREFETCH_MIN_SIZE = 512;$/;"	m	class:AsyncConnection	file:
TCP_PREFETCH_MIN_SIZE	async/AsyncConnection.h	/^  static const int TCP_PREFETCH_MIN_SIZE;$/;"	m	class:AsyncConnection
TIME_WAIT	async/dpdk/TCP.h	/^    static constexpr tcp_state TIME_WAIT      = tcp_state::TIME_WAIT;$/;"	m	class:tcp_state::tcp_option::option_kind::tcp::tcb
TIME_WAIT	async/dpdk/TCP.h	/^  TIME_WAIT       = (1 << 10)$/;"	m	class:tcp_state
TYPE_CLIENT	msg_types.h	/^  static const int TYPE_CLIENT = CEPH_ENTITY_TYPE_CLIENT;$/;"	m	class:entity_name_t
TYPE_DEFAULT	msg_types.h	/^  static const type_t TYPE_DEFAULT = TYPE_LEGACY;$/;"	m	struct:entity_addr_t
TYPE_LEGACY	msg_types.h	/^    TYPE_LEGACY = 1,  \/\/\/< legacy msgr1 protocol (ceph jewel and older)$/;"	e	enum:entity_addr_t::__anon10
TYPE_MDS	msg_types.h	/^  static const int TYPE_MDS = CEPH_ENTITY_TYPE_MDS;$/;"	m	class:entity_name_t
TYPE_MGR	msg_types.h	/^  static const int TYPE_MGR = CEPH_ENTITY_TYPE_MGR;$/;"	m	class:entity_name_t
TYPE_MON	msg_types.h	/^  static const int TYPE_MON = CEPH_ENTITY_TYPE_MON;$/;"	m	class:entity_name_t
TYPE_MSGR2	msg_types.h	/^    TYPE_MSGR2 = 2,   \/\/\/< msgr2 protocol (new in ceph kraken)$/;"	e	enum:entity_addr_t::__anon10
TYPE_NONE	msg_types.h	/^    TYPE_NONE = 0,$/;"	e	enum:entity_addr_t::__anon10
TYPE_OSD	msg_types.h	/^  static const int TYPE_OSD = CEPH_ENTITY_TYPE_OSD;$/;"	m	class:entity_name_t
TimeEvent	async/Event.h	/^    TimeEvent(): id(0), time_cb(NULL) {}$/;"	f	struct:EventCenter::TimeEvent
TimeEvent	async/Event.h	/^  struct TimeEvent {$/;"	s	class:EventCenter
UP	xio/XioConnection.h	/^      UP,$/;"	e	enum:XioConnection::lifecycle::lf_state
UP	xio/XioConnection.h	/^    UP,$/;"	m	class:XioConnection::session_states
UserspaceEventManager	async/dpdk/UserspaceEvent.h	/^  UserspaceEventManager(CephContext *c): cct(c) {$/;"	f	class:UserspaceEventManager
UserspaceEventManager	async/dpdk/UserspaceEvent.h	/^class UserspaceEventManager {$/;"	c
UserspaceFDImpl	async/dpdk/UserspaceEvent.h	/^  struct UserspaceFDImpl {$/;"	s	class:UserspaceEventManager
Worker	async/Stack.h	/^  Worker(CephContext *c, unsigned i)$/;"	f	class:Worker
Worker	async/Stack.h	/^class Worker {$/;"	c
WriteStatus	async/AsyncConnection.h	/^  enum class WriteStatus {$/;"	c	class:AsyncConnection
Writer	simple/Pipe.h	/^      explicit Writer(Pipe *p) : pipe(p) {}$/;"	f	class:Pipe::Writer
Writer	simple/Pipe.h	/^    class Writer : public Thread {$/;"	c	class:Pipe
X	async/dpdk/circular_buffer.h	/^  circular_buffer(const circular_buffer& X) = delete;$/;"	m	class:circular_buffer
XIO_ALL_FEATURES	xio/XioConnection.h	34;"	d
XIO_CONNECTION_H	xio/XioConnection.h	17;"	d
XIO_IN_SEQ_H	xio/XioInSeq.h	17;"	d
XIO_MESSENGER_H	xio/XioMessenger.h	17;"	d
XIO_MSGR_IOVLEN	xio/XioMsg.h	150;"	d
XIO_MSG_H	xio/XioMsg.h	17;"	d
XIO_NOP_TAG_MARKDOWN	xio/XioConnection.h	37;"	d
XIO_POOL_H	xio/XioPool.h	15;"	d
XIO_PORTAL_H	xio/XioPortal.h	17;"	d
XIO_SUBMIT_H	xio/XioSubmit.h	17;"	d
XMSG_MEMPOOL_QUANTUM	xio/XioMessenger.cc	303;"	d	file:
XioCommand	xio/XioMsg.h	/^  XioCommand(XioConnection *_xcon, struct xio_reg_mem& _mp):XioSend(_xcon, _mp) {$/;"	f	class:XioCommand
XioCommand	xio/XioMsg.h	/^class XioCommand : public XioSend$/;"	c
XioCompletion	xio/XioMsg.h	/^  XioCompletion(XioConnection *_xcon, XioDispatchHook *_xhook)$/;"	f	struct:XioCompletion
XioCompletion	xio/XioMsg.h	/^struct XioCompletion : public XioSubmit$/;"	s
XioConnection	xio/XioConnection.cc	/^XioConnection::XioConnection(XioMessenger *m, XioConnection::type _type,$/;"	f	class:XioConnection
XioConnection	xio/XioConnection.h	/^class XioConnection : public Connection$/;"	c
XioConnectionRef	xio/XioConnection.h	/^typedef boost::intrusive_ptr<XioConnection> XioConnectionRef;$/;"	t
XioDispatchHook	xio/XioMsg.h	/^  XioDispatchHook(XioConnection *_xcon, Message *_m, XioInSeq& _msg_seq,$/;"	f	class:XioDispatchHook
XioDispatchHook	xio/XioMsg.h	/^class XioDispatchHook : public Message::CompletionHook$/;"	c
XioInSeq	xio/XioInSeq.h	/^  XioInSeq() : cnt(0), sz(0), head(NULL), tail(NULL) {}$/;"	f	class:XioInSeq
XioInSeq	xio/XioInSeq.h	/^  XioInSeq(const XioInSeq& seq) {$/;"	f	class:XioInSeq
XioInSeq	xio/XioInSeq.h	/^class XioInSeq {$/;"	c
XioInit	xio/XioMessenger.h	/^  XioInit(CephContext *cct) {$/;"	f	class:XioInit
XioInit	xio/XioMessenger.h	/^class XioInit {$/;"	c
XioLoopbackConnection	xio/XioConnection.h	/^  explicit XioLoopbackConnection(Messenger *m) : Connection(m->cct, m)$/;"	f	class:XioLoopbackConnection
XioLoopbackConnection	xio/XioConnection.h	/^class XioLoopbackConnection : public Connection$/;"	c
XioLoopbackConnectionRef	xio/XioConnection.h	/^typedef boost::intrusive_ptr<XioLoopbackConnection> XioLoopbackConnectionRef;$/;"	t
XioMarkDownHook	xio/XioMsg.h	/^  XioMarkDownHook($/;"	f	class:XioMarkDownHook
XioMarkDownHook	xio/XioMsg.h	/^class XioMarkDownHook : public Message::CompletionHook$/;"	c
XioMessenger	xio/XioMessenger.cc	/^XioMessenger::XioMessenger(CephContext *cct, entity_name_t name,$/;"	f	class:XioMessenger
XioMessenger	xio/XioMessenger.h	/^class XioMessenger : public SimplePolicyMessenger, XioInit$/;"	c
XioMsg	xio/XioMsg.h	/^  XioMsg(Message *_m, XioConnection *_xcon, struct xio_reg_mem& _mp,$/;"	f	struct:XioMsg
XioMsg	xio/XioMsg.h	/^struct XioMsg : public XioSend$/;"	s
XioMsgCnt	xio/XioMsg.h	/^  explicit XioMsgCnt(buffer::ptr p)$/;"	f	class:XioMsgCnt
XioMsgCnt	xio/XioMsg.h	/^class XioMsgCnt$/;"	c
XioMsgHdr	xio/XioMsg.h	/^  XioMsgHdr(ceph_msg_header& _hdr, ceph_msg_footer &_ftr, buffer::ptr p)$/;"	f	class:XioMsgHdr
XioMsgHdr	xio/XioMsg.h	/^  XioMsgHdr(ceph_msg_header& _hdr, ceph_msg_footer& _ftr, uint64_t _features)$/;"	f	class:XioMsgHdr
XioMsgHdr	xio/XioMsg.h	/^WRITE_CLASS_ENCODER(XioMsgHdr);$/;"	v
XioMsgHdr	xio/XioMsg.h	/^class XioMsgHdr$/;"	c
XioPool	xio/XioPool.h	/^  explicit XioPool(struct xio_mempool *_handle) :$/;"	f	class:XioPool
XioPool	xio/XioPool.h	/^class XioPool$/;"	c
XioPoolStats	xio/XioPool.h	/^class XioPoolStats {$/;"	c
XioPortal	xio/XioPortal.h	/^  explicit XioPortal(Messenger *_msgr, int max_conns) :$/;"	f	class:XioPortal
XioPortal	xio/XioPortal.h	/^class XioPortal : public Thread$/;"	c
XioPortals	xio/XioPortal.h	/^  XioPortals(Messenger *msgr, int _n, int nconns) : p_vec(NULL), last_unused(0)$/;"	f	class:XioPortals
XioPortals	xio/XioPortal.h	/^class XioPortals$/;"	c
XioSend	xio/XioMsg.h	/^  XioSend(XioConnection *_xcon, struct xio_reg_mem& _mp, int _ex_cnt=0) :$/;"	f	class:XioSend
XioSend	xio/XioMsg.h	/^class XioSend : public XioSubmit$/;"	c
XioSubmit	xio/XioSubmit.h	/^  XioSubmit(enum submit_type _type, XioConnection *_xcon) :$/;"	f	struct:XioSubmit
XioSubmit	xio/XioSubmit.h	/^struct XioSubmit$/;"	s
__ss_padding	msg_types.h	/^  __u8 __ss_padding[128 - sizeof(__le16)];$/;"	m	struct:ceph_sockaddr_storage
_all_data_acked_fd	async/dpdk/TCP.h	/^      int _all_data_acked_fd = -1;$/;"	m	struct:tcp_state::tcp_option::option_kind::tcp::tcb::send
_alloc_bufs	async/dpdk/DPDK.h	/^  std::vector<void*> _alloc_bufs;$/;"	m	class:DPDKQueuePair
_allocated_frags	async/dpdk/Packet.h	/^    uint16_t _allocated_frags;$/;"	m	struct:Packet::impl
_append_keepalive_or_ack	async/AsyncConnection.cc	/^void AsyncConnection::_append_keepalive_or_ack(bool ack, utime_t *tp)$/;"	f	class:AsyncConnection
_arp	async/dpdk/ARP.h	/^  arp& _arp;$/;"	m	class:arp_for_protocol
_arp	async/dpdk/IP.h	/^  arp_for<ipv4> _arp;$/;"	m	class:ipv4
_arp_for_protocol	async/dpdk/ARP.h	/^  std::unordered_map<uint16_t, arp_for_protocol*> _arp_for_protocol;$/;"	m	class:arp
_buf	async/dpdk/DPDKStack.h	/^  Tub<Packet> _buf;$/;"	m	class:NativeConnectedSocketImpl
_buf_physaddr	async/dpdk/DPDK.h	/^    phys_addr_t _buf_physaddr;$/;"	m	class:DPDKQueuePair::tx_buf
_bufs	async/dpdk/DPDK.h	/^  std::vector<char*> _bufs;$/;"	m	class:DPDKQueuePair
_cache_ptr	async/dpdk/DPDKStack.h	/^  Tub<bufferptr> _cache_ptr;$/;"	m	class:NativeConnectedSocketImpl
_conn	async/dpdk/DPDKStack.h	/^  typename Protocol::connection _conn;$/;"	m	class:NativeConnectedSocketImpl
_conn	async/dpdk/TCP.h	/^    connection* _conn = nullptr;$/;"	m	class:tcp_state::tcp_option::option_kind::tcp::tcb
_conn_prefix	async/AsyncConnection.cc	/^ostream& AsyncConnection::_conn_prefix(std::ostream *_dout) {$/;"	f	class:AsyncConnection
_connect	async/AsyncConnection.cc	/^void AsyncConnection::_connect()$/;"	f	class:AsyncConnection
_connect_done	async/dpdk/TCP.h	/^    bool _connect_done = false;$/;"	m	class:tcp_state::tcp_option::option_kind::tcp::tcb
_count	async/dpdk/shared_ptr.h	/^  long _count = 0;$/;"	m	class:enable_lw_shared_from_this
_csi	async/Stack.h	/^  std::unique_ptr<ConnectedSocketImpl> _csi;$/;"	m	class:ConnectedSocket
_cur_frag	async/dpdk/DPDKStack.h	/^  uint32_t _cur_frag = 0;$/;"	m	class:NativeConnectedSocketImpl
_cur_off	async/dpdk/DPDKStack.h	/^  uint32_t _cur_off = 0;$/;"	m	class:NativeConnectedSocketImpl
_data_off	async/dpdk/DPDK.h	/^    uint16_t _data_off;$/;"	m	class:DPDKQueuePair::tx_buf
_delayed_ack_fd	async/dpdk/TCP.h	/^    Tub<uint64_t> _delayed_ack_fd;$/;"	m	class:tcp_state::tcp_option::option_kind::tcp::tcb
_deleter	async/dpdk/Packet.h	/^    deleter _deleter;$/;"	m	struct:Packet::impl
_dev	async/dpdk/DPDK.h	/^  DPDKDevice* _dev;$/;"	m	class:DPDKQueuePair
_dev	async/dpdk/DPDKStack.h	/^    std::shared_ptr<DPDKDevice> _dev;$/;"	m	struct:DPDKWorker::Impl
_dev	async/dpdk/net.h	/^  std::shared_ptr<DPDKDevice> _dev;$/;"	m	class:interface
_dev_info	async/dpdk/DPDK.h	/^  rte_eth_dev_info _dev_info = {};$/;"	m	class:DPDKDevice
_dev_port_idx	async/dpdk/DPDK.h	/^  uint8_t _dev_port_idx;$/;"	m	class:DPDKQueuePair
_e	async/dpdk/TCP.h	/^  std::default_random_engine _e;$/;"	m	class:tcp_state::tcp_option::option_kind::tcp
_enable_fc	async/dpdk/DPDK.h	/^  bool _enable_fc;$/;"	m	class:DPDKDevice
_errno	async/dpdk/TCP.h	/^    int16_t _errno = 1;$/;"	m	class:tcp_state::tcp_option::option_kind::tcp::tcb
_errno	async/dpdk/TCP.h	/^    int16_t _errno;$/;"	m	class:tcp_state::tcp_option::option_kind::tcp::listener
_event_prefix	async/Event.cc	/^ostream& EventCenter::_event_prefix(std::ostream *_dout)$/;"	f	class:EventCenter
_fc	async/dpdk/DPDK.h	/^    tx_buf_factory& _fc;$/;"	m	class:DPDKQueuePair::tx_buf
_fd	async/PosixStack.cc	/^  int _fd;$/;"	m	class:PosixServerSocketImpl	file:
_fd	async/PosixStack.cc	/^  int _fd;$/;"	m	class:final	file:
_fd	async/dpdk/TCP.h	/^    int _fd = -1;$/;"	m	class:tcp_state::tcp_option::option_kind::tcp::listener
_finish	async/dpdk/Packet.h	/^    fragment* _finish;$/;"	m	struct:Packet::pseudo_vector
_finish_bind	async/AsyncMessenger.cc	/^void AsyncMessenger::_finish_bind(const entity_addr_t& bind_addr,$/;"	f	class:AsyncMessenger
_foreign_ip	async/dpdk/TCP.h	/^    ipaddr _foreign_ip;$/;"	m	class:tcp_state::tcp_option::option_kind::tcp::tcb
_foreign_port	async/dpdk/TCP.h	/^    uint16_t _foreign_port;$/;"	m	class:tcp_state::tcp_option::option_kind::tcp::tcb
_frag_high_thresh	async/dpdk/IP.cc	/^constexpr uint32_t ipv4::_frag_high_thresh;$/;"	m	class:ipv4	file:
_frag_low_thresh	async/dpdk/IP.cc	/^constexpr uint32_t ipv4::_frag_low_thresh;$/;"	m	class:ipv4	file:
_frag_mem	async/dpdk/IP.h	/^  uint32_t _frag_mem = 0;$/;"	m	class:ipv4
_frag_timeout	async/dpdk/IP.cc	/^utime_t ipv4::_frag_timeout = utime_t(30, 0);$/;"	m	class:ipv4	file:
_frag_timeout	async/dpdk/IP.h	/^  static utime_t _frag_timeout;$/;"	m	class:ipv4
_frags	async/dpdk/DPDK.h	/^  std::vector<fragment> _frags;$/;"	m	class:DPDKQueuePair
_frags	async/dpdk/IP.h	/^  std::unordered_map<ipv4_frag_id, frag, ipv4_frag_id::hash> _frags;$/;"	m	class:ipv4
_frags_age	async/dpdk/IP.h	/^  std::list<ipv4_frag_id> _frags_age;$/;"	m	class:ipv4
_get_file_event	async/Event.h	/^  FileEvent *_get_file_event(int fd) {$/;"	f	class:EventCenter
_get_next_outgoing	async/AsyncConnection.h	/^  Message *_get_next_outgoing(bufferlist *bl) {$/;"	f	class:AsyncConnection
_get_next_outgoing	simple/Pipe.h	/^    Message *_get_next_outgoing() {$/;"	f	class:Pipe
_global_arp	async/dpdk/IP.h	/^  arp _global_arp;$/;"	m	class:ipv4
_gw_address	async/dpdk/IP.h	/^  ipv4_address _gw_address;$/;"	m	class:ipv4
_has_next_outgoing	async/AsyncConnection.h	/^  bool _has_next_outgoing() const {$/;"	f	class:AsyncConnection
_home_cpu	async/dpdk/DPDK.h	/^  unsigned _home_cpu;$/;"	m	class:DPDKDevice
_host_address	async/dpdk/IP.h	/^  ipv4_address _host_address;$/;"	m	class:ipv4
_hw_address	async/dpdk/net.h	/^  ethernet_address _hw_address;$/;"	m	class:interface
_hw_features	async/dpdk/DPDK.h	/^  hw_features _hw_features;$/;"	m	class:DPDKDevice
_hw_features	async/dpdk/net.h	/^  struct hw_features _hw_features;$/;"	m	class:interface	typeref:struct:interface::hw_features
_icmp	async/dpdk/IP.h	/^  icmp _icmp;$/;"	m	class:final
_icmp	async/dpdk/IP.h	/^  ipv4_icmp _icmp;$/;"	m	class:ipv4
_impl	async/dpdk/DPDKStack.h	/^  std::unique_ptr<Impl> _impl;$/;"	m	class:DPDKWorker
_impl	async/dpdk/Packet.h	/^  std::unique_ptr<impl> _impl;$/;"	m	class:Packet
_impl	async/dpdk/circular_buffer.h	/^  impl _impl;$/;"	m	class:circular_buffer
_in_progress	async/dpdk/ARP.h	/^  std::unordered_map<l3addr, resolution> _in_progress;$/;"	m	class:arp_for
_inet	async/dpdk/DPDKStack.h	/^    ipv4 _inet;$/;"	m	struct:DPDKWorker::Impl
_inet	async/dpdk/IP.h	/^  inet_type& _inet;$/;"	m	class:icmp
_inet	async/dpdk/IP.h	/^  ipv4& _inet;$/;"	m	class:ipv4_l4
_inet	async/dpdk/TCP.h	/^  inet_type& _inet;$/;"	m	class:tcp_state::tcp_option::option_kind::tcp
_inet_l4	async/dpdk/IP.h	/^  ipv4_l4<ip_protocol_num::icmp> _inet_l4;$/;"	m	class:final
_inet_l4	async/dpdk/IP.h	/^  ipv4_l4<ip_protocol_num::tcp> _inet_l4;$/;"	m	class:final
_init_local_connection	async/AsyncMessenger.h	/^  void _init_local_connection() {$/;"	f	class:AsyncMessenger
_ipv4	async/dpdk/IP.cc	/^  ipv4 *_ipv4;$/;"	m	class:C_handle_frag_timeout	file:
_is_i40e_device	async/dpdk/DPDK.h	/^  bool _is_i40e_device = false;$/;"	m	class:DPDKDevice
_is_vmxnet3_device	async/dpdk/DPDK.h	/^  bool _is_vmxnet3_device = false;$/;"	m	class:DPDKDevice
_is_zc	async/dpdk/DPDK.h	/^    bool _is_zc = false;$/;"	m	class:DPDKQueuePair::tx_buf
_isn_secret	async/dpdk/TCP.h	/^    static isn_secret _isn_secret;$/;"	m	class:tcp_state::tcp_option::option_kind::tcp::tcb
_isn_secret	async/dpdk/TCP.h	/^typename tcp<InetTraits>::tcb::isn_secret tcp<InetTraits>::tcb::_isn_secret;$/;"	m	class:tcp_state::tcp_option::option_kind::tcp::tcb
_l3	async/dpdk/IP.h	/^  l3_protocol _l3;$/;"	m	class:ipv4
_l3self	async/dpdk/ARP.h	/^  l3addr _l3self = L3::broadcast_address();$/;"	m	class:arp_for
_l4	async/dpdk/IP.h	/^  array_map<ip_protocol*, 256> _l4;$/;"	m	class:ipv4
_len	async/dpdk/Packet.h	/^    unsigned _len = 0;$/;"	m	struct:Packet::impl
_listener	async/dpdk/DPDKStack.h	/^  typename Protocol::listener _listener;$/;"	m	class:DPDKServerSocketImpl
_listening	async/dpdk/TCP.h	/^  std::unordered_map<uint16_t, listener*> _listening;$/;"	m	class:tcp_state::tcp_option::option_kind::tcp
_local_ip	async/dpdk/TCP.h	/^    ipaddr _local_ip;$/;"	m	class:tcp_state::tcp_option::option_kind::tcp::tcb
_local_mss	async/dpdk/TCP.h	/^  uint16_t _local_mss;$/;"	m	class:tcp_state::tcp_option::option_kind::option_len
_local_port	async/dpdk/TCP.h	/^    uint16_t _local_port;$/;"	m	class:tcp_state::tcp_option::option_kind::tcp::tcb
_local_win_scale	async/dpdk/TCP.h	/^  uint8_t _local_win_scale = 0;$/;"	m	class:tcp_state::tcp_option::option_kind::option_len
_lookup_conn	async/AsyncMessenger.h	/^  AsyncConnectionRef _lookup_conn(const entity_addr_t& k) {$/;"	f	class:AsyncMessenger
_lookup_pipe	simple/SimpleMessenger.h	/^  Pipe *_lookup_pipe(const entity_addr_t& k) {$/;"	f	class:SimpleMessenger
_mark_disposable	xio/XioConnection.cc	/^int XioConnection::_mark_disposable(uint32_t flags)$/;"	f	class:XioConnection
_mark_down	xio/XioConnection.cc	/^int XioConnection::_mark_down(uint32_t flags)$/;"	f	class:XioConnection
_max	async/dpdk/queue.h	/^  size_t _max;$/;"	m	class:queue
_max_nr_retransmit	async/dpdk/TCP.h	/^constexpr uint16_t tcp<InetTraits>::tcb::_max_nr_retransmit;$/;"	m	class:tcp_state::tcp_option::option_kind::tcp::tcb
_mbuf	async/dpdk/DPDK.h	/^    struct rte_mbuf _mbuf;$/;"	m	class:DPDKQueuePair::tx_buf	typeref:struct:DPDKQueuePair::tx_buf::rte_mbuf
_mss_received	async/dpdk/TCP.h	/^  bool _mss_received = false;$/;"	m	class:tcp_state::tcp_option::option_kind::option_len
_netif	async/dpdk/ARP.h	/^  interface* _netif;$/;"	m	class:arp
_netif	async/dpdk/DPDKStack.h	/^    interface _netif;$/;"	m	struct:DPDKWorker::Impl
_netif	async/dpdk/IP.h	/^  interface* _netif;$/;"	m	class:ipv4
_netif	async/dpdk/net.h	/^  interface* _netif;$/;"	m	class:l3_protocol
_netmask	async/dpdk/IP.h	/^  ipv4_address _netmask;$/;"	m	class:ipv4
_next	async/dpdk/stream.h	/^  next_fn _next;$/;"	m	class:subscription
_nr_frags	async/dpdk/Packet.h	/^    uint16_t _nr_frags = 0;$/;"	m	struct:Packet::impl
_nr_full_seg_received	async/dpdk/TCP.h	/^    uint16_t _nr_full_seg_received = 0;$/;"	m	class:tcp_state::tcp_option::option_kind::tcp::tcb
_num	msg_types.h	/^  int64_t _num;$/;"	m	class:entity_name_t
_num_queues	async/dpdk/DPDK.h	/^  uint16_t _num_queues;$/;"	m	class:DPDKDevice
_num_rx_free_segs	async/dpdk/DPDK.h	/^  size_t _num_rx_free_segs = 0;$/;"	m	class:DPDKQueuePair
_offload_info	async/dpdk/Packet.h	/^    offload_info _offload_info;$/;"	m	struct:Packet::impl
_option	async/dpdk/TCP.h	/^    tcp_option _option;$/;"	m	class:tcp_state::tcp_option::option_kind::tcp::tcb
_p	async/dpdk/DPDK.h	/^    Tub<Packet> _p;$/;"	m	class:DPDKQueuePair::tx_buf
_p	async/dpdk/shared_ptr.h	/^  lw_shared_ptr(const lw_shared_ptr& x) noexcept : _p(x._p) {$/;"	f	class:lw_shared_ptr
_p	async/dpdk/shared_ptr.h	/^  lw_shared_ptr(lw_shared_ptr&& x) noexcept  : _p(x._p) {$/;"	f	class:lw_shared_ptr
_p	async/dpdk/shared_ptr.h	/^  lw_shared_ptr(shared_ptr_impl<T>* p) noexcept : _p(p) {$/;"	f	class:lw_shared_ptr
_p	async/dpdk/shared_ptr.h	/^  mutable shared_ptr_impl<T>* _p = nullptr;$/;"	m	class:lw_shared_ptr
_packet_filter	async/dpdk/IP.h	/^  ip_packet_filter *_packet_filter;$/;"	m	class:ipv4
_packetq	async/dpdk/ARP.h	/^  circular_buffer<l3_protocol::l3packet> _packetq;$/;"	m	class:arp
_packetq	async/dpdk/IP.h	/^  circular_buffer<ipv4_traits::l4packet> _packetq;$/;"	m	class:icmp
_packetq	async/dpdk/IP.h	/^  circular_buffer<l3_protocol::l3packet> _packetq;$/;"	m	class:ipv4
_packetq	async/dpdk/TCP.h	/^    circular_buffer<typename InetTraits::l4packet> _packetq;$/;"	m	class:tcp_state::tcp_option::option_kind::tcp::tcb
_packetq	async/dpdk/TCP.h	/^  circular_buffer<ipv4_traits::l4packet> _packetq;$/;"	m	class:tcp_state::tcp_option::option_kind::tcp
_pipe_prefix	simple/Pipe.cc	/^ostream& Pipe::_pipe_prefix(std::ostream &out) const {$/;"	f	class:Pipe
_pkt_provider_idx	async/dpdk/IP.h	/^  unsigned _pkt_provider_idx = 0;$/;"	m	class:ipv4
_pkt_providers	async/dpdk/DPDK.h	/^  std::vector<packet_provider_type> _pkt_providers;$/;"	m	class:DPDKQueuePair
_pkt_providers	async/dpdk/IP.h	/^  std::vector<ipv4_traits::packet_provider_type> _pkt_providers;$/;"	m	class:ipv4
_pkt_providers	async/dpdk/net.h	/^  std::vector<l3_protocol::packet_provider_type> _pkt_providers;$/;"	m	class:interface
_pktmbuf_pool_rx	async/dpdk/DPDK.h	/^  rte_mempool *_pktmbuf_pool_rx;$/;"	m	class:DPDKQueuePair
_poll_active	async/dpdk/TCP.h	/^    bool _poll_active = false;$/;"	m	class:tcp_state::tcp_option::option_kind::tcp::tcb
_poll_tcbs	async/dpdk/TCP.h	/^  circular_buffer<std::pair<lw_shared_ptr<tcb>, ethernet_address>> _poll_tcbs;$/;"	m	class:tcp_state::tcp_option::option_kind::tcp
_pool	async/dpdk/DPDK.h	/^    rte_mempool* _pool = nullptr;$/;"	m	class:DPDKQueuePair::tx_buf_factory
_port	async/dpdk/TCP.h	/^    uint16_t _port;$/;"	m	class:tcp_state::tcp_option::option_kind::tcp::listener
_port_idx	async/dpdk/DPDK.h	/^  uint8_t _port_idx;$/;"	m	class:DPDKDevice
_prefix	async/AsyncMessenger.cc	/^static ostream& _prefix(std::ostream *_dout, AsyncMessenger *m) {$/;"	f	file:
_prefix	async/AsyncMessenger.cc	/^static ostream& _prefix(std::ostream *_dout, Processor *p) {$/;"	f	file:
_prefix	async/dpdk/TCP.cc	/^ostream& tcp<InetTraits>::tcb::_prefix(std::ostream *_dout) {$/;"	f	class:tcp::tcb
_prefix	simple/SimpleMessenger.cc	/^static ostream& _prefix(std::ostream *_dout, SimpleMessenger *msgr) {$/;"	f	file:
_prefix	xio/XioMessenger.cc	/^static ostream& _prefix(std::ostream *_dout, XioMessenger *msgr) {$/;"	f	file:
_process_connection	async/AsyncConnection.cc	/^ssize_t AsyncConnection::_process_connection()$/;"	f	class:AsyncConnection
_proto	async/dpdk/ARP.h	/^  l3_protocol _proto;$/;"	m	class:arp
_proto_map	async/dpdk/net.h	/^  std::unordered_map<uint16_t, l3_rx_stream> _proto_map;$/;"	m	class:interface
_proto_num	async/dpdk/ARP.h	/^  uint16_t _proto_num;$/;"	m	class:arp_for_protocol
_proto_num	async/dpdk/net.h	/^  eth_protocol_num _proto_num;$/;"	m	class:l3_protocol
_proxy_packetq	async/dpdk/DPDK.h	/^  circular_buffer<Packet> _proxy_packetq;$/;"	m	class:DPDKQueuePair
_q	async/dpdk/TCP.h	/^    queue<connection> _q;$/;"	m	class:tcp_state::tcp_option::option_kind::tcp::listener
_q	async/dpdk/queue.h	/^  std::queue<T, circular_buffer<T>> _q;$/;"	m	class:queue
_q_max_length	async/dpdk/TCP.h	/^    size_t _q_max_length;$/;"	m	class:tcp_state::tcp_option::option_kind::tcp::listener
_qid	async/dpdk/DPDK.h	/^  uint8_t _qid;$/;"	m	class:DPDKQueuePair
_qp	async/dpdk/DPDK.cc	/^  DPDKQueuePair *_qp;$/;"	m	class:C_handle_dev_stats	file:
_queue_space	async/dpdk/IP.h	/^  Throttle _queue_space;$/;"	m	class:icmp
_queue_space	async/dpdk/TCP.h	/^  Throttle _queue_space;$/;"	m	class:tcp_state::tcp_option::option_kind::tcp
_queues	async/dpdk/DPDK.h	/^  std::vector<std::unique_ptr<DPDKQueuePair>> _queues;$/;"	m	class:DPDKDevice
_queues_ready	async/dpdk/DPDK.h	/^  uint8_t _queues_ready = 0;$/;"	m	class:DPDKDevice
_rcv	async/dpdk/TCP.h	/^    } _rcv;$/;"	m	class:tcp_state::tcp_option::option_kind::tcp::tcb	typeref:struct:tcp_state::tcp_option::option_kind::tcp::tcb::receive
_rd	async/dpdk/TCP.h	/^  std::random_device _rd;$/;"	m	class:tcp_state::tcp_option::option_kind::tcp
_redir_table	async/dpdk/DPDK.h	/^  std::vector<uint8_t> _redir_table;$/;"	m	class:DPDKDevice
_remote_mss	async/dpdk/TCP.h	/^  uint16_t _remote_mss = 536;$/;"	m	class:tcp_state::tcp_option::option_kind::option_len
_remote_win_scale	async/dpdk/TCP.h	/^  uint8_t _remote_win_scale = 0;$/;"	m	class:tcp_state::tcp_option::option_kind::option_len
_reply_accept	async/AsyncConnection.h	/^  ssize_t _reply_accept(char tag, ceph_msg_connect &connect, ceph_msg_connect_reply &reply,$/;"	f	class:AsyncConnection
_rfds	async/EventSelect.h	/^  fd_set _rfds, _wfds;$/;"	m	class:SelectDriver
_ring	async/dpdk/DPDK.h	/^    std::vector<tx_buf*> _ring;$/;"	m	class:DPDKQueuePair::tx_buf_factory
_rss_key	async/dpdk/DPDK.h	/^  rss_key_type _rss_key;$/;"	m	class:DPDKDevice
_rss_table_bits	async/dpdk/DPDK.h	/^  size_t _rss_table_bits = 0;$/;"	m	class:DPDKDevice
_rto_clk_granularity	async/dpdk/TCP.h	/^constexpr std::chrono::microseconds tcp<InetTraits>::tcb::_rto_clk_granularity;$/;"	m	class:tcp_state::tcp_option::option_kind::tcp::tcb
_rto_max	async/dpdk/TCP.h	/^constexpr std::chrono::microseconds tcp<InetTraits>::tcb::_rto_max;$/;"	m	class:tcp_state::tcp_option::option_kind::tcp::tcb
_rto_min	async/dpdk/TCP.h	/^constexpr std::chrono::microseconds tcp<InetTraits>::tcb::_rto_min;$/;"	m	class:tcp_state::tcp_option::option_kind::tcp::tcb
_rx	async/dpdk/net.h	/^  subscription<Packet> _rx;$/;"	m	class:interface
_rx_free_bufs	async/dpdk/DPDK.h	/^  std::vector<rte_mbuf*> _rx_free_bufs;$/;"	m	class:DPDKQueuePair
_rx_free_pkts	async/dpdk/DPDK.h	/^  std::vector<rte_mbuf*> _rx_free_pkts;$/;"	m	class:DPDKQueuePair
_rx_gc_poller	async/dpdk/DPDK.h	/^  } _rx_gc_poller;$/;"	m	class:DPDKQueuePair	typeref:class:DPDKQueuePair::DPDKRXGCPoller
_rx_packets	async/dpdk/ARP.h	/^  subscription<Packet, ethernet_address> _rx_packets;$/;"	m	class:arp
_rx_packets	async/dpdk/IP.h	/^  subscription<Packet, ethernet_address> _rx_packets;$/;"	m	class:ipv4
_rx_poller	async/dpdk/DPDK.h	/^  Tub<DPDKRXPoller> _rx_poller;$/;"	m	class:DPDKQueuePair
_rx_stream	async/dpdk/DPDK.h	/^  stream<Packet> _rx_stream;$/;"	m	class:DPDKQueuePair
_sack_received	async/dpdk/TCP.h	/^  bool _sack_received = false;$/;"	m	class:tcp_state::tcp_option::option_kind::option_len
_send	async/dpdk/DPDK.h	/^  uint32_t _send(circular_buffer<Packet>& pb, Func &&packet_to_tx_buf_p) {$/;"	f	class:DPDKQueuePair
_send	simple/Pipe.h	/^    void _send(Message *m) {$/;"	f	class:Pipe
_send_keepalive	simple/Pipe.h	/^    void _send_keepalive() {$/;"	f	class:Pipe
_send_message	async/AsyncMessenger.cc	/^int AsyncMessenger::_send_message(Message *m, const entity_inst_t& dest)$/;"	f	class:AsyncMessenger
_send_message	simple/SimpleMessenger.cc	/^int SimpleMessenger::_send_message(Message *m, Connection *con)$/;"	f	class:SimpleMessenger
_send_message	simple/SimpleMessenger.cc	/^int SimpleMessenger::_send_message(Message *m, const entity_inst_t& dest)$/;"	f	class:SimpleMessenger
_send_message	xio/XioMessenger.cc	/^int XioMessenger::_send_message(Message *m, Connection *con)$/;"	f	class:XioMessenger
_send_message	xio/XioMessenger.cc	/^int XioMessenger::_send_message(Message *m, const entity_inst_t& dest)$/;"	f	class:XioMessenger
_send_message_impl	xio/XioMessenger.cc	/^int XioMessenger::_send_message_impl(Message* m, XioConnection* xcon)$/;"	f	class:XioMessenger
_shutdown	xio/XioPortal.h	/^  bool _shutdown;$/;"	m	class:XioPortal
_snd	async/dpdk/TCP.h	/^    } _snd;$/;"	m	class:tcp_state::tcp_option::option_kind::tcp::tcb	typeref:struct:tcp_state::tcp_option::option_kind::tcp::tcb::send
_ssi	async/Stack.h	/^  std::unique_ptr<ServerSocketImpl> _ssi;$/;"	m	class:ServerSocket
_start	async/dpdk/Packet.h	/^    fragment* _start;$/;"	m	struct:Packet::pseudo_vector
_state	async/dpdk/TCP.h	/^    tcp_state _state = CLOSED;$/;"	m	class:tcp_state::tcp_option::option_kind::tcp::tcb
_stop	async/AsyncConnection.cc	/^void AsyncConnection::_stop()$/;"	f	class:AsyncConnection
_stream	async/dpdk/stream.h	/^  stream<T...>* _stream;$/;"	m	class:subscription
_sub	async/dpdk/stream.h	/^  subscription<T...>* _sub = nullptr;$/;"	m	class:stream
_sw_reta	async/dpdk/DPDK.h	/^  Tub<std::array<uint8_t, 128>> _sw_reta;$/;"	m	class:DPDKQueuePair
_table	async/dpdk/ARP.h	/^  std::unordered_map<l3addr, l2addr> _table;$/;"	m	class:arp_for
_tcb	async/dpdk/TCP.h	/^    lw_shared_ptr<tcb> _tcb;$/;"	m	class:tcp_state::tcp_option::option_kind::tcp::connection
_tcbs	async/dpdk/TCP.h	/^  std::unordered_map<connid, lw_shared_ptr<tcb>, connid_hash> _tcbs;$/;"	m	class:tcp_state::tcp_option::option_kind::tcp
_tcp	async/dpdk/IP.h	/^  ipv4_tcp _tcp;$/;"	m	class:ipv4
_tcp	async/dpdk/IP.h	/^  std::unique_ptr<tcp<ipv4_traits>> _tcp;$/;"	m	class:final
_tcp	async/dpdk/TCP.h	/^    tcp& _tcp;$/;"	m	class:tcp_state::tcp_option::option_kind::tcp::listener
_tcp	async/dpdk/TCP.h	/^    tcp& _tcp;$/;"	m	class:tcp_state::tcp_option::option_kind::tcp::tcb
_timestamps_received	async/dpdk/TCP.h	/^  bool _timestamps_received = false;$/;"	m	class:tcp_state::tcp_option::option_kind::option_len
_try_send	async/AsyncConnection.cc	/^ssize_t AsyncConnection::_try_send(bool more)$/;"	f	class:AsyncConnection
_tx_buf_factory	async/dpdk/DPDK.h	/^  tx_buf_factory _tx_buf_factory;$/;"	m	class:DPDKQueuePair
_tx_burst	async/dpdk/DPDK.h	/^  std::vector<rte_mbuf*> _tx_burst;$/;"	m	class:DPDKQueuePair
_tx_burst_idx	async/dpdk/DPDK.h	/^  uint16_t _tx_burst_idx = 0;$/;"	m	class:DPDKQueuePair
_tx_gc_poller	async/dpdk/DPDK.h	/^  } _tx_gc_poller;$/;"	m	class:DPDKQueuePair	typeref:class:DPDKQueuePair::DPDKTXGCPoller
_tx_packetq	async/dpdk/DPDK.h	/^  circular_buffer<Packet> _tx_packetq;$/;"	m	class:DPDKQueuePair
_tx_poller	async/dpdk/DPDK.h	/^  } _tx_poller;$/;"	m	class:DPDKQueuePair	typeref:class:DPDKQueuePair::DPDKTXPoller
_type	msg_types.h	/^  entity_type_t _type;$/;"	m	class:entity_name_t
_use_lro	async/dpdk/DPDK.h	/^  bool _use_lro;$/;"	m	class:DPDKDevice
_value	async/dpdk/shared_ptr.h	/^  T _value;$/;"	m	struct:shared_ptr_no_esft
_waiters	async/dpdk/ARP.h	/^    std::vector<std::pair<resolution_cb, Packet>> _waiters;$/;"	m	struct:arp_for::resolution
_wfds	async/EventSelect.h	/^  fd_set _rfds, _wfds;$/;"	m	class:SelectDriver
_win_scale_received	async/dpdk/TCP.h	/^  bool _win_scale_received = false;$/;"	m	class:tcp_state::tcp_option::option_kind::option_len
abort_accept	async/Stack.h	/^  void abort_accept() {$/;"	f	class:ServerSocket
abort_accept	async/dpdk/DPDKStack.h	/^void DPDKServerSocketImpl<Protocol>::abort_accept() {$/;"	f	class:DPDKServerSocketImpl
abort_accept	async/dpdk/TCP.h	/^    void abort_accept() {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::listener
abort_accept	async/rdma/RDMAServerSocketImpl.cc	/^void RDMAServerSocketImpl::abort_accept()$/;"	f	class:RDMAServerSocketImpl
accept	async/AsyncConnection.cc	/^void AsyncConnection::accept(ConnectedSocket socket, entity_addr_t &addr)$/;"	f	class:AsyncConnection
accept	async/AsyncMessenger.cc	/^void Processor::accept()$/;"	f	class:Processor
accept	async/PosixStack.cc	/^int PosixServerSocketImpl::accept(ConnectedSocket *sock, const SocketOptions &opt, entity_addr_t *out, Worker *w) {$/;"	f	class:PosixServerSocketImpl
accept	async/Stack.h	/^  int accept(ConnectedSocket *sock, const SocketOptions &opt, entity_addr_t *out, Worker *w) {$/;"	f	class:ServerSocket
accept	async/dpdk/DPDKStack.h	/^int DPDKServerSocketImpl<Protocol>::accept(ConnectedSocket *s, const SocketOptions &options, entity_addr_t *out, Worker *w) {$/;"	f	class:DPDKServerSocketImpl
accept	async/dpdk/TCP.h	/^    Tub<connection> accept() {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::listener
accept	async/rdma/RDMAServerSocketImpl.cc	/^int RDMAServerSocketImpl::accept(ConnectedSocket *sock, const SocketOptions &opt, entity_addr_t *out, Worker *w)$/;"	f	class:RDMAServerSocketImpl
accept	simple/Pipe.cc	/^int Pipe::accept()$/;"	f	class:Pipe
accept	xio/XioPortal.h	/^  int accept(struct xio_session *session,$/;"	f	class:XioPortals
accept_conn	async/AsyncMessenger.h	/^  int accept_conn(AsyncConnectionRef conn) {$/;"	f	class:AsyncMessenger
accepter	simple/SimpleMessenger.h	/^  Accepter accepter;$/;"	m	class:SimpleMessenger
accepting_conns	async/AsyncMessenger.h	/^  set<AsyncConnectionRef> accepting_conns;$/;"	m	class:AsyncMessenger
accepting_pipes	simple/SimpleMessenger.h	/^  set<Pipe*> accepting_pipes;$/;"	m	class:SimpleMessenger
access_element_unsafe	async/dpdk/circular_buffer.h	/^inline T& circular_buffer<T, Alloc>::access_element_unsafe(size_t idx) {$/;"	f	class:circular_buffer
ack	async/dpdk/TCP.h	/^  tcp_sequence ack;$/;"	m	struct:tcp_state::tcp_option::option_kind::tcp_hdr
ack	xio/XioConnection.h	/^    bool ack;$/;"	m	struct:XioConnection::SendQ
ack_events	async/rdma/Infiniband.cc	/^void Infiniband::CompletionChannel::ack_events()$/;"	f	class:Infiniband::CompletionChannel
ack_needs_on	async/dpdk/TCP.h	/^    bool ack_needs_on() {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::tcb
ack_time	xio/XioConnection.h	/^    utime_t ack_time;$/;"	m	struct:XioConnection::SendQ
activate	async/rdma/RDMAConnectedSocketImpl.cc	/^int RDMAConnectedSocketImpl::activate()$/;"	f	class:RDMAConnectedSocketImpl
activating_mask	async/dpdk/UserspaceEvent.h	/^    int8_t activating_mask = 0;$/;"	m	struct:UserspaceEventManager::UserspaceFDImpl
active	async/rdma/RDMAStack.h	/^    bool active;$/;"	m	class:RDMAConnectedSocketImpl::C_handle_connection
active	async/rdma/RDMAStack.h	/^  bool active;\/\/ qp is active ?$/;"	m	class:RDMAConnectedSocketImpl
active_flush	simple/Pipe.cc	/^  bool active_flush;$/;"	m	class:Pipe::DelayedDelivery	file:
active_port	async/rdma/Infiniband.h	/^  Port* active_port;$/;"	m	class:Device
add	async/dpdk/ARP.cc	/^void arp::add(uint16_t proto_num, arp_for_protocol* afp)$/;"	f	class:arp
add_accept	async/AsyncMessenger.cc	/^void AsyncMessenger::add_accept(Worker *w, ConnectedSocket cli_socket, entity_addr_t &addr)$/;"	f	class:AsyncMessenger
add_accept_pipe	simple/SimpleMessenger.cc	/^Pipe *SimpleMessenger::add_accept_pipe(int sd)$/;"	f	class:SimpleMessenger
add_arrival	DispatchQueue.h	/^  void add_arrival(Message *m) {$/;"	f	class:DispatchQueue
add_dispatcher_head	Messenger.h	/^  void add_dispatcher_head(Dispatcher *d) { $/;"	f	class:Messenger
add_dispatcher_tail	Messenger.h	/^  void add_dispatcher_tail(Dispatcher *d) { $/;"	f	class:Messenger
add_event	async/EventEpoll.cc	/^int EpollDriver::add_event(int fd, int cur_mask, int add_mask)$/;"	f	class:EpollDriver
add_event	async/EventKqueue.cc	/^int KqueueDriver::add_event(int fd, int cur_mask, int add_mask)$/;"	f	class:KqueueDriver
add_event	async/EventSelect.cc	/^int SelectDriver::add_event(int fd, int cur_mask, int add_mask)$/;"	f	class:SelectDriver
add_event	async/dpdk/EventDPDK.cc	/^int DPDKDriver::add_event(int fd, int cur_mask, int add_mask)$/;"	f	class:DPDKDriver
add_thread	async/Stack.cc	/^std::function<void ()> NetworkStack::add_thread(unsigned i)$/;"	f	class:NetworkStack
addr	msg_types.h	/^  entity_addr_t addr;$/;"	m	struct:entity_inst_t
addr	xio/XioMsg.h	/^  entity_addr_t addr; \/* XXX hack! *\/$/;"	m	class:XioMsgHdr
adjust_clru	xio/XioConnection.cc	/^int XioConnection::adjust_clru(uint32_t flags)$/;"	f	class:XioConnection
align	async/dpdk/TCP.h	/^  static const uint8_t align = 4;$/;"	m	class:tcp_state::tcp_option::option_kind::option_len
align_down	async/dpdk/align.h	/^inline constexpr T align_down(T v, T align) {$/;"	f
align_down	async/dpdk/align.h	/^inline constexpr T* align_down(T* v, size_t align) {$/;"	f
align_up	async/dpdk/align.h	/^inline constexpr T align_up(T v, T align) {$/;"	f
align_up	async/dpdk/align.h	/^inline constexpr T* align_up(T* v, size_t align) {$/;"	f
all_data_ack_event	async/dpdk/TCP.h	/^    EventCallbackRef all_data_ack_event;$/;"	m	class:tcp_state::tcp_option::option_kind::tcp::tcb
alloc	xio/XioPool.h	/^  void *alloc(size_t _s)$/;"	f	class:XioPool
alloc_aligned_buffer	async/AsyncConnection.cc	/^static void alloc_aligned_buffer(bufferlist& data, unsigned len, unsigned off)$/;"	f	file:
alloc_aligned_buffer	simple/Pipe.cc	/^static void alloc_aligned_buffer(bufferlist& data, unsigned len, unsigned off)$/;"	f	file:
alloc_trailers	xio/XioMsg.h	/^  void alloc_trailers(int cnt) {$/;"	f	struct:XioMsg
allocate	async/dpdk/Packet.h	/^    static std::unique_ptr<impl> allocate(size_t nr_frags) {$/;"	f	struct:Packet::impl
allocate_headroom	async/dpdk/Packet.h	/^inline bool Packet::allocate_headroom(size_t size) {$/;"	f	class:Packet
allocate_if_needed	async/dpdk/Packet.h	/^    static std::unique_ptr<impl> allocate_if_needed(std::unique_ptr<impl> old, size_t extra_frags) {$/;"	f	struct:Packet::impl
append	async/dpdk/Packet.h	/^inline void Packet::append(Packet&& p) {$/;"	f	class:Packet
append	xio/XioInSeq.h	/^  void append(struct xio_msg* msg) {$/;"	f	class:XioInSeq
arp	async/dpdk/ARP.cc	/^arp::arp(interface* netif):$/;"	f	class:arp
arp	async/dpdk/ARP.h	/^    arp_for *arp;$/;"	m	class:arp_for::C_handle_arp_timeout
arp	async/dpdk/ARP.h	/^class arp {$/;"	c
arp	async/dpdk/const.h	/^  ipv4 = 0x0800, arp = 0x0806, ipv6 = 0x86dd$/;"	m	class:ip_protocol_num::eth_protocol_num
arp_for	async/dpdk/ARP.h	/^  explicit arp_for(CephContext *c, arp& a, EventCenter *cen)$/;"	f	class:arp_for
arp_for	async/dpdk/ARP.h	/^class arp_for : public arp_for_protocol {$/;"	c
arp_for_protocol	async/dpdk/ARP.cc	/^arp_for_protocol::arp_for_protocol(arp& a, uint16_t proto_num)$/;"	f	class:arp_for_protocol
arp_for_protocol	async/dpdk/ARP.h	/^class arp_for_protocol {$/;"	c
arp_hardware_type	async/dpdk/ethernet.h	/^  static constexpr uint16_t arp_hardware_type() { return 1; }$/;"	f	struct:ethernet
arp_hdr	async/dpdk/ARP.h	/^  struct arp_hdr {$/;"	s	class:arp
arp_hdr	async/dpdk/ARP.h	/^  struct arp_hdr {$/;"	s	class:arp_for
arp_learn	async/dpdk/DPDKStack.h	/^  void arp_learn(ethernet_address l2, ipv4_address l3) {$/;"	f	class:DPDKWorker
arp_learn	async/dpdk/net.cc	/^void interface::arp_learn(ethernet_address l2, ipv4_address l3)$/;"	f	class:interface
arp_protocol_type	async/dpdk/IP.h	/^  static proto_type arp_protocol_type() { return proto_type(eth_protocol_num::ipv4); }$/;"	f	class:ipv4
array_map	async/dpdk/array_map.h	/^  array_map(std::initializer_list<std::pair<size_t, Value>> i) {$/;"	f	class:array_map
array_map	async/dpdk/array_map.h	/^class array_map {$/;"	c
as_cookie	async/dpdk/DPDK.cc	/^void* as_cookie(struct rte_pktmbuf_pool_private& p) {$/;"	f
async_handler	async/rdma/RDMAStack.h	/^  EventCallbackRef async_handler;$/;"	m	class:RDMADispatcher
async_msgr	async/AsyncConnection.h	/^  AsyncMessenger *async_msgr;$/;"	m	class:AsyncConnection
at	async/dpdk/array_map.h	/^  Value& at(size_t key) {$/;"	f	class:array_map
authorizer	async/AsyncConnection.h	/^  AuthAuthorizer *authorizer;$/;"	m	class:AsyncConnection
authorizer	xio/XioConnection.h	/^    AuthAuthorizer *authorizer;$/;"	m	class:XioConnection::CState
authorizer_buf	async/AsyncConnection.h	/^  bufferlist authorizer_buf;$/;"	m	class:AsyncConnection
authorizer_challenge	async/AsyncConnection.h	/^  std::unique_ptr<AuthAuthorizerChallenge> authorizer_challenge; \/\/ accept side$/;"	m	class:AsyncConnection
back	async/dpdk/circular_buffer.h	/^inline T& circular_buffer<T, Alloc>::back() {$/;"	f	class:circular_buffer
backoff	async/AsyncConnection.h	/^  utime_t backoff;         \/\/ backoff time$/;"	m	class:AsyncConnection
backoff	simple/Pipe.h	/^    utime_t backoff;         \/\/ backoff time$/;"	m	class:Pipe
base	async/dpdk/Packet.h	/^    char* base;$/;"	m	struct:fragment
base	async/rdma/Infiniband.h	/^      char *base = nullptr;$/;"	m	class:Infiniband::MemoryManager::Cluster
begin	async/dpdk/Packet.h	/^    fragment* begin() { return _start; }$/;"	f	struct:Packet::pseudo_vector
begin	async/dpdk/circular_buffer.h	/^    size_t begin = 0;$/;"	m	struct:circular_buffer::impl
begin	async/dpdk/circular_buffer.h	/^  const_iterator begin() const {$/;"	f	class:circular_buffer
begin	async/dpdk/circular_buffer.h	/^  iterator begin() {$/;"	f	class:circular_buffer
begin	xio/XioInSeq.h	/^  struct xio_msg* begin() { return head; }$/;"	f	class:XioInSeq
bind	async/AsyncMessenger.cc	/^int AsyncMessenger::bind(const entity_addr_t &bind_addr)$/;"	f	class:AsyncMessenger
bind	async/AsyncMessenger.cc	/^int Processor::bind(const entity_addr_t &bind_addr,$/;"	f	class:Processor
bind	simple/Accepter.cc	/^int Accepter::bind(const entity_addr_t &bind_addr, const set<int>& avoid_ports)$/;"	f	class:Accepter
bind	simple/SimpleMessenger.cc	/^int SimpleMessenger::bind(const entity_addr_t &bind_addr)$/;"	f	class:SimpleMessenger
bind	xio/XioMessenger.cc	/^int XioMessenger::bind(const entity_addr_t& addr)$/;"	f	class:XioMessenger
bind	xio/XioPortal.cc	/^int XioPortal::bind(struct xio_session_ops *ops, const string &base_uri,$/;"	f	class:XioPortal
bind	xio/XioPortal.cc	/^int XioPortals::bind(struct xio_session_ops *ops, const string& base_uri,$/;"	f	class:XioPortals
bind_cq	async/rdma/Infiniband.h	/^    void bind_cq(ibv_cq *c) { cq = c; }$/;"	f	class:Infiniband::CompletionChannel
binding_port	async/rdma/Infiniband.cc	/^void Device::binding_port(CephContext *cct, int port_num) {$/;"	f	class:Device
bitcount	async/dpdk/dpdk_rte.cc	/^  static int bitcount(unsigned n)$/;"	f	namespace:dpdk
bl	xio/XioMsg.h	/^  buffer::list bl;$/;"	m	class:XioCommand
bl	xio/XioMsg.h	/^  buffer::list bl;$/;"	m	class:XioMsgCnt
bl	xio/XioMsg.h	/^  buffer::list bl;$/;"	m	class:XioMsgHdr
bl_type	xio/XioMessenger.cc	/^enum bl_type$/;"	g	file:
blocked	Messenger.h	/^    bool blocked;$/;"	m	struct:Messenger::sigpipe_stopper
bound	async/rdma/Infiniband.h	/^      uint32_t bound;$/;"	m	class:Infiniband::MemoryManager::Chunk
broadcast_address	async/dpdk/IP.h	/^  static address_type broadcast_address() { return ipv4_address(0xffffffff); }$/;"	f	class:ipv4
broadcast_address	async/dpdk/ethernet.h	/^  static address broadcast_address() {$/;"	f	struct:ethernet
buffer	async/rdma/Infiniband.h	/^      char* buffer;$/;"	m	class:Infiniband::MemoryManager::Chunk
buffer_size	async/rdma/Infiniband.h	/^      uint32_t buffer_size;$/;"	m	class:Infiniband::MemoryManager::Cluster
buffered_recv	simple/Pipe.cc	/^ssize_t Pipe::buffered_recv(char *buf, size_t len, int flags)$/;"	f	class:Pipe
buffers	async/rdma/RDMAStack.h	/^  std::vector<Chunk*> buffers;$/;"	m	class:RDMAConnectedSocketImpl
build_sw_reta	async/dpdk/DPDK.cc	/^void DPDKQueuePair::build_sw_reta(const std::map<unsigned, float>& cpu_weights) {$/;"	f	class:DPDKQueuePair
byte_throttler	Message.h	/^  Throttle *byte_throttler = nullptr;$/;"	m	class:Message
bytes	async/rdma/Infiniband.h	/^      uint32_t bytes;$/;"	m	class:Infiniband::MemoryManager::Chunk
calc_data_crc	Message.h	/^  void calc_data_crc() {$/;"	f	class:Message
calc_front_crc	Message.h	/^  void calc_front_crc() {$/;"	f	class:Message
calc_header_crc	Message.h	/^  void calc_header_crc() {$/;"	f	class:Message
can_fast_dispatch	DispatchQueue.cc	/^bool DispatchQueue::can_fast_dispatch(const Message *m) const$/;"	f	class:DispatchQueue
can_send	async/dpdk/TCP.h	/^    uint32_t can_send() {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::tcb
can_write	async/AsyncConnection.h	/^  std::atomic<WriteStatus> can_write;$/;"	m	class:AsyncConnection
capacity	async/dpdk/circular_buffer.h	/^    size_t capacity = 0;$/;"	m	struct:circular_buffer::impl
capacity	async/dpdk/circular_buffer.h	/^inline size_t circular_buffer<T, Alloc>::capacity() const {$/;"	f	class:circular_buffer
capture	async/dpdk/capture.h	/^capture_impl<T,F> capture( T && x, F && f ) {$/;"	f
capture_impl	async/dpdk/capture.h	/^  capture_impl( T && x, F && f )$/;"	f	class:capture_impl
capture_impl	async/dpdk/capture.h	/^class capture_impl {$/;"	c
cb	async/dpdk/Packet.cc	/^  std::function<void()> cb;$/;"	m	class:C_free_on_cpu	file:
cb	async/dpdk/circular_buffer.h	/^    CB* cb;$/;"	m	struct:circular_buffer::cbiterator
cbegin	async/dpdk/circular_buffer.h	/^  const_iterator cbegin() const {$/;"	f	class:circular_buffer
cbiterator	async/dpdk/circular_buffer.h	/^    cbiterator<CB, ValueType>(CB* b, size_t i) : cb(b), idx(i) {}$/;"	f	struct:circular_buffer::cbiterator
cbiterator	async/dpdk/circular_buffer.h	/^  struct cbiterator : std::iterator<std::random_access_iterator_tag, ValueType> {$/;"	s	class:circular_buffer
cct	DispatchQueue.h	/^  CephContext *cct;$/;"	m	class:DispatchQueue
cct	Dispatcher.h	/^  CephContext *cct;$/;"	m	class:Dispatcher
cct	Messenger.h	/^  CephContext *cct;$/;"	m	class:Messenger
cct	async/AsyncMessenger.cc	/^  CephContext *cct;$/;"	m	struct:StackSingleton	file:
cct	async/Event.cc	/^  CephContext *cct;$/;"	m	class:C_handle_notify	file:
cct	async/Event.h	/^  CephContext *cct;$/;"	m	class:EventCenter
cct	async/EventEpoll.h	/^  CephContext *cct;$/;"	m	class:EpollDriver
cct	async/EventKqueue.h	/^  CephContext *cct;$/;"	m	class:KqueueDriver
cct	async/EventSelect.h	/^  CephContext *cct;$/;"	m	class:SelectDriver
cct	async/Stack.h	/^  CephContext *cct;$/;"	m	class:NetworkStack
cct	async/Stack.h	/^  CephContext *cct;$/;"	m	class:Worker
cct	async/dpdk/ARP.h	/^  CephContext *cct;$/;"	m	class:arp_for
cct	async/dpdk/DPDK.h	/^    CephContext *cct;$/;"	m	class:DPDKQueuePair::tx_buf_factory
cct	async/dpdk/DPDK.h	/^  CephContext *cct;$/;"	m	class:DPDKDevice
cct	async/dpdk/DPDK.h	/^  CephContext *cct;$/;"	m	class:DPDKQueuePair
cct	async/dpdk/EventDPDK.h	/^  CephContext *cct;$/;"	m	class:DPDKDriver
cct	async/dpdk/IP.h	/^  CephContext *cct;$/;"	m	class:final
cct	async/dpdk/IP.h	/^  CephContext *cct;$/;"	m	class:icmp
cct	async/dpdk/IP.h	/^  CephContext *cct;$/;"	m	class:ipv4
cct	async/dpdk/TCP.h	/^  CephContext *cct;$/;"	m	class:tcp_state::tcp_option::option_kind::tcp
cct	async/dpdk/UserspaceEvent.h	/^  CephContext *cct;$/;"	m	class:UserspaceEventManager
cct	async/dpdk/net.h	/^  CephContext *cct;$/;"	m	class:interface
cct	async/net_handler.h	/^    CephContext *cct;$/;"	m	class:ceph::NetHandler
cct	async/rdma/Infiniband.h	/^    CephContext  *cct;$/;"	m	class:Infiniband::QueuePair
cct	async/rdma/Infiniband.h	/^    CephContext *cct;$/;"	m	class:Infiniband::CompletionChannel
cct	async/rdma/Infiniband.h	/^    CephContext *cct;$/;"	m	class:Infiniband::CompletionQueue
cct	async/rdma/Infiniband.h	/^  CephContext *cct;$/;"	m	class:Infiniband
cct	async/rdma/RDMAStack.h	/^  CephContext *cct;$/;"	m	class:RDMAConnectedSocketImpl
cct	async/rdma/RDMAStack.h	/^  CephContext *cct;$/;"	m	class:RDMADispatcher
cct	async/rdma/RDMAStack.h	/^  CephContext *cct;$/;"	m	class:RDMAServerSocketImpl
cend	async/dpdk/circular_buffer.h	/^  const_iterator cend() const {$/;"	f	class:circular_buffer
center	async/AsyncConnection.h	/^    EventCenter *center;$/;"	m	class:AsyncConnection::DelayedDelivery
center	async/AsyncConnection.h	/^  EventCenter *center;$/;"	m	class:AsyncConnection
center	async/Event.cc	/^  EventCenter *center;$/;"	m	class:C_handle_notify	file:
center	async/Stack.h	/^  EventCenter center;$/;"	m	class:Worker
center	async/dpdk/ARP.h	/^  EventCenter *center;$/;"	m	class:arp_for
center	async/dpdk/DPDK.h	/^  EventCenter *center;$/;"	m	class:DPDKQueuePair
center	async/dpdk/IP.h	/^  EventCenter *center;$/;"	m	class:ipv4
center	async/dpdk/TCP.h	/^    EventCenter *center;$/;"	m	class:tcp_state::tcp_option::option_kind::tcp::tcb
center	async/dpdk/TCP.h	/^  EventCenter *center;$/;"	m	class:tcp_state::tcp_option::option_kind::tcp
centers	async/Event.h	/^    EventCenter *centers[MAX_EVENTCENTER];$/;"	m	struct:EventCenter::AssociatedCenters
ceph	async/net_handler.cc	/^namespace ceph{$/;"	n	file:
ceph	async/net_handler.h	/^namespace ceph {$/;"	n
ceph	msg_types.h	/^namespace ceph {$/;"	n
ceph_sockaddr_storage	msg_types.h	/^struct ceph_sockaddr_storage {$/;"	s
channel	async/rdma/Infiniband.h	/^    Cluster* channel;\/\/RECV$/;"	m	class:Infiniband::MemoryManager
channel	async/rdma/Infiniband.h	/^    CompletionChannel *channel;$/;"	m	class:Infiniband::CompletionQueue
channel	async/rdma/Infiniband.h	/^    ibv_comp_channel *channel;$/;"	m	class:Infiniband::CompletionChannel
check	async/dpdk/UserspaceEvent.h	/^  bool check() {$/;"	f	class:UserspaceEventManager
check_frag0	async/dpdk/DPDK.h	/^    static bool check_frag0(Packet& p)$/;"	f	class:DPDKQueuePair::tx_buf
check_port_link_status	async/dpdk/DPDK.cc	/^int DPDKDevice::check_port_link_status()$/;"	f	class:DPDKDevice
checksum	async/dpdk/TCP.h	/^  uint16_t checksum;$/;"	m	struct:tcp_state::tcp_option::option_kind::tcp_hdr
checksummer	async/dpdk/IPChecksum.h	/^struct checksummer {$/;"	s
chunk_base	async/rdma/Infiniband.h	/^      Chunk* chunk_base = nullptr;$/;"	m	class:Infiniband::MemoryManager::Cluster
circular_buffer	async/dpdk/circular_buffer.h	/^class circular_buffer {$/;"	c
circular_buffer	async/dpdk/circular_buffer.h	/^inline circular_buffer<T, Alloc>::circular_buffer(circular_buffer&& x)$/;"	f	class:circular_buffer
cl_flag	xio/XioMsg.h	/^  bool cl_flag;$/;"	m	class:XioDispatchHook
claim	xio/XioMsg.h	/^  virtual void claim(int r) {}$/;"	f	class:XioMarkDownHook
claim_data	Message.h	/^  void claim_data(bufferlist& bl,$/;"	f	class:Message
cleanup	async/AsyncConnection.h	/^  void cleanup() {$/;"	f	class:AsyncConnection
cleanup	async/dpdk/TCP.h	/^void tcp<InetTraits>::tcb::cleanup() {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::tcb
cleanup	async/rdma/RDMAConnectedSocketImpl.cc	/^void RDMAConnectedSocketImpl::cleanup() {$/;"	f	class:RDMAConnectedSocketImpl
clear	async/dpdk/queue.h	/^  void clear() {$/;"	f	class:queue
clear	async/rdma/Infiniband.cc	/^void Infiniband::MemoryManager::Chunk::clear()$/;"	f	class:Infiniband::MemoryManager::Chunk
clear	xio/XioInSeq.h	/^  void clear() {$/;"	f	class:XioInSeq
clear_buffers	Message.h	/^  virtual void clear_buffers() {}$/;"	f	class:Message
clear_data	Message.h	/^  void clear_data() {$/;"	f	class:Message
clear_delayed_ack	async/dpdk/TCP.h	/^void tcp<InetTraits>::tcb::clear_delayed_ack() {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::tcb
clear_payload	Message.h	/^  void clear_payload() {$/;"	f	class:Message
clear_pipe	simple/PipeConnection.cc	/^bool PipeConnection::clear_pipe(Pipe *old_p)$/;"	f	class:PipeConnection
client_bind	async/AsyncMessenger.cc	/^int AsyncMessenger::client_bind(const entity_addr_t &bind_addr)$/;"	f	class:AsyncMessenger
client_bind	simple/SimpleMessenger.cc	/^int SimpleMessenger::client_bind(const entity_addr_t &bind_addr)$/;"	f	class:SimpleMessenger
close	async/Stack.h	/^  void close() {$/;"	f	class:ConnectedSocket
close	async/dpdk/TCP.h	/^void tcp<InetTraits>::tcb::close() {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::tcb
close	async/dpdk/UserspaceEvent.cc	/^void UserspaceEventManager::close(int fd)$/;"	f	class:UserspaceEventManager
close	async/dpdk/stream.h	/^  void close() {$/;"	f	class:stream
close	async/rdma/RDMAConnectedSocketImpl.cc	/^void RDMAConnectedSocketImpl::close()$/;"	f	class:RDMAConnectedSocketImpl
close	async/rdma/RDMAStack.h	/^    void close() {$/;"	f	class:RDMAConnectedSocketImpl::C_handle_connection
close_final_cleanup	async/dpdk/TCP.cc	/^void tcp<InetTraits>::tcb::close_final_cleanup()$/;"	f	class:tcp::tcb
close_read	async/dpdk/TCP.h	/^void tcp<InetTraits>::connection::close_read() {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::connection
close_write	async/dpdk/TCP.h	/^void tcp<InetTraits>::connection::close_write() {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::connection
closed	async/dpdk/TCP.h	/^      bool closed = false;$/;"	m	struct:tcp_state::tcp_option::option_kind::tcp::tcb::send
cluster_protocol	async/AsyncMessenger.h	/^  int cluster_protocol;$/;"	m	class:AsyncMessenger
cluster_protocol	simple/SimpleMessenger.h	/^  int cluster_protocol;$/;"	m	class:SimpleMessenger
cnt	xio/XioInSeq.h	/^  int cnt;$/;"	m	class:XioInSeq
code	async/dpdk/IP.h	/^  uint8_t code;$/;"	m	struct:icmp_hdr
complete	xio/XioMsg.h	/^  virtual void complete(int r) {$/;"	f	class:XioDispatchHook
complete	xio/XioMsg.h	/^  virtual void complete(int r) {$/;"	f	class:XioMarkDownHook
completion_hook	Message.h	/^  CompletionHook* completion_hook = nullptr; \/\/ owned by Messenger$/;"	m	class:Message
con	DispatchQueue.h	/^    ConnectionRef con;$/;"	m	class:DispatchQueue::QueueItem
con_handler	async/rdma/RDMAStack.h	/^  EventCallbackRef con_handler;$/;"	m	class:RDMAConnectedSocketImpl
cond	DispatchQueue.h	/^  Cond cond;$/;"	m	class:DispatchQueue
cond	QueueStrategy.h	/^    Cond cond;$/;"	m	class:QueueStrategy::QSThread
cond	async/Event.h	/^    std::condition_variable cond;$/;"	m	class:EventCenter::C_submit_event
cond	async/dpdk/dpdk_rte.cc	/^  std::condition_variable eal::cond;$/;"	m	class:dpdk::eal	file:
cond	async/dpdk/dpdk_rte.h	/^  static std::condition_variable cond;$/;"	m	class:dpdk::eal
cond	simple/Pipe.h	/^    Cond cond;$/;"	m	class:Pipe
configure_proxies	async/dpdk/DPDK.cc	/^void DPDKQueuePair::configure_proxies(const std::map<unsigned, float>& cpu_weights) {$/;"	f	class:DPDKQueuePair
conn	async/AsyncConnection.cc	/^  AsyncConnectionRef conn;$/;"	m	class:C_clean_handler	file:
conn	async/AsyncConnection.cc	/^  AsyncConnectionRef conn;$/;"	m	class:C_handle_read	file:
conn	async/AsyncConnection.cc	/^  AsyncConnectionRef conn;$/;"	m	class:C_handle_write	file:
conn	async/AsyncConnection.cc	/^  AsyncConnectionRef conn;$/;"	m	class:C_tick_wakeup	file:
conn	async/AsyncConnection.cc	/^  AsyncConnectionRef conn;$/;"	m	class:C_time_wakeup	file:
conn	xio/XioConnection.h	/^  struct xio_connection	*conn;$/;"	m	class:XioConnection	typeref:struct:XioConnection::xio_connection
conn_id	async/AsyncConnection.h	/^    uint64_t conn_id;$/;"	m	class:AsyncConnection::DelayedDelivery
conn_id	async/AsyncConnection.h	/^  uint64_t conn_id;$/;"	m	class:AsyncConnection
conn_id	simple/Pipe.h	/^    uint64_t conn_id;$/;"	m	class:Pipe
conn_prefix	xio/XioConnection.cc	/^ostream& XioConnection::conn_prefix(std::ostream *_dout) {$/;"	f	class:XioConnection
connect	async/AsyncConnection.h	/^  void connect(const entity_addr_t& addr, int type) {$/;"	f	class:AsyncConnection
connect	async/PosixStack.cc	/^int PosixWorker::connect(const entity_addr_t &addr, const SocketOptions &opts, ConnectedSocket *socket) {$/;"	f	class:PosixWorker
connect	async/dpdk/DPDKStack.cc	/^int DPDKWorker::connect(const entity_addr_t &addr, const SocketOptions &opts, ConnectedSocket *socket)$/;"	f	class:DPDKWorker
connect	async/dpdk/TCP.cc	/^void tcp<InetTraits>::tcb::connect()$/;"	f	class:tcp::tcb
connect	async/dpdk/TCP.h	/^typename tcp<InetTraits>::connection tcp<InetTraits>::connect(const entity_addr_t &addr) {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp
connect	async/net_handler.cc	/^int NetHandler::connect(const entity_addr_t &addr, const entity_addr_t& bind_addr)$/;"	f	class:ceph::NetHandler
connect	async/rdma/RDMAStack.cc	/^int RDMAWorker::connect(const entity_addr_t &addr, const SocketOptions &opts, ConnectedSocket *socket)$/;"	f	class:RDMAWorker
connect	simple/Pipe.cc	/^int Pipe::connect()$/;"	f	class:Pipe
connect_bind_addr	async/Stack.h	/^  entity_addr_t connect_bind_addr;$/;"	m	struct:SocketOptions
connect_msg	async/AsyncConnection.h	/^  ceph_msg_connect connect_msg;$/;"	m	class:AsyncConnection
connect_rank	simple/SimpleMessenger.cc	/^Pipe *SimpleMessenger::connect_rank(const entity_addr_t& addr,$/;"	f	class:SimpleMessenger
connect_reply	async/AsyncConnection.h	/^  ceph_msg_connect_reply connect_reply;$/;"	m	class:AsyncConnection
connect_seq	async/AsyncConnection.h	/^  __u32 connect_seq, peer_global_seq;$/;"	m	class:AsyncConnection
connect_seq	simple/Pipe.h	/^    __u32 connect_seq, peer_global_seq;$/;"	m	class:Pipe
connect_seq	xio/XioConnection.h	/^    uint32_t connect_seq, global_seq, peer_global_seq;$/;"	m	class:XioConnection::CState
connect_seq	xio/XioConnection.h	/^    uint32_t connect_seq, peer_global_seq;$/;"	m	struct:XioConnection::lifecycle
connected	async/PosixStack.cc	/^  bool connected;$/;"	m	class:final	file:
connected	async/rdma/RDMAStack.h	/^  int connected;$/;"	m	class:RDMAConnectedSocketImpl
connected	xio/XioConnection.h	/^  std::atomic<bool> connected = { false };$/;"	m	class:XioConnection
connection	Message.h	/^  ConnectionRef connection;          \/\/ 网络连接类$/;"	m	class:Message
connection	async/dpdk/TCP.h	/^    explicit connection(lw_shared_ptr<tcb> tcbp) : _tcb(std::move(tcbp)) { _tcb->_conn = this; }$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::connection
connection	async/dpdk/TCP.h	/^  class connection {$/;"	c	class:tcp_state::tcp_option::option_kind::tcp
connection_state	simple/Pipe.h	/^    PipeConnectionRef connection_state;$/;"	m	class:Pipe
connid_hash	async/dpdk/IP.h	/^struct l4connid<InetTraits>::connid_hash : private std::hash<ipaddr>, private std::hash<uint16_t> {$/;"	s	class:ip_hdr::l4connid
conns	async/AsyncMessenger.h	/^  ceph::unordered_map<entity_addr_t, AsyncConnectionRef> conns;$/;"	m	class:AsyncMessenger
conns_entity_map	xio/XioMessenger.h	/^  XioConnection::EntitySet conns_entity_map;$/;"	m	class:XioMessenger
conns_entity_map_hook	xio/XioConnection.h	/^  bi::avl_set_member_hook<> conns_entity_map_hook;$/;"	m	class:XioConnection
conns_hook	xio/XioConnection.h	/^  bi::list_member_hook<> conns_hook;$/;"	m	class:XioConnection
conns_list	xio/XioMessenger.h	/^  XioConnection::ConnList conns_list;$/;"	m	class:XioMessenger
conns_sp	xio/XioMessenger.h	/^  Spinlock conns_sp;$/;"	m	class:XioMessenger
const_iterator	async/dpdk/circular_buffer.h	/^  typedef cbiterator<const circular_buffer, const T> const_iterator;$/;"	t	class:circular_buffer
context	xio/XioMessenger.cc	/^static CephContext *context;$/;"	m	namespace:xio_log	file:
copy	async/dpdk/Packet.h	/^    static std::unique_ptr<impl> copy(impl* old) {$/;"	f	struct:Packet::impl
copy	async/dpdk/Packet.h	/^    static std::unique_ptr<impl> copy(impl* old, size_t nr) {$/;"	f	struct:Packet::impl
copy_internal_fragment_to	async/dpdk/Packet.h	/^    void copy_internal_fragment_to(impl* to) {$/;"	f	struct:Packet::impl
copy_one_data_buf	async/dpdk/DPDK.cc	/^size_t DPDKQueuePair::tx_buf::copy_one_data_buf($/;"	f	class:DPDKQueuePair::tx_buf
copy_one_frag	async/dpdk/DPDK.h	/^    static bool copy_one_frag(DPDKQueuePair& qp, fragment& frag,$/;"	f	class:DPDKQueuePair::tx_buf
copy_packet_to_cluster	async/dpdk/DPDK.cc	/^void DPDKQueuePair::tx_buf::copy_packet_to_cluster(const Packet& p, rte_mbuf* head)$/;"	f	class:DPDKQueuePair::tx_buf
coreids	async/PosixStack.h	/^  vector<int> coreids;$/;"	m	class:PosixNetworkStack
cores	async/dpdk/DPDK.h	/^  unsigned cores;$/;"	m	class:DPDKDevice
count	xio/XioInSeq.h	/^  int count() { return cnt; }$/;"	f	class:XioInSeq
cq	async/rdma/Infiniband.h	/^    ibv_cq *cq;$/;"	m	class:Infiniband::CompletionChannel
cq	async/rdma/Infiniband.h	/^    ibv_cq *cq;$/;"	m	class:Infiniband::CompletionQueue
cq_events_that_need_ack	async/rdma/Infiniband.h	/^    uint32_t cq_events_that_need_ack;$/;"	m	class:Infiniband::CompletionChannel
crcflags	Messenger.h	/^  int crcflags;$/;"	m	class:Messenger
create	Messenger.cc	/^Messenger *Messenger::create(CephContext *cct, const string &type,$/;"	f	class:Messenger
create	async/Stack.cc	/^std::shared_ptr<NetworkStack> NetworkStack::create(CephContext *c, const string &t)$/;"	f	class:NetworkStack
create_client_messenger	Messenger.cc	/^Messenger *Messenger::create_client_messenger(CephContext *cct, string lname)$/;"	f	class:Messenger
create_comp_channel	async/rdma/Infiniband.cc	/^Infiniband::CompletionChannel* Infiniband::create_comp_channel(CephContext *c)$/;"	f	class:Infiniband
create_comp_queue	async/rdma/Infiniband.cc	/^Infiniband::CompletionQueue* Infiniband::create_comp_queue($/;"	f	class:Infiniband
create_connect	async/AsyncMessenger.cc	/^AsyncConnectionRef AsyncMessenger::create_connect(const entity_addr_t& addr, int type)$/;"	f	class:AsyncMessenger
create_dpdk_net_device	async/dpdk/DPDK.cc	/^std::unique_ptr<DPDKDevice> create_dpdk_net_device($/;"	f
create_file_event	async/Event.cc	/^int EventCenter::create_file_event(int fd, int mask, EventCallbackRef ctxt)$/;"	f	class:EventCenter
create_queue_pair	async/rdma/Infiniband.cc	/^Infiniband::QueuePair* Infiniband::create_queue_pair(CephContext *cct, CompletionQueue *tx, CompletionQueue* rx, ibv_qp_type type)$/;"	f	class:Infiniband
create_selfpipe	simple/Accepter.cc	/^int Accepter::create_selfpipe(int *pipe_rd, int *pipe_wr) {$/;"	f	class:Accepter
create_shared_receive_queue	async/rdma/Infiniband.cc	/^ibv_srq* Infiniband::create_shared_receive_queue(uint32_t max_wr, uint32_t max_sge)$/;"	f	class:Infiniband
create_socket	async/net_handler.cc	/^int NetHandler::create_socket(int domain, bool reuse_addr)$/;"	f	class:ceph::NetHandler
create_time_event	async/Event.cc	/^uint64_t EventCenter::create_time_event(uint64_t microseconds, EventCallbackRef ctxt)$/;"	f	class:EventCenter
create_worker	async/Stack.cc	/^Worker* NetworkStack::create_worker(CephContext *c, const string &type, unsigned i)$/;"	f	class:NetworkStack
cs	async/AsyncConnection.h	/^  ConnectedSocket cs;$/;"	m	class:AsyncConnection
cs	async/Stack.h	/^  ConnectedSocket& operator=(ConnectedSocket&& cs) = default;$/;"	m	class:ConnectedSocket
cs	async/Stack.h	/^  ConnectedSocket(ConnectedSocket&& cs) = default;$/;"	m	class:ConnectedSocket
cs	async/Stack.h	/^  ServerSocket& operator=(ServerSocket&& cs) = default;$/;"	m	class:ServerSocket
csi	async/rdma/RDMAStack.h	/^    RDMAConnectedSocketImpl *csi;$/;"	m	class:RDMAConnectedSocketImpl::C_handle_connection
cstate	xio/XioConnection.h	/^  } cstate; \/* CState *\/$/;"	m	class:XioConnection	typeref:class:XioConnection::CState
csum	async/dpdk/IP.h	/^  uint16_t csum;$/;"	m	class:ip_hdr::frag_bits
csum	async/dpdk/IP.h	/^  uint16_t csum;$/;"	m	struct:icmp_hdr
csum	async/dpdk/IPChecksum.h	/^  __int128 csum = 0;$/;"	m	struct:checksummer
ctr_set	xio/XioPool.h	/^  std::atomic<unsigned> ctr_set[NUM_SLABS] = {};$/;"	m	class:XioPoolStats
ctx	xio/XioPortal.h	/^  struct xio_context *ctx;$/;"	m	class:XioPortal	typeref:struct:XioPortal::xio_context
ctxt	async/rdma/Infiniband.h	/^    ibv_context* ctxt;           \/\/ device context of the HCA to use$/;"	m	class:Infiniband::QueuePair
ctxt	async/rdma/Infiniband.h	/^  struct ibv_context *ctxt;$/;"	m	class:Device	typeref:struct:Device::ibv_context
ctxt	async/rdma/Infiniband.h	/^  struct ibv_context* ctxt;$/;"	m	class:Port	typeref:struct:Port::ibv_context
cur_msg_size	async/AsyncConnection.h	/^  uint64_t cur_msg_size;$/;"	m	class:AsyncConnection
current_header	async/AsyncConnection.h	/^  ceph_msg_header current_header;$/;"	m	class:AsyncConnection
cwnd	async/dpdk/TCP.h	/^      uint32_t cwnd;$/;"	m	struct:tcp_state::tcp_option::option_kind::tcp::tcb::send
data	Message.h	/^  bufferlist       data;             \/\/ data payload (page-alignment will be preserved where possible)$/;"	m	class:Message
data	async/AsyncConnection.h	/^  bufferlist front, middle, data;$/;"	m	class:AsyncConnection
data	async/dpdk/IP.h	/^    ipv4_packet_merger data;$/;"	m	struct:ipv4::frag
data	async/dpdk/Packet.h	/^    char data[internal_data_size]; \/\/ only frags[0] may use$/;"	m	struct:Packet::impl
data	async/dpdk/TCP.h	/^      std::deque<Packet> data;$/;"	m	struct:tcp_state::tcp_option::option_kind::tcp::tcb::receive
data	async/dpdk/TCP.h	/^      std::deque<unacked_segment> data;$/;"	m	struct:tcp_state::tcp_option::option_kind::tcp::tcb::send
data	async/dpdk/net.h	/^  uint8_t data[64];$/;"	m	class:forward_hash
data_blp	async/AsyncConnection.h	/^  bufferlist::iterator data_blp;$/;"	m	class:AsyncConnection
data_buf	async/AsyncConnection.h	/^  bufferlist data_buf;$/;"	m	class:AsyncConnection
data_len	async/dpdk/TCP.h	/^      uint16_t data_len;$/;"	m	struct:tcp_state::tcp_option::option_kind::tcp::tcb::unacked_segment
data_offset	async/dpdk/TCP.h	/^  uint8_t data_offset : 4;$/;"	m	struct:tcp_state::tcp_option::option_kind::tcp_hdr
data_segment_acked	async/dpdk/TCP.h	/^uint32_t tcp<InetTraits>::tcb::data_segment_acked(tcp_sequence seg_ack) {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::tcb
dead	async/rdma/Infiniband.h	/^    bool dead;$/;"	m	class:Infiniband::QueuePair
dead_queue_pairs	async/rdma/RDMAStack.h	/^  std::vector<QueuePair*> dead_queue_pairs;$/;"	m	class:RDMADispatcher
dec	xio/XioPool.h	/^  void dec(uint64_t size) {$/;"	f	class:XioPoolStats
dec_hookcnt	xio/XioPool.h	/^  void dec_hookcnt() {$/;"	f	class:XioPoolStats
dec_msgcnt	xio/XioPool.h	/^  void dec_msgcnt() {$/;"	f	class:XioPoolStats
dec_overflow	xio/XioPool.h	/^  void dec_overflow() { ctr_set[SLAB_OVERFLOW]--; }$/;"	f	class:XioPoolStats
decode	msg_types.cc	/^void entity_addrvec_t::decode(bufferlist::iterator& bl)$/;"	f	class:entity_addrvec_t
decode	msg_types.h	/^  void decode(bufferlist::iterator& bl) {$/;"	f	struct:ceph_sockaddr_storage
decode	msg_types.h	/^  void decode(bufferlist::iterator& bl) {$/;"	f	struct:entity_addr_t
decode	msg_types.h	/^  void decode(bufferlist::iterator& bl) {$/;"	f	struct:entity_inst_t
decode	msg_types.h	/^static inline void decode(sockaddr_storage& a, bufferlist::iterator& bl) {$/;"	f
decode	xio/XioMsg.h	/^  inline void decode(buffer::list::iterator& bl) {$/;"	f	class:XioMsgHdr
decode_ftr	xio/XioMsg.h	/^  inline void decode_ftr(buffer::list::iterator& bl) {$/;"	f	class:XioMsgHdr
decode_hdr	xio/XioMsg.h	/^  inline void decode_hdr(buffer::list::iterator& bl) {$/;"	f	class:XioMsgHdr
decode_legacy_addr_after_marker	msg_types.h	/^  void decode_legacy_addr_after_marker(bufferlist::iterator& bl)$/;"	f	struct:entity_addr_t
decode_message	Message.cc	/^Message *decode_message(CephContext *cct, int crcflags, bufferlist::iterator& p)$/;"	f
decode_message	Message.cc	/^Message *decode_message(CephContext *cct, int crcflags,$/;"	f
decode_trace	Message.cc	/^void Message::decode_trace(bufferlist::iterator &p, bool create)$/;"	f	class:Message
def_rx_conf	async/dpdk/DPDK.h	/^  const rte_eth_rxconf* def_rx_conf() const {$/;"	f	class:DPDKDevice
def_tx_conf	async/dpdk/DPDK.h	/^  const rte_eth_txconf* def_tx_conf() const {$/;"	f	class:DPDKDevice
default_nr_frags	async/dpdk/Packet.cc	/^constexpr size_t Packet::default_nr_frags;$/;"	m	class:Packet	file:
default_nr_frags	async/dpdk/Packet.h	/^  static constexpr size_t default_nr_frags = 4;$/;"	m	class:Packet
default_policy	SimplePolicyMessenger.h	/^  Policy default_policy;$/;"	m	class:SimplePolicyMessenger
default_ring_size	async/dpdk/DPDK.cc	/^static constexpr uint16_t default_ring_size      = 512;$/;"	v	file:
default_rsskey_40bytes	async/dpdk/toeplitz.h	/^static const rss_key_type default_rsskey_40bytes = {$/;"	v
default_rsskey_52bytes	async/dpdk/toeplitz.h	/^static const rss_key_type default_rsskey_52bytes = {$/;"	v
default_send_priority	Messenger.h	/^  int default_send_priority;$/;"	m	class:Messenger
del	async/dpdk/ARP.cc	/^void arp::del(uint16_t proto_num)$/;"	f	class:arp
del	async/dpdk/Packet.cc	/^  deleter del;$/;"	m	class:C_free_on_cpu	file:
del_event	async/EventEpoll.cc	/^int EpollDriver::del_event(int fd, int cur_mask, int delmask)$/;"	f	class:EpollDriver
del_event	async/EventKqueue.cc	/^int KqueueDriver::del_event(int fd, int cur_mask, int del_mask)$/;"	f	class:KqueueDriver
del_event	async/EventSelect.cc	/^int SelectDriver::del_event(int fd, int cur_mask, int delmask)$/;"	f	class:SelectDriver
del_event	async/dpdk/EventDPDK.cc	/^int DPDKDriver::del_event(int fd, int cur_mask, int delmask)$/;"	f	class:DPDKDriver
delay_cond	simple/Pipe.cc	/^  Cond delay_cond;$/;"	m	class:Pipe::DelayedDelivery	file:
delay_dispatching	simple/Pipe.cc	/^  bool delay_dispatching; \/\/ we are in fast dispatch now$/;"	m	class:Pipe::DelayedDelivery	file:
delay_lock	async/AsyncConnection.h	/^    std::mutex delay_lock;$/;"	m	class:AsyncConnection::DelayedDelivery
delay_lock	simple/Pipe.cc	/^  Mutex delay_lock;$/;"	m	class:Pipe::DelayedDelivery	file:
delay_queue	async/AsyncConnection.h	/^    std::deque<std::pair<utime_t, Message*> > delay_queue;$/;"	m	class:AsyncConnection::DelayedDelivery
delay_queue	simple/Pipe.cc	/^  std::deque< pair<utime_t,Message*> > delay_queue;$/;"	m	class:Pipe::DelayedDelivery	file:
delay_state	async/AsyncConnection.h	/^  } *delay_state;$/;"	m	class:AsyncConnection	typeref:class:AsyncConnection::DelayedDelivery
delay_thread	simple/Pipe.h	/^    DelayedDelivery *delay_thread;$/;"	m	class:Pipe
delayed_ack_event	async/dpdk/TCP.h	/^    EventCallbackRef delayed_ack_event;$/;"	m	class:tcp_state::tcp_option::option_kind::tcp::tcb
delete_file_event	async/Event.cc	/^void EventCenter::delete_file_event(int fd, int mask)$/;"	f	class:EventCenter
delete_time_event	async/Event.cc	/^void EventCenter::delete_time_event(uint64_t id)$/;"	f	class:EventCenter
deleted_conns	async/AsyncMessenger.h	/^  set<AsyncConnectionRef> deleted_conns;$/;"	m	class:AsyncMessenger
deleted_lock	async/AsyncMessenger.h	/^  Mutex deleted_lock;$/;"	m	class:AsyncMessenger
deq	xio/XioPortal.h	/^    void deq(XioSubmit::Queue& send_q)$/;"	f	struct:XioPortal::SubmitQueue
dequeue	xio/XioInSeq.h	/^  struct xio_msg* dequeue() {$/;"	f	class:XioInSeq
dequeue	xio/XioMsg.h	/^  struct xio_msg* dequeue() {$/;"	f	struct:XioCompletion
destroy	async/Stack.h	/^  virtual void destroy() {}$/;"	f	class:Worker
device	async/rdma/Infiniband.h	/^    Device *device;$/;"	m	class:Infiniband::MemoryManager
device	async/rdma/Infiniband.h	/^  Device *device = NULL;$/;"	m	class:Infiniband
device	async/rdma/Infiniband.h	/^  ibv_device *device;$/;"	m	class:Device
device_attr	async/rdma/Infiniband.h	/^  ibv_device_attr *device_attr;$/;"	m	class:Device
device_list	async/rdma/Infiniband.h	/^  DeviceList *device_list = nullptr;$/;"	m	class:Infiniband
device_list	async/rdma/Infiniband.h	/^  struct ibv_device ** device_list;$/;"	m	class:DeviceList	typeref:struct:DeviceList::ibv_device
device_name	async/rdma/Infiniband.h	/^  const std::string &device_name;$/;"	m	class:Infiniband
device_stat_time_fd	async/dpdk/DPDK.h	/^  uint64_t device_stat_time_fd = 0;$/;"	m	class:DPDKQueuePair
devices	async/rdma/Infiniband.h	/^  Device** devices;$/;"	m	class:DeviceList
df	async/dpdk/IP.h	/^  bool df() { return frag & (1 << uint8_t(frag_bits::df)); }$/;"	f	class:ip_hdr::frag_bits
df	async/dpdk/IP.h	/^  enum class frag_bits : uint8_t { mf = 13, df = 14, reserved = 15, offset_shift = 3 };$/;"	m	class:ip_hdr::frag_bits
did_bind	async/AsyncMessenger.h	/^  bool did_bind;$/;"	m	class:AsyncMessenger
did_bind	simple/SimpleMessenger.h	/^  bool did_bind;$/;"	m	class:SimpleMessenger
did_bind	xio/XioMessenger.h	/^  bool did_bind;$/;"	m	class:XioMessenger
discard	async/AsyncConnection.h	/^    void discard() {$/;"	f	class:AsyncConnection::DelayedDelivery
discard	simple/Pipe.cc	/^void Pipe::DelayedDelivery::discard()$/;"	f	class:Pipe::DelayedDelivery
discard_local	DispatchQueue.cc	/^void DispatchQueue::discard_local()$/;"	f	class:DispatchQueue
discard_out_queue	async/AsyncConnection.cc	/^void AsyncConnection::discard_out_queue()$/;"	f	class:AsyncConnection
discard_out_queue	simple/Pipe.cc	/^void Pipe::discard_out_queue()$/;"	f	class:Pipe
discard_out_queues	xio/XioConnection.cc	/^int XioConnection::discard_out_queues(uint32_t flags)$/;"	f	class:XioConnection
discard_queue	DispatchQueue.cc	/^void DispatchQueue::discard_queue(uint64_t id) {$/;"	f	class:DispatchQueue
discard_requeued_up_to	async/AsyncConnection.cc	/^void AsyncConnection::discard_requeued_up_to(uint64_t seq)$/;"	f	class:AsyncConnection
discard_requeued_up_to	simple/Pipe.cc	/^void Pipe::discard_requeued_up_to(uint64_t seq)$/;"	f	class:Pipe
disconnect	xio/XioConnection.h	/^  void disconnect() {$/;"	f	class:XioConnection
disp_threads	QueueStrategy.h	/^  QSThread::Queue disp_threads; \/\/< waiting threads$/;"	m	class:QueueStrategy
dispatch_event_external	async/Event.cc	/^void EventCenter::dispatch_event_external(EventCallbackRef e)$/;"	f	class:EventCenter
dispatch_packet	async/dpdk/net.cc	/^int interface::dispatch_packet(EventCenter *center, Packet p) {$/;"	f	class:interface
dispatch_q	Message.h	/^  bi::list_member_hook<> dispatch_q; \/\/ boost::intrusive需要的字段$/;"	m	class:Message
dispatch_queue	async/AsyncConnection.h	/^    DispatchQueue *dispatch_queue;$/;"	m	class:AsyncConnection::DelayedDelivery
dispatch_queue	async/AsyncConnection.h	/^  DispatchQueue *dispatch_queue;$/;"	m	class:AsyncConnection
dispatch_queue	async/AsyncMessenger.h	/^  DispatchQueue dispatch_queue;$/;"	m	class:AsyncMessenger
dispatch_queue	simple/SimpleMessenger.h	/^  DispatchQueue dispatch_queue;$/;"	m	class:SimpleMessenger
dispatch_stamp	Message.h	/^  utime_t dispatch_stamp;            \/\/ dispatch的时间戳 $/;"	m	class:Message
dispatch_strategy	xio/XioMessenger.h	/^  DispatchStrategy* dispatch_strategy;$/;"	m	class:XioMessenger
dispatch_thread	DispatchQueue.h	/^  } dispatch_thread;$/;"	m	class:DispatchQueue	typeref:class:DispatchQueue::DispatchThread
dispatch_throttle_release	DispatchQueue.cc	/^void DispatchQueue::dispatch_throttle_release(uint64_t msize)$/;"	f	class:DispatchQueue
dispatch_throttle_size	Message.h	/^  uint64_t dispatch_throttle_size = 0;$/;"	m	class:Message
dispatch_throttler	DispatchQueue.h	/^  Throttle dispatch_throttler;$/;"	m	class:DispatchQueue
dispatcher	async/rdma/Infiniband.h	/^  RDMADispatcher *dispatcher = nullptr;$/;"	m	class:Infiniband
dispatcher	async/rdma/RDMAStack.h	/^    RDMADispatcher *dispatcher;$/;"	m	class:RDMADispatcher::C_handle_cq_async
dispatcher	async/rdma/RDMAStack.h	/^  RDMADispatcher *dispatcher;$/;"	m	class:RDMAServerSocketImpl
dispatcher	async/rdma/RDMAStack.h	/^  RDMADispatcher *dispatcher;$/;"	m	class:RDMAStack
dispatcher	async/rdma/RDMAStack.h	/^  RDMADispatcher* dispatcher = nullptr;$/;"	m	class:RDMAWorker
dispatcher	async/rdma/RDMAStack.h	/^  RDMADispatcher* dispatcher;$/;"	m	class:RDMAConnectedSocketImpl
dispatchers	Messenger.h	/^  list<Dispatcher*> dispatchers;$/;"	m	class:Messenger
do_closed	async/dpdk/TCP.h	/^    void do_closed() {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::tcb
do_established	async/dpdk/TCP.h	/^    void do_established() {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::tcb
do_local_fin_acked	async/dpdk/TCP.h	/^    void do_local_fin_acked() {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::tcb
do_one_frag	async/dpdk/DPDK.h	/^    static bool do_one_frag(DoOneBufFunc do_one_buf, DPDKQueuePair& qp,$/;"	f	class:DPDKQueuePair::tx_buf
do_recv	simple/Pipe.cc	/^ssize_t Pipe::do_recv(char *buf, size_t len, int flags)$/;"	f	class:Pipe
do_request	async/AsyncConnection.cc	/^void AsyncConnection::DelayedDelivery::do_request(int id)$/;"	f	class:AsyncConnection::DelayedDelivery
do_request	async/dpdk/ARP.h	/^    void do_request(int r) {$/;"	f	class:arp_for::C_handle_arp_timeout
do_request	async/dpdk/DPDK.cc	/^  void do_request(int id) {$/;"	f	class:C_handle_dev_stats
do_request	async/dpdk/IP.cc	/^  void do_request(int fd_or_id) {$/;"	f	class:C_handle_frag_timeout
do_request	async/dpdk/Packet.cc	/^  void do_request(int fd) {$/;"	f	class:C_free_on_cpu
do_request	async/dpdk/TCP.h	/^    void do_request(int fd_or_id) {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::C_all_data_acked
do_request	async/dpdk/TCP.h	/^    void do_request(int r) {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::C_actual_remove_tcb
do_request	async/dpdk/TCP.h	/^    void do_request(int r) {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::C_handle_delayed_ack
do_request	async/dpdk/TCP.h	/^    void do_request(int r) {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::C_handle_persist
do_request	async/dpdk/TCP.h	/^    void do_request(int r) {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::C_handle_retransmit
do_request	async/dpdk/net.cc	/^  void do_request(int fd) {$/;"	f	class:C_handle_l2forward
do_request	async/dpdk/net.cc	/^  void do_request(int id) {$/;"	f	class:C_arp_learn
do_request	async/rdma/RDMAStack.h	/^    void do_request(int fd) {$/;"	f	class:RDMAConnectedSocketImpl::C_handle_connection
do_request	async/rdma/RDMAStack.h	/^    void do_request(int fd) {$/;"	f	class:RDMADispatcher::C_handle_cq_async
do_request	async/rdma/RDMAStack.h	/^    void do_request(int fd) {$/;"	f	class:RDMAWorker::C_handle_cq_tx
do_reset	async/dpdk/TCP.h	/^    void do_reset() {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::tcb
do_sendmsg	async/PosixStack.cc	/^  static ssize_t do_sendmsg(int fd, struct msghdr &msg, unsigned len, bool more)$/;"	f	class:final
do_sendmsg	simple/Pipe.cc	/^int Pipe::do_sendmsg(struct msghdr *msg, unsigned len, bool more)$/;"	f	class:Pipe
do_setup_isn	async/dpdk/TCP.h	/^    void do_setup_isn() {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::tcb
do_syn_received	async/dpdk/TCP.h	/^    void do_syn_received() {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::tcb
do_syn_sent	async/dpdk/TCP.h	/^    void do_syn_sent() {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::tcb
do_time_wait	async/dpdk/TCP.h	/^    void do_time_wait() {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::tcb
done	async/Event.h	/^    bool done = false;$/;"	m	class:EventCenter::C_submit_event
done	async/Stack.h	/^  bool done = false;$/;"	m	class:Worker
done	async/dpdk/stream.h	/^  int done() {$/;"	f	class:subscription
done	async/dpdk/stream.h	/^  int done;$/;"	m	class:stream
done	async/rdma/RDMAStack.h	/^  bool done = false;$/;"	m	class:RDMADispatcher
done	simple/Accepter.h	/^  bool done;$/;"	m	class:Accepter
dout_prefix	DispatchQueue.cc	28;"	d	file:
dout_prefix	DispatchQueue.cc	29;"	d	file:
dout_prefix	async/AsyncConnection.cc	32;"	d	file:
dout_prefix	async/AsyncConnection.cc	33;"	d	file:
dout_prefix	async/AsyncMessenger.cc	33;"	d	file:
dout_prefix	async/AsyncMessenger.cc	34;"	d	file:
dout_prefix	async/Event.cc	37;"	d	file:
dout_prefix	async/Event.cc	38;"	d	file:
dout_prefix	async/Event.cc	58;"	d	file:
dout_prefix	async/Event.cc	59;"	d	file:
dout_prefix	async/EventEpoll.cc	23;"	d	file:
dout_prefix	async/EventEpoll.cc	24;"	d	file:
dout_prefix	async/EventKqueue.cc	22;"	d	file:
dout_prefix	async/EventKqueue.cc	23;"	d	file:
dout_prefix	async/EventSelect.cc	24;"	d	file:
dout_prefix	async/EventSelect.cc	25;"	d	file:
dout_prefix	async/PosixStack.cc	38;"	d	file:
dout_prefix	async/PosixStack.cc	39;"	d	file:
dout_prefix	async/Stack.cc	32;"	d	file:
dout_prefix	async/Stack.cc	33;"	d	file:
dout_prefix	async/dpdk/DPDK.cc	62;"	d	file:
dout_prefix	async/dpdk/DPDK.cc	63;"	d	file:
dout_prefix	async/dpdk/DPDKStack.cc	53;"	d	file:
dout_prefix	async/dpdk/DPDKStack.cc	54;"	d	file:
dout_prefix	async/dpdk/EventDPDK.cc	26;"	d	file:
dout_prefix	async/dpdk/EventDPDK.cc	27;"	d	file:
dout_prefix	async/dpdk/IP.cc	48;"	d	file:
dout_prefix	async/dpdk/IP.cc	49;"	d	file:
dout_prefix	async/dpdk/TCP.cc	221;"	d	file:
dout_prefix	async/dpdk/TCP.cc	222;"	d	file:
dout_prefix	async/dpdk/TCP.cc	32;"	d	file:
dout_prefix	async/dpdk/TCP.cc	33;"	d	file:
dout_prefix	async/dpdk/UserspaceEvent.cc	22;"	d	file:
dout_prefix	async/dpdk/UserspaceEvent.cc	23;"	d	file:
dout_prefix	async/dpdk/net.cc	44;"	d	file:
dout_prefix	async/dpdk/net.cc	45;"	d	file:
dout_prefix	async/net_handler.cc	31;"	d	file:
dout_prefix	async/net_handler.cc	32;"	d	file:
dout_prefix	async/rdma/Infiniband.cc	23;"	d	file:
dout_prefix	async/rdma/Infiniband.cc	24;"	d	file:
dout_prefix	async/rdma/RDMAConnectedSocketImpl.cc	20;"	d	file:
dout_prefix	async/rdma/RDMAConnectedSocketImpl.cc	21;"	d	file:
dout_prefix	async/rdma/RDMAServerSocketImpl.cc	24;"	d	file:
dout_prefix	async/rdma/RDMAServerSocketImpl.cc	25;"	d	file:
dout_prefix	async/rdma/RDMAStack.cc	27;"	d	file:
dout_prefix	async/rdma/RDMAStack.cc	28;"	d	file:
dout_prefix	simple/Accepter.cc	36;"	d	file:
dout_prefix	simple/Accepter.cc	37;"	d	file:
dout_prefix	simple/Pipe.cc	45;"	d	file:
dout_prefix	simple/Pipe.cc	46;"	d	file:
dout_prefix	simple/SimpleMessenger.cc	206;"	d	file:
dout_prefix	simple/SimpleMessenger.cc	207;"	d	file:
dout_prefix	simple/SimpleMessenger.cc	30;"	d	file:
dout_prefix	simple/SimpleMessenger.cc	31;"	d	file:
dout_prefix	xio/XioConnection.cc	80;"	d	file:
dout_prefix	xio/XioConnection.cc	81;"	d	file:
dout_prefix	xio/XioMessenger.cc	29;"	d	file:
dout_prefix	xio/XioMessenger.cc	30;"	d	file:
dout_prefix	xio/XioMessenger.cc	344;"	d	file:
dout_prefix	xio/XioMessenger.cc	345;"	d	file:
dout_subsys	DispatchQueue.cc	20;"	d	file:
dout_subsys	Message.cc	199;"	d	file:
dout_subsys	QueueStrategy.cc	16;"	d	file:
dout_subsys	async/AsyncConnection.cc	31;"	d	file:
dout_subsys	async/AsyncMessenger.cc	32;"	d	file:
dout_subsys	async/Event.cc	35;"	d	file:
dout_subsys	async/EventEpoll.cc	21;"	d	file:
dout_subsys	async/EventKqueue.cc	20;"	d	file:
dout_subsys	async/EventSelect.cc	22;"	d	file:
dout_subsys	async/PosixStack.cc	37;"	d	file:
dout_subsys	async/Stack.cc	31;"	d	file:
dout_subsys	async/dpdk/DPDK.cc	61;"	d	file:
dout_subsys	async/dpdk/DPDKStack.cc	52;"	d	file:
dout_subsys	async/dpdk/EventDPDK.cc	24;"	d	file:
dout_subsys	async/dpdk/IP.cc	47;"	d	file:
dout_subsys	async/dpdk/TCP.cc	31;"	d	file:
dout_subsys	async/dpdk/UserspaceEvent.cc	21;"	d	file:
dout_subsys	async/dpdk/net.cc	43;"	d	file:
dout_subsys	async/net_handler.cc	30;"	d	file:
dout_subsys	async/rdma/Infiniband.cc	22;"	d	file:
dout_subsys	async/rdma/RDMAConnectedSocketImpl.cc	19;"	d	file:
dout_subsys	async/rdma/RDMAServerSocketImpl.cc	23;"	d	file:
dout_subsys	async/rdma/RDMAStack.cc	26;"	d	file:
dout_subsys	simple/Accepter.cc	34;"	d	file:
dout_subsys	simple/Pipe.cc	43;"	d	file:
dout_subsys	simple/SimpleMessenger.cc	29;"	d	file:
dout_subsys	xio/XioConnection.cc	29;"	d	file:
dout_subsys	xio/XioMessenger.cc	28;"	d	file:
dout_subsys	xio/XioPortal.cc	18;"	d	file:
dpdk	async/dpdk/dpdk_rte.cc	/^namespace dpdk {$/;"	n	file:
dpdk	async/dpdk/dpdk_rte.h	/^namespace dpdk {$/;"	n
dpdk_thread_adaptor	async/dpdk/DPDKStack.cc	/^static int dpdk_thread_adaptor(void* f)$/;"	f	file:
dq	DispatchQueue.h	/^    DispatchQueue *dq;$/;"	m	class:DispatchQueue::DispatchThread
dq	DispatchQueue.h	/^    DispatchQueue *dq;$/;"	m	class:DispatchQueue::LocalDeliveryThread
dq	QueueStrategy.h	/^    QueueStrategy *dq;$/;"	m	class:QueueStrategy::QSThread
drain	async/Stack.cc	/^void NetworkStack::drain()$/;"	f	class:NetworkStack
drain_cond	async/Stack.cc	/^  Cond drain_cond;$/;"	m	class:C_drain	file:
drain_count	async/Stack.cc	/^  unsigned drain_count;$/;"	m	class:C_drain	file:
drain_lock	async/Stack.cc	/^  Mutex drain_lock;$/;"	m	class:C_drain	file:
drained	xio/XioPortal.h	/^  bool drained;$/;"	m	class:XioPortal
driver	async/Event.h	/^  EventDriver *driver;$/;"	m	class:EventCenter
ds_dispatch	QueueStrategy.cc	/^void QueueStrategy::ds_dispatch(Message *m) {$/;"	f	class:QueueStrategy
ds_dispatch	xio/XioMessenger.h	/^  void ds_dispatch(Message *m)$/;"	f	class:XioMessenger
dscp	async/dpdk/IP.h	/^  uint8_t dscp : 6;$/;"	m	struct:ip_hdr
dst	async/dpdk/net.cc	/^  unsigned dst;$/;"	m	class:C_handle_l2forward	file:
dst_ip	async/dpdk/IP.h	/^  ipv4_address dst_ip;$/;"	m	class:ip_hdr::frag_bits
dst_ip	async/dpdk/IP.h	/^  ipv4_address dst_ip;$/;"	m	struct:ipv4_frag_id
dst_mac	async/dpdk/ethernet.h	/^  ethernet_address dst_mac;$/;"	m	struct:eth_hdr
dst_port	async/dpdk/TCP.h	/^  uint16_t dst_port;$/;"	m	struct:tcp_state::tcp_option::option_kind::tcp_hdr
dump	Message.cc	/^void Message::dump(Formatter *f) const$/;"	f	class:Message
dump	msg_types.cc	/^void entity_addr_t::dump(Formatter *f) const$/;"	f	class:entity_addr_t
dump	msg_types.cc	/^void entity_addrvec_t::dump(Formatter *f) const$/;"	f	class:entity_addrvec_t
dump	msg_types.cc	/^void entity_inst_t::dump(Formatter *f) const$/;"	f	class:entity_inst_t
dump	msg_types.cc	/^void entity_name_t::dump(Formatter *f) const$/;"	f	class:entity_name_t
dump	xio/XioPool.cc	/^void XioPoolStats::dump(const char* tag, uint64_t serial)$/;"	f	class:XioPoolStats
dupacks	async/dpdk/TCP.h	/^      uint16_t dupacks = 0;$/;"	m	struct:tcp_state::tcp_option::option_kind::tcp::tcb::send
e_dst	async/dpdk/IP.h	/^    ethernet_address e_dst;$/;"	m	struct:ipv4_traits::l4packet
eal	async/dpdk/dpdk_rte.h	/^class eal {$/;"	c	namespace:dpdk
echo_reply	async/dpdk/IP.h	/^    echo_reply = 0,$/;"	m	class:icmp_hdr::msg_type
echo_request	async/dpdk/IP.h	/^    echo_request = 8,$/;"	m	class:icmp_hdr::msg_type
ecn	async/dpdk/IP.h	/^  uint8_t ecn : 2;$/;"	m	struct:ip_hdr
emplace_back	async/dpdk/circular_buffer.h	/^inline void circular_buffer<T, Alloc>::emplace_back(Args&&... args) {$/;"	f	class:circular_buffer
emplace_front	async/dpdk/circular_buffer.h	/^inline void circular_buffer<T, Alloc>::emplace_front(Args&&... args) {$/;"	f	class:circular_buffer
empty	async/dpdk/circular_buffer.h	/^inline bool circular_buffer<T, Alloc>::empty() const {$/;"	f	class:circular_buffer
empty	async/dpdk/queue.h	/^inline bool queue<T>::empty() const {$/;"	f	class:queue
empty	msg_types.h	/^  bool empty() const { return v.empty(); }$/;"	f	struct:entity_addrvec_t
empty_payload	Message.h	/^  bool empty_payload() const { return payload.length() == 0; }$/;"	f	class:Message
enable_lw_shared_from_this	async/dpdk/shared_ptr.h	/^class enable_lw_shared_from_this {$/;"	c
enabled_huge_page	async/rdma/Infiniband.h	/^    bool enabled_huge_page;$/;"	m	class:Infiniband::MemoryManager
encode	Message.cc	/^void Message::encode(uint64_t features, int crcflags)$/;"	f	class:Message
encode	msg_types.cc	/^void entity_addrvec_t::encode(bufferlist& bl, uint64_t features) const$/;"	f	class:entity_addrvec_t
encode	msg_types.h	/^  void encode(bufferlist& bl) const {$/;"	f	struct:ceph_sockaddr_storage
encode	msg_types.h	/^  void encode(bufferlist& bl, uint64_t features) const {$/;"	f	struct:entity_addr_t
encode	msg_types.h	/^  void encode(bufferlist& bl, uint64_t features) const {$/;"	f	struct:entity_inst_t
encode	msg_types.h	/^static inline void encode(const sockaddr_storage& a, bufferlist& bl) {$/;"	f
encode	xio/XioMsg.h	/^  inline void encode(buffer::list& bl) const {$/;"	f	class:XioMsgHdr
encode_ftr	xio/XioMsg.h	/^  inline void encode_ftr(buffer::list& bl) const {$/;"	f	class:XioMsgHdr
encode_hdr	xio/XioMsg.h	/^  inline void encode_hdr(ceph::buffer::list& bl) const {$/;"	f	class:XioMsgHdr
encode_message	Message.cc	/^void encode_message(Message *msg, uint64_t features, bufferlist& payload)$/;"	f
encode_trace	Message.cc	/^void Message::encode_trace(bufferlist &bl, uint64_t features) const$/;"	f	class:Message
end	async/dpdk/Packet.h	/^    fragment* end() { return _finish; }$/;"	f	struct:Packet::pseudo_vector
end	async/dpdk/circular_buffer.h	/^    size_t end = 0;$/;"	m	struct:circular_buffer::impl
end	async/dpdk/circular_buffer.h	/^  const_iterator end() const {$/;"	f	class:circular_buffer
end	async/dpdk/circular_buffer.h	/^  iterator end() {$/;"	f	class:circular_buffer
end	async/rdma/Infiniband.h	/^      char *end = nullptr;$/;"	m	class:Infiniband::MemoryManager::Cluster
end	xio/XioInSeq.h	/^  struct xio_msg* end() { return NULL; }$/;"	f	class:XioInSeq
end_idx	async/dpdk/net.h	/^  size_t end_idx = 0;$/;"	m	class:forward_hash
enq	xio/XioPortal.h	/^    void enq(XioConnection *xcon, XioSubmit* xs)$/;"	f	struct:XioPortal::SubmitQueue
enq	xio/XioPortal.h	/^    void enq(XioConnection *xcon, XioSubmit::Queue& requeue_q)$/;"	f	struct:XioPortal::SubmitQueue
enqueue	DispatchQueue.cc	/^void DispatchQueue::enqueue(Message *m, int priority, uint64_t id)$/;"	f	class:DispatchQueue
enqueue	xio/XioPortal.h	/^  void enqueue(XioConnection *xcon, XioSubmit *xs)$/;"	f	class:XioPortal
entity_addr_t	msg_types.h	/^  entity_addr_t() : type(0), nonce(0) { $/;"	f	struct:entity_addr_t
entity_addr_t	msg_types.h	/^  entity_addr_t(__u32 _type, __u32 _nonce) : type(_type), nonce(_nonce) {$/;"	f	struct:entity_addr_t
entity_addr_t	msg_types.h	/^  explicit entity_addr_t(const ceph_entity_addr &o) {$/;"	f	struct:entity_addr_t
entity_addr_t	msg_types.h	/^struct entity_addr_t {$/;"	s
entity_addrvec_t	msg_types.h	/^WRITE_CLASS_ENCODER_FEATURES(entity_addrvec_t);$/;"	v
entity_addrvec_t	msg_types.h	/^struct entity_addrvec_t {$/;"	s
entity_inst_t	msg_types.h	/^  entity_inst_t() {}$/;"	f	struct:entity_inst_t
entity_inst_t	msg_types.h	/^  entity_inst_t(const ceph_entity_inst& i) : name(i.name), addr(i.addr) { }$/;"	f	struct:entity_inst_t
entity_inst_t	msg_types.h	/^  entity_inst_t(const ceph_entity_name& n, const ceph_entity_addr &a) : name(n), addr(a) {}$/;"	f	struct:entity_inst_t
entity_inst_t	msg_types.h	/^  entity_inst_t(entity_name_t n, const entity_addr_t& a) : name(n), addr(a) {}$/;"	f	struct:entity_inst_t
entity_inst_t	msg_types.h	/^struct entity_inst_t {$/;"	s
entity_name_t	msg_types.h	/^  entity_name_t() : _type(0), _num(0) { }$/;"	f	class:entity_name_t
entity_name_t	msg_types.h	/^  entity_name_t(int t, int64_t n) : _type(t), _num(n) { }$/;"	f	class:entity_name_t
entity_name_t	msg_types.h	/^  explicit entity_name_t(const ceph_entity_name &n) : $/;"	f	class:entity_name_t
entity_name_t	msg_types.h	/^class entity_name_t {$/;"	c
entity_type_t	msg_types.h	/^typedef uint8_t entity_type_t;$/;"	t
entry	DispatchQueue.cc	/^void DispatchQueue::entry()$/;"	f	class:DispatchQueue
entry	QueueStrategy.cc	/^void QueueStrategy::entry(QSThread *thrd)$/;"	f	class:QueueStrategy
entry	QueueStrategy.h	/^    void* entry() {$/;"	f	class:QueueStrategy::QSThread
entry	simple/Accepter.cc	/^void *Accepter::entry()$/;"	f	class:Accepter
entry	simple/Pipe.cc	/^void *Pipe::DelayedDelivery::entry()$/;"	f	class:Pipe::DelayedDelivery
entry	xio/XioPortal.h	/^  void *entry()$/;"	f	class:XioPortal
eol	async/dpdk/TCP.h	/^  enum class option_kind: uint8_t { mss = 2, win_scale = 3, sack = 4, timestamps = 8,  nop = 1, eol = 0 };$/;"	m	class:tcp_state::tcp_option::option_kind
eol	async/dpdk/TCP.h	/^  enum class option_len:  uint8_t { mss = 4, win_scale = 3, sack = 2, timestamps = 10, nop = 1, eol = 1 };$/;"	m	class:tcp_state::tcp_option::option_kind::option_len
eol	async/dpdk/TCP.h	/^  struct eol {$/;"	s	class:tcp_state::tcp_option::option_kind::option_len
epfd	async/EventEpoll.h	/^  int epfd;$/;"	m	class:EpollDriver
erase_qpn	async/rdma/RDMAStack.cc	/^void RDMADispatcher::erase_qpn(uint32_t qpn)$/;"	f	class:RDMADispatcher
erase_qpn_lockless	async/rdma/RDMAStack.cc	/^void RDMADispatcher::erase_qpn_lockless(uint32_t qpn)$/;"	f	class:RDMADispatcher
error	async/rdma/RDMAStack.h	/^  int error;$/;"	m	class:RDMAConnectedSocketImpl
eth_hdr	async/dpdk/ethernet.h	/^struct eth_hdr {$/;"	s
eth_hdr_len	async/dpdk/const.h	/^const uint8_t eth_hdr_len = 14;$/;"	m	class:ip_protocol_num::eth_protocol_num
eth_proto	async/dpdk/ethernet.h	/^  uint16_t eth_proto;$/;"	m	struct:eth_hdr
eth_protocol_num	async/dpdk/const.h	/^enum class eth_protocol_num : uint16_t {$/;"	c	class:ip_protocol_num
ethernet	async/dpdk/ethernet.h	/^struct ethernet {$/;"	s
ethernet_address	async/dpdk/ethernet.h	/^  ethernet_address() {}$/;"	f	struct:ethernet_address
ethernet_address	async/dpdk/ethernet.h	/^  ethernet_address(const uint8_t *eaddr) {$/;"	f	struct:ethernet_address
ethernet_address	async/dpdk/ethernet.h	/^  ethernet_address(std::initializer_list<uint8_t> eaddr) {$/;"	f	struct:ethernet_address
ethernet_address	async/dpdk/ethernet.h	/^struct ethernet_address {$/;"	s
ev_loop	xio/XioPortal.h	/^  void *ev_loop;$/;"	m	class:XioPortal
event_map	async/Event.h	/^  std::map<uint64_t, std::multimap<clock_type::time_point, TimeEvent>::iterator> event_map;$/;"	m	class:EventCenter
event_wait	async/EventEpoll.cc	/^int EpollDriver::event_wait(vector<FiredFileEvent> &fired_events, struct timeval *tvp)$/;"	f	class:EpollDriver
event_wait	async/EventKqueue.cc	/^int KqueueDriver::event_wait(vector<FiredFileEvent> &fired_events, struct timeval *tvp)$/;"	f	class:KqueueDriver
event_wait	async/EventSelect.cc	/^int SelectDriver::event_wait(vector<FiredFileEvent> &fired_events, struct timeval *tvp)$/;"	f	class:SelectDriver
event_wait	async/dpdk/EventDPDK.cc	/^int DPDKDriver::event_wait(vector<FiredFileEvent> &fired_events, struct timeval *tvp)$/;"	f	class:DPDKDriver
events	async/EventEpoll.h	/^  struct epoll_event *events;$/;"	m	class:EpollDriver	typeref:struct:EpollDriver::epoll_event
execute_on_master	async/dpdk/dpdk_rte.h	/^  static void execute_on_master(std::function<void()> &&f) {$/;"	f	class:dpdk::eal
existing_mask	Messenger.h	/^    sigset_t existing_mask;$/;"	m	struct:Messenger::sigpipe_stopper
exit_fast_recovery	async/dpdk/TCP.h	/^    void exit_fast_recovery() {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::tcb
expand	async/dpdk/circular_buffer.h	/^void circular_buffer<T, Alloc>::expand() {$/;"	f	class:circular_buffer
external_events	async/Event.h	/^  deque<EventCallbackRef> external_events;$/;"	m	class:EventCenter
external_lock	async/Event.h	/^  std::mutex external_lock;$/;"	m	class:EventCenter
external_num_events	async/Event.h	/^  std::atomic_ulong external_num_events;$/;"	m	class:EventCenter
f	async/Event.h	/^    func f;$/;"	m	class:EventCenter::C_submit_event
f	async/dpdk/capture.h	/^  -> decltype(f( x, std::forward<Ts>(args)... ))$/;"	f	class:capture_impl
f	async/dpdk/capture.h	/^  F f;$/;"	m	class:capture_impl
f_ack	async/dpdk/TCP.h	/^  uint8_t f_ack : 1;$/;"	m	struct:tcp_state::tcp_option::option_kind::tcp_hdr
f_fin	async/dpdk/TCP.h	/^  uint8_t f_fin : 1;$/;"	m	struct:tcp_state::tcp_option::option_kind::tcp_hdr
f_psh	async/dpdk/TCP.h	/^  uint8_t f_psh : 1;$/;"	m	struct:tcp_state::tcp_option::option_kind::tcp_hdr
f_rst	async/dpdk/TCP.h	/^  uint8_t f_rst : 1;$/;"	m	struct:tcp_state::tcp_option::option_kind::tcp_hdr
f_syn	async/dpdk/TCP.h	/^  uint8_t f_syn : 1;$/;"	m	struct:tcp_state::tcp_option::option_kind::tcp_hdr
f_urg	async/dpdk/TCP.h	/^  uint8_t f_urg : 1;$/;"	m	struct:tcp_state::tcp_option::option_kind::tcp_hdr
failed	Connection.h	/^  bool failed; \/\/ true if we are a lossy connection that has failed.$/;"	m	struct:Connection
fast_dispatch	DispatchQueue.cc	/^void DispatchQueue::fast_dispatch(Message *m)$/;"	f	class:DispatchQueue
fast_dispatchers	Messenger.h	/^  list <Dispatcher*> fast_dispatchers;$/;"	m	class:Messenger
fast_preprocess	DispatchQueue.cc	/^void DispatchQueue::fast_preprocess(Message *m)$/;"	f	class:DispatchQueue
fast_retransmit	async/dpdk/TCP.h	/^void tcp<InetTraits>::tcb::fast_retransmit() {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::tcb
fault	async/AsyncConnection.cc	/^void AsyncConnection::fault()$/;"	f	class:AsyncConnection
fault	async/rdma/RDMAConnectedSocketImpl.cc	/^void RDMAConnectedSocketImpl::fault()$/;"	f	class:RDMAConnectedSocketImpl
fault	simple/Pipe.cc	/^void Pipe::fault(bool onread)$/;"	f	class:Pipe
fd	async/Event.h	/^  int fd;$/;"	m	struct:FiredFileEvent
fd	async/EventKqueue.h	/^    int fd;$/;"	m	struct:KqueueDriver::SaveEvent
fd	async/Stack.h	/^  int fd() const {$/;"	f	class:ConnectedSocket
fd	async/Stack.h	/^  int fd() const {$/;"	f	class:ServerSocket
fd	async/dpdk/TCP.h	/^    int fd() const {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::connection
fd	async/dpdk/TCP.h	/^    int fd() const {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::listener
fd	async/dpdk/TCP.h	/^    int fd;$/;"	m	class:tcp_state::tcp_option::option_kind::tcp::tcb
fds	async/dpdk/UserspaceEvent.h	/^  std::vector<Tub<UserspaceFDImpl> > fds;$/;"	m	class:UserspaceEventManager
features	Connection.h	/^  uint64_t features;$/;"	m	struct:Connection
features	xio/XioConnection.h	/^    uint64_t features;$/;"	m	class:XioConnection::CState
features	xio/XioMsg.h	/^  uint64_t features;$/;"	m	class:XioMsgHdr
features_required	Messenger.h	/^    uint64_t features_required;$/;"	m	struct:Messenger::Policy
features_supported	Messenger.h	/^    uint64_t features_supported;$/;"	m	struct:Messenger::Policy
file_events	async/Event.h	/^  vector<FileEvent> file_events;$/;"	m	class:EventCenter
fill	async/dpdk/TCP.cc	/^uint8_t tcp_option::fill(tcp_hdr* th, uint8_t options_size)$/;"	f	class:tcp_option
fill	async/rdma/Infiniband.cc	/^int Infiniband::MemoryManager::Cluster::fill(uint32_t num)$/;"	f	class:Infiniband::MemoryManager::Cluster
fin	async/rdma/RDMAConnectedSocketImpl.cc	/^void RDMAConnectedSocketImpl::fin() {$/;"	f	class:RDMAConnectedSocketImpl
fin_needs_on	async/dpdk/TCP.h	/^    bool fin_needs_on() {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::tcb
fin_retransmit	async/dpdk/TCP.h	/^      unsigned fin_retransmit = 0;$/;"	m	struct:tcp_state::tcp_option::option_kind::tcp::tcb::send
final	async/PosixStack.cc	/^class PosixConnectedSocketImpl final : public ConnectedSocketImpl {$/;"	c	file:
final	async/dpdk/IP.h	/^class ipv4_icmp final : public ip_protocol {$/;"	c
final	async/dpdk/IP.h	/^class ipv4_tcp final : public ip_protocol {$/;"	c
finalize	xio/XioMsg.h	/^  void finalize() {$/;"	f	struct:XioCompletion
finish	xio/XioMsg.h	/^  virtual void finish(int r) {$/;"	f	class:XioDispatchHook
finish	xio/XioMsg.h	/^  virtual void finish(int r) {$/;"	f	class:XioMarkDownHook
first	xio/XioPool.h	/^  } *first;$/;"	m	class:XioPool	typeref:struct:XioPool::xio_piece
first_request	async/dpdk/ARP.h	/^    bool first_request;$/;"	m	class:arp_for::C_handle_arp_timeout
first_rto_sample	async/dpdk/TCP.h	/^      bool first_rto_sample = true;$/;"	m	struct:tcp_state::tcp_option::option_kind::tcp::tcb::send
flags	xio/XioConnection.h	/^    uint32_t flags;$/;"	m	class:XioConnection::CState
flight_size	async/dpdk/TCP.h	/^    uint32_t flight_size() {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::tcb
flush	async/AsyncConnection.cc	/^void AsyncConnection::DelayedDelivery::flush() {$/;"	f	class:AsyncConnection::DelayedDelivery
flush	simple/Pipe.cc	/^void Pipe::DelayedDelivery::flush()$/;"	f	class:Pipe::DelayedDelivery
flush_count	simple/Pipe.cc	/^  int flush_count;$/;"	m	class:Pipe::DelayedDelivery	file:
flush_out_queues	xio/XioConnection.cc	/^int XioConnection::flush_out_queues(uint32_t flags) {$/;"	f	class:XioConnection
footer	Message.h	/^  ceph_msg_footer  footer;           \/\/ 消息尾$/;"	m	class:Message
for_each	async/dpdk/circular_buffer.h	/^inline void circular_buffer<T, Alloc>::for_each(Func func) {$/;"	f	class:circular_buffer
foreign_ip	async/dpdk/IP.h	/^  ipaddr foreign_ip;$/;"	m	struct:l4connid
foreign_port	async/dpdk/IP.h	/^  uint16_t foreign_port;$/;"	m	struct:l4connid
foreign_will_not_send	async/dpdk/TCP.h	/^    bool foreign_will_not_send() {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::tcb
fork_finished	async/rdma/RDMAStack.h	/^  std::atomic<bool> fork_finished = {false};$/;"	m	class:RDMAStack
forward	async/dpdk/ARP.cc	/^bool arp::forward(forward_hash& out_hash_data, Packet& p, size_t off)$/;"	f	class:arp
forward	async/dpdk/ARP.h	/^  virtual bool forward(forward_hash& out_hash_data, Packet& p, size_t off) { return false; }$/;"	f	class:arp_for_protocol
forward	async/dpdk/IP.cc	/^bool ipv4::forward(forward_hash& out_hash_data, Packet& p, size_t off)$/;"	f	class:ipv4
forward	async/dpdk/IP.h	/^  virtual bool forward(forward_hash& out_hash_data, Packet& p, size_t off) { return true; }$/;"	f	class:ip_protocol
forward	async/dpdk/TCP.cc	/^bool ipv4_tcp::forward(forward_hash& out_hash_data, Packet& p, size_t off)$/;"	f	class:ipv4_tcp
forward	async/dpdk/TCP.h	/^bool tcp<InetTraits>::forward(forward_hash& out_hash_data, Packet& p, size_t off) {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp
forward	async/dpdk/net.cc	/^void interface::forward(EventCenter *source, unsigned target, Packet p) {$/;"	f	class:interface
forward	async/dpdk/net.h	/^    std::function<bool (forward_hash&, Packet&, size_t)> forward;$/;"	m	struct:interface::l3_rx_stream
forward_dst	async/dpdk/DPDK.h	/^  unsigned forward_dst(unsigned src_cpuid, Func&& hashfn) {$/;"	f	class:DPDKDevice
forward_hash	async/dpdk/net.h	/^class forward_hash {$/;"	c
frag	async/dpdk/IP.h	/^  struct frag {$/;"	s	class:ipv4
frag	async/dpdk/IP.h	/^  uint16_t frag;$/;"	m	struct:ip_hdr
frag	async/dpdk/Packet.h	/^  fragment frag(unsigned idx) const { return _impl->frags[idx]; }$/;"	f	class:Packet
frag	async/dpdk/Packet.h	/^  fragment& frag(unsigned idx) { return _impl->frags[idx]; }$/;"	f	class:Packet
frag_arm	async/dpdk/IP.h	/^  void frag_arm() {$/;"	f	class:ipv4
frag_arm	async/dpdk/IP.h	/^  void frag_arm(utime_t now) {$/;"	f	class:ipv4
frag_bits	async/dpdk/IP.h	/^  enum class frag_bits : uint8_t { mf = 13, df = 14, reserved = 15, offset_shift = 3 };$/;"	c	struct:ip_hdr
frag_drop	async/dpdk/IP.h	/^  void frag_drop(ipv4_frag_id frag_id, uint32_t dropped_size) {$/;"	f	class:ipv4
frag_handler	async/dpdk/IP.h	/^  EventCallbackRef frag_handler;$/;"	m	class:ipv4
frag_limit_mem	async/dpdk/IP.cc	/^void ipv4::frag_limit_mem() {$/;"	f	class:ipv4
frag_timefd	async/dpdk/IP.h	/^  Tub<uint64_t> frag_timefd;$/;"	m	class:ipv4
frag_timeout	async/dpdk/IP.cc	/^void ipv4::frag_timeout() {$/;"	f	class:ipv4
fragment	async/dpdk/Packet.h	/^struct fragment {$/;"	s
fragment_array	async/dpdk/Packet.h	/^  fragment* fragment_array() const { return _impl->frags; }$/;"	f	class:Packet
fragments	async/dpdk/Packet.h	/^    pseudo_vector fragments() { return { frags, _nr_frags }; }$/;"	f	struct:Packet::impl
fragments	async/dpdk/Packet.h	/^  pseudo_vector fragments() const { return { _impl->frags, _impl->_nr_frags }; }$/;"	f	class:Packet
frags	async/dpdk/Packet.h	/^    fragment frags[];$/;"	m	struct:Packet::impl
free_chunks	async/rdma/Infiniband.h	/^      std::vector<Chunk*> free_chunks;$/;"	m	class:Infiniband::MemoryManager::Cluster
free_deleter	async/dpdk/DPDK.h	/^struct free_deleter {$/;"	s
free_huge_pages	async/rdma/Infiniband.cc	/^void Infiniband::MemoryManager::free_huge_pages(void *ptr)$/;"	f	class:Infiniband::MemoryManager
free_on_cpu	async/dpdk/Packet.cc	/^Packet Packet::free_on_cpu(EventCenter *center, std::function<void()> cb)$/;"	f	class:Packet
from_mbuf	async/dpdk/DPDK.cc	/^inline Tub<Packet> DPDKQueuePair::from_mbuf(rte_mbuf* m)$/;"	f	class:DPDKQueuePair
from_mbuf_lro	async/dpdk/DPDK.cc	/^inline Tub<Packet> DPDKQueuePair::from_mbuf_lro(rte_mbuf* m)$/;"	f	class:DPDKQueuePair
from_packet_copy	async/dpdk/DPDK.cc	/^DPDKQueuePair::tx_buf* DPDKQueuePair::tx_buf::from_packet_copy(Packet&& p, DPDKQueuePair& qp)$/;"	f	class:DPDKQueuePair::tx_buf
from_packet_zc	async/dpdk/DPDK.cc	/^DPDKQueuePair::tx_buf* DPDKQueuePair::tx_buf::from_packet_zc($/;"	f	class:DPDKQueuePair::tx_buf
from_static_data	async/dpdk/Packet.h	/^  static Packet from_static_data(const char* data, size_t len) {$/;"	f	class:Packet
front	async/AsyncConnection.h	/^  bufferlist front, middle, data;$/;"	m	class:AsyncConnection
front	async/dpdk/circular_buffer.h	/^inline T& circular_buffer<T, Alloc>::front() {$/;"	f	class:circular_buffer
ftr	xio/XioMsg.h	/^  ceph_msg_footer* ftr;$/;"	m	class:XioMsgHdr
full	async/dpdk/TCP.h	/^    bool full() const {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::listener
full	async/dpdk/queue.h	/^inline bool queue<T>::full() const {$/;"	f	class:queue
full	async/rdma/Infiniband.cc	/^bool Infiniband::MemoryManager::Chunk::full()$/;"	f	class:Infiniband::MemoryManager::Chunk
funcs	async/dpdk/DPDKStack.h	/^  vector<std::function<void()> > funcs;$/;"	m	class:DPDKStack
funcs	async/dpdk/dpdk_rte.cc	/^  std::list<std::function<void()>> eal::funcs;$/;"	m	class:dpdk::eal	file:
funcs	async/dpdk/dpdk_rte.h	/^  static std::list<std::function<void()>> funcs;$/;"	m	class:dpdk::eal
gc	async/dpdk/DPDK.h	/^    bool gc() {$/;"	f	class:DPDKQueuePair::tx_buf_factory
gc_count	async/dpdk/DPDK.h	/^    static constexpr int gc_count = 1;$/;"	m	class:DPDKQueuePair::tx_buf_factory
generate_test_instances	msg_types.cc	/^void entity_addr_t::generate_test_instances(list<entity_addr_t*>& o)$/;"	f	class:entity_addr_t
generate_test_instances	msg_types.cc	/^void entity_addrvec_t::generate_test_instances(list<entity_addrvec_t*>& ls)$/;"	f	class:entity_addrvec_t
generate_test_instances	msg_types.cc	/^void entity_inst_t::generate_test_instances(list<entity_inst_t*>& o)$/;"	f	class:entity_inst_t
generate_test_instances	msg_types.cc	/^void entity_name_t::generate_test_instances(list<entity_name_t*>& o)$/;"	f	class:entity_name_t
generic_connect	async/net_handler.cc	/^int NetHandler::generic_connect(const entity_addr_t& addr, const entity_addr_t &bind_addr, bool nonblock)$/;"	f	class:ceph::NetHandler
get	Message.h	/^  Message *get() {$/;"	f	class:Message
get	async/dpdk/DPDK.h	/^    tx_buf* get() {$/;"	f	class:DPDKQueuePair::tx_buf_factory
get	async/dpdk/IPChecksum.cc	/^uint16_t checksummer::get() const {$/;"	f	class:checksummer
get	simple/Pipe.h	/^    Pipe* get() {$/;"	f	class:Pipe
get	xio/XioConnection.h	/^  XioConnection* get() {$/;"	f	class:XioConnection
get	xio/XioConnection.h	/^  XioLoopbackConnection* get() {$/;"	f	class:XioLoopbackConnection
get	xio/XioMsg.h	/^  XioDispatchHook* get() {$/;"	f	class:XioDispatchHook
get	xio/XioMsg.h	/^  XioSend* get() { nrefs++; return this; };$/;"	f	class:XioSend
get	xio/XioPortal.h	/^  vector<XioPortal*>& get() { return portals; }$/;"	f	class:XioPortals
get_assembled_packet	async/dpdk/IP.cc	/^Packet ipv4::frag::get_assembled_packet(ethernet_address from, ethernet_address to) {$/;"	f	class:ipv4::frag
get_async_fd	async/rdma/Infiniband.h	/^  int get_async_fd() { return device->ctxt->async_fd; }$/;"	f	class:Infiniband
get_authorizer	async/AsyncMessenger.h	/^  AuthAuthorizer *get_authorizer(int peer_type, bool force_new) {$/;"	f	class:AsyncMessenger
get_authorizer	simple/SimpleMessenger.cc	/^AuthAuthorizer *SimpleMessenger::get_authorizer(int peer_type, bool force_new)$/;"	f	class:SimpleMessenger
get_bl	xio/XioMsg.h	/^  const buffer::list& get_bl() { encode(bl); return bl; };$/;"	f	class:XioMsgHdr
get_bl_ref	xio/XioMsg.h	/^  buffer::list& get_bl_ref() { return bl; };$/;"	f	class:XioCommand
get_bound	async/rdma/Infiniband.cc	/^uint32_t Infiniband::MemoryManager::Chunk::get_bound()$/;"	f	class:Infiniband::MemoryManager::Chunk
get_buffers	async/rdma/Infiniband.cc	/^int Infiniband::MemoryManager::Cluster::get_buffers(std::vector<Chunk*> &chunks, size_t bytes)$/;"	f	class:Infiniband::MemoryManager::Cluster
get_byte_throttler	Message.h	/^  Throttle *get_byte_throttler() { return byte_throttler; }$/;"	f	class:Message
get_cc	async/rdma/Infiniband.h	/^    CompletionChannel* get_cc() const { return channel; }$/;"	f	class:Infiniband::CompletionQueue
get_channel	async/rdma/Infiniband.h	/^    ibv_comp_channel* get_channel() { return channel; }$/;"	f	class:Infiniband::CompletionChannel
get_channel_buffers	async/rdma/Infiniband.cc	/^int Infiniband::MemoryManager::get_channel_buffers(std::vector<Chunk*> &chunks, size_t bytes)$/;"	f	class:Infiniband::MemoryManager
get_chunk_by_buffer	async/rdma/Infiniband.h	/^      Chunk *get_chunk_by_buffer(const char *c) {$/;"	f	class:Infiniband::MemoryManager::Cluster
get_code	DispatchQueue.h	/^    int get_code () const {$/;"	f	class:DispatchQueue::QueueItem
get_completion_hook	Message.h	/^  CompletionHook* get_completion_hook() { return completion_hook; }$/;"	f	class:Message
get_conn_lockless	async/rdma/RDMAStack.cc	/^RDMAConnectedSocketImpl* RDMADispatcher::get_conn_lockless(uint32_t qp)$/;"	f	class:RDMADispatcher
get_connection	DispatchQueue.h	/^    Connection *get_connection() {$/;"	f	class:DispatchQueue::QueueItem
get_connection	Message.h	/^  const ConnectionRef& get_connection() const { return connection; }$/;"	f	class:Message
get_connection	async/AsyncMessenger.cc	/^ConnectionRef AsyncMessenger::get_connection(const entity_inst_t& dest)$/;"	f	class:AsyncMessenger
get_connection	simple/SimpleMessenger.cc	/^ConnectionRef SimpleMessenger::get_connection(const entity_inst_t& dest)$/;"	f	class:SimpleMessenger
get_connection	xio/XioMessenger.cc	/^ConnectionRef XioMessenger::get_connection(const entity_inst_t& dest)$/;"	f	class:XioMessenger
get_cost	Message.h	/^  virtual int get_cost() const {$/;"	f	class:Message
get_cpuid	async/PosixStack.h	/^  int get_cpuid(int id) const {$/;"	f	class:PosixNetworkStack
get_cq	async/rdma/Infiniband.h	/^    ibv_cq* get_cq() const { return cq; }$/;"	f	class:Infiniband::CompletionQueue
get_cq_event	async/rdma/Infiniband.cc	/^bool Infiniband::CompletionChannel::get_cq_event()$/;"	f	class:Infiniband::CompletionChannel
get_data	Message.h	/^  bufferlist& get_data() { return data; }$/;"	f	class:Message
get_data	Message.h	/^  const bufferlist& get_data() const { return data; }$/;"	f	class:Message
get_data_len	Message.h	/^  off_t get_data_len() const { return data.length(); }$/;"	f	class:Message
get_default_crc_flags	Messenger.cc	/^int Messenger::get_default_crc_flags(md_config_t * conf)$/;"	f	class:Messenger
get_default_send_priority	Messenger.h	/^  int get_default_send_priority() { return default_send_priority; }$/;"	f	class:Messenger
get_device	async/rdma/Infiniband.h	/^  Device* get_device() { return device; }$/;"	f	class:Infiniband
get_device	async/rdma/Infiniband.h	/^  Device* get_device(const char* device_name) {$/;"	f	class:DeviceList
get_dispatch_queue_len	xio/XioMessenger.h	/^  virtual int get_dispatch_queue_len()$/;"	f	class:XioMessenger
get_dispatch_queue_max_age	xio/XioMessenger.h	/^  virtual double get_dispatch_queue_max_age(utime_t now)$/;"	f	class:XioMessenger
get_dispatch_stamp	Message.h	/^  const utime_t& get_dispatch_stamp() const { return dispatch_stamp; }$/;"	f	class:Message
get_dispatch_throttle_size	Message.h	/^  uint64_t get_dispatch_throttle_size() const { return dispatch_throttle_size; }$/;"	f	class:Message
get_dispatcher	async/rdma/RDMAStack.h	/^  RDMADispatcher *get_dispatcher() { return dispatcher; }$/;"	f	class:RDMAStack
get_driver	async/Event.h	/^  EventDriver *get_driver() { return driver; }$/;"	f	class:EventCenter
get_errno	async/dpdk/TCP.h	/^    int16_t get_errno() const {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::connection
get_errno	async/dpdk/TCP.h	/^    int16_t get_errno() const {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::listener
get_errno	async/dpdk/TCP.h	/^    int16_t get_errno() const {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::tcb
get_eventfd	async/dpdk/UserspaceEvent.cc	/^int UserspaceEventManager::get_eventfd()$/;"	f	class:UserspaceEventManager
get_family	msg_types.h	/^  int get_family() const {$/;"	f	struct:entity_addr_t
get_fd	async/rdma/Infiniband.h	/^    int get_fd() { return channel->fd; }$/;"	f	class:Infiniband::CompletionChannel
get_fd	async/rdma/RDMAStack.h	/^  int get_fd() { return server_setup_socket; }$/;"	f	class:RDMAServerSocketImpl
get_features	Connection.h	/^  uint64_t get_features() const { return features; }$/;"	f	struct:Connection
get_footer	Message.h	/^  ceph_msg_footer &get_footer() { return footer; }$/;"	f	class:Message
get_footer	Message.h	/^  const ceph_msg_footer &get_footer() const { return footer; }$/;"	f	class:Message
get_gid	async/rdma/Infiniband.h	/^  ibv_gid  get_gid() { return gid; }$/;"	f	class:Port
get_gid	async/rdma/Infiniband.h	/^  ibv_gid get_gid() { return active_port->get_gid(); }$/;"	f	class:Device
get_gid	async/rdma/Infiniband.h	/^  ibv_gid get_gid() { return device->get_gid(); }$/;"	f	class:Infiniband
get_gid_idx	async/rdma/Infiniband.h	/^  int get_gid_idx() { return active_port->get_gid_idx(); }$/;"	f	class:Device
get_gid_idx	async/rdma/Infiniband.h	/^  int get_gid_idx() { return gid_idx; }$/;"	f	class:Port
get_global_seq	async/AsyncMessenger.h	/^  __u32 get_global_seq(__u32 old=0) {$/;"	f	class:AsyncMessenger
get_global_seq	simple/SimpleMessenger.h	/^  __u32 get_global_seq(__u32 old=0) {$/;"	f	class:SimpleMessenger
get_header	Message.h	/^  ceph_msg_header &get_header() { return header; }$/;"	f	class:Message
get_header	Message.h	/^  const ceph_msg_header &get_header() const { return header; }$/;"	f	class:Message
get_header	async/dpdk/Packet.h	/^inline Header* Packet::get_header(size_t offset) {$/;"	f	class:Packet
get_header	async/dpdk/Packet.h	/^inline char* Packet::get_header(size_t offset, size_t size) {$/;"	f	class:Packet
get_hw_features	async/dpdk/DPDK.h	/^  hw_features get_hw_features() {$/;"	f	class:DPDKDevice
get_hw_features	async/dpdk/IP.cc	/^const hw_features& ipv4::get_hw_features() const$/;"	f	class:ipv4
get_hw_features	async/dpdk/TCP.h	/^  const hw_features& get_hw_features() const { return _inet._inet.get_hw_features(); }$/;"	f	class:tcp_state::tcp_option::option_kind::tcp
get_hw_features	async/dpdk/net.h	/^  const struct hw_features& get_hw_features() const { return _hw_features; }$/;"	f	class:interface
get_ib_physical_port	async/rdma/Infiniband.h	/^  uint8_t get_ib_physical_port() { return ib_physical_port; }$/;"	f	class:Infiniband
get_id	DispatchQueue.h	/^  uint64_t get_id() {$/;"	f	class:DispatchQueue
get_id	async/Event.h	/^  unsigned get_id() const { return idx; }$/;"	f	class:EventCenter
get_initial_psn	async/rdma/Infiniband.h	/^    uint32_t get_initial_psn() const { return initial_psn; };$/;"	f	class:Infiniband::QueuePair
get_isn	async/dpdk/TCP.h	/^tcp_sequence tcp<InetTraits>::tcb::get_isn() {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::tcb
get_lane	xio/XioPortal.h	/^    inline Lane* get_lane(XioConnection *xcon)$/;"	f	struct:XioPortal::SubmitQueue
get_last_keepalive	Connection.h	/^  utime_t get_last_keepalive() const {$/;"	f	struct:Connection
get_last_keepalive_ack	Connection.h	/^  utime_t get_last_keepalive_ack() const {$/;"	f	struct:Connection
get_last_unused	xio/XioPortal.h	/^  int get_last_unused()$/;"	f	class:XioPortals
get_level	xio/XioMessenger.cc	/^int get_level()$/;"	f	namespace:xio_log
get_lid	async/rdma/Infiniband.h	/^  uint16_t get_lid() { return active_port->get_lid(); }$/;"	f	class:Device
get_lid	async/rdma/Infiniband.h	/^  uint16_t get_lid() { return device->get_lid(); }$/;"	f	class:Infiniband
get_lid	async/rdma/Infiniband.h	/^  uint16_t get_lid() { return lid; }$/;"	f	class:Port
get_local_qp_number	async/rdma/Infiniband.h	/^    uint32_t get_local_qp_number() const { return qp->qp_num; };$/;"	f	class:Infiniband::QueuePair
get_loopback_connection	async/AsyncMessenger.cc	/^ConnectionRef AsyncMessenger::get_loopback_connection()$/;"	f	class:AsyncMessenger
get_loopback_connection	simple/SimpleMessenger.cc	/^ConnectionRef SimpleMessenger::get_loopback_connection()$/;"	f	class:SimpleMessenger
get_loopback_connection	xio/XioMessenger.cc	/^ConnectionRef XioMessenger::get_loopback_connection()$/;"	f	class:XioMessenger
get_magic	Message.h	/^  uint32_t get_magic() const { return magic; }$/;"	f	class:Message
get_magic	Messenger.h	/^  uint32_t get_magic() { return magic; }$/;"	f	class:Messenger
get_magic	xio/XioConnection.h	/^  uint32_t get_magic() { return magic; }$/;"	f	class:XioConnection
get_max_age	DispatchQueue.cc	/^double DispatchQueue::get_max_age(utime_t now) const {$/;"	f	class:DispatchQueue
get_max_encoded_length	xio/XioMsg.cc	/^\/*static*\/ size_t XioMsgHdr::get_max_encoded_length() {$/;"	f	class:XioMsgHdr
get_memory_manager	async/rdma/Infiniband.h	/^  MemoryManager* get_memory_manager() { return memory_manager; }$/;"	f	class:Infiniband
get_message	DispatchQueue.h	/^    Message *get_message() {$/;"	f	class:DispatchQueue::QueueItem
get_message	xio/XioMsg.h	/^  Message *get_message() { return m; }$/;"	f	struct:XioMsg
get_message_throttler	Message.h	/^  Throttle *get_message_throttler() { return msg_throttler; }$/;"	f	class:Message
get_messenger	Connection.h	/^  Messenger *get_messenger() {$/;"	f	struct:Connection
get_messenger	DispatchStrategy.h	/^  Messenger *get_messenger() { return msgr; }$/;"	f	class:DispatchStrategy
get_middle	Message.h	/^  bufferlist& get_middle() { return middle; }$/;"	f	class:Message
get_msg_count	xio/XioMsg.h	/^  virtual size_t get_msg_count() const {return 1;}$/;"	f	class:XioSend
get_myaddr	Messenger.h	/^  const entity_addr_t& get_myaddr() { return my_inst.addr; }$/;"	f	class:Messenger
get_myinst	Messenger.h	/^  const entity_inst_t& get_myinst() { return my_inst; }$/;"	f	class:Messenger
get_myname	Messenger.h	/^  const entity_name_t& get_myname() { return my_inst.name; }$/;"	f	class:Messenger
get_name	async/rdma/Infiniband.h	/^  const char* get_name() { return name;}$/;"	f	class:Device
get_nconns_per_portal	xio/XioMessenger.cc	/^int XioMessenger::get_nconns_per_portal(uint64_t cflags)$/;"	f	class:XioMessenger
get_need_addr	simple/SimpleMessenger.h	/^  bool get_need_addr() const { return need_addr; }$/;"	f	class:SimpleMessenger
get_next_portal	xio/XioPortal.h	/^  XioPortal* get_next_portal()$/;"	f	class:XioPortals
get_nonce	msg_types.h	/^  __u32 get_nonce() const { return nonce; }$/;"	f	struct:entity_addr_t
get_nportals	xio/XioMessenger.cc	/^int XioMessenger::get_nportals(uint64_t cflags)$/;"	f	class:XioMessenger
get_num_worker	async/Stack.h	/^  unsigned get_num_worker() const {$/;"	f	class:NetworkStack
get_offset	async/rdma/Infiniband.cc	/^uint32_t Infiniband::MemoryManager::Chunk::get_offset()$/;"	f	class:Infiniband::MemoryManager::Chunk
get_one_completed	async/dpdk/DPDK.h	/^    tx_buf* get_one_completed() {$/;"	f	class:DPDKQueuePair::tx_buf_factory
get_orig_source	Message.h	/^  entity_name_t get_orig_source() const {$/;"	f	class:Message
get_orig_source_addr	Message.h	/^  entity_addr_t get_orig_source_addr() const {$/;"	f	class:Message
get_orig_source_inst	Message.h	/^  entity_inst_t get_orig_source_inst() const {$/;"	f	class:Message
get_out_seq	simple/Pipe.h	/^    uint64_t get_out_seq() { return out_seq; }$/;"	f	class:Pipe
get_owner	async/Event.h	/^  pthread_t get_owner() const { return owner; }$/;"	f	class:EventCenter
get_packet	async/dpdk/ARP.cc	/^Tub<l3_protocol::l3packet> arp::get_packet()$/;"	f	class:arp
get_packet	async/dpdk/IP.cc	/^Tub<l3_protocol::l3packet> ipv4::get_packet() {$/;"	f	class:ipv4
get_packet	async/dpdk/TCP.h	/^Tub<typename InetTraits::l4packet> tcp<InetTraits>::tcb::get_packet() {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::tcb
get_payload	Message.h	/^  bufferlist& get_payload() { return payload; }$/;"	f	class:Message
get_peer	xio/XioConnection.h	/^  const entity_inst_t& get_peer() const { return peer; }$/;"	f	class:XioConnection
get_peer_addr	Connection.h	/^  const entity_addr_t& get_peer_addr() const { return peer_addr; }$/;"	f	struct:Connection
get_peer_addr	simple/Pipe.h	/^    entity_addr_t& get_peer_addr() { return peer_addr; }$/;"	f	class:Pipe
get_peer_type	Connection.h	/^  int get_peer_type() const { return peer_type; }$/;"	f	struct:Connection
get_perf_counter	async/AsyncConnection.h	/^  PerfCounters *get_perf_counter() {$/;"	f	class:AsyncConnection
get_perf_counter	async/Stack.h	/^  PerfCounters *get_perf_counter() { return perf_logger; }$/;"	f	class:Worker
get_pipe	simple/PipeConnection.cc	/^Pipe* PipeConnection::get_pipe()$/;"	f	class:PipeConnection
get_pool	xio/XioMsg.h	/^  XioPool& get_pool() { return rsp_pool; }$/;"	f	class:XioDispatchHook
get_port	msg_types.h	/^  int get_port() const {$/;"	f	struct:entity_addr_t
get_port_attr	async/rdma/Infiniband.h	/^  ibv_port_attr* get_port_attr() { return port_attr; }$/;"	f	class:Port
get_port_num	async/rdma/Infiniband.h	/^  int get_port_num() { return port_num; }$/;"	f	class:Port
get_portal	xio/XioMessenger.h	/^  XioPortal* get_portal() { return portals.get_next_portal(); }$/;"	f	class:XioMessenger
get_portals_len	xio/XioPortal.h	/^  int get_portals_len()$/;"	f	class:XioPortals
get_priority	Message.h	/^  unsigned get_priority() const { return header.priority; }$/;"	f	class:Message
get_priv	Connection.h	/^  RefCountedObject *get_priv() {$/;"	f	struct:Connection
get_proto_version	async/AsyncMessenger.cc	/^int AsyncMessenger::get_proto_version(int peer_type, bool connect) const$/;"	f	class:AsyncMessenger
get_proto_version	simple/SimpleMessenger.cc	/^int SimpleMessenger::get_proto_version(int peer_type, bool connect)$/;"	f	class:SimpleMessenger
get_qp	async/rdma/Infiniband.h	/^    ibv_qp* get_qp() const { return qp; }$/;"	f	class:Infiniband::QueuePair
get_qp_state	async/rdma/RDMAStack.h	/^  const char* get_qp_state() { return Infiniband::qp_state_string(qp->get_state()); }$/;"	f	class:RDMAConnectedSocketImpl
get_queue_len	DispatchQueue.h	/^  int get_queue_len() const {$/;"	f	class:DispatchQueue
get_recv_complete_stamp	Message.h	/^  const utime_t& get_recv_complete_stamp() const { return recv_complete_stamp; }$/;"	f	class:Message
get_recv_stamp	Message.h	/^  const utime_t& get_recv_stamp() const { return recv_stamp; }$/;"	f	class:Message
get_reged_mem	async/rdma/RDMAStack.cc	/^int RDMAWorker::get_reged_mem(RDMAConnectedSocketImpl *o, std::vector<Chunk*> &c, size_t bytes)$/;"	f	class:RDMAWorker
get_remote_lid	async/rdma/Infiniband.cc	/^int Infiniband::QueuePair::get_remote_lid(uint16_t *lid) const$/;"	f	class:Infiniband::QueuePair
get_remote_qp_number	async/rdma/Infiniband.cc	/^int Infiniband::QueuePair::get_remote_qp_number(uint32_t *rqp) const$/;"	f	class:Infiniband::QueuePair
get_rx_cq	async/rdma/Infiniband.h	/^    Infiniband::CompletionQueue* get_rx_cq() const { return rxcq; }$/;"	f	class:Infiniband::QueuePair
get_rx_cq	async/rdma/RDMAStack.h	/^  Infiniband::CompletionQueue* get_rx_cq() const { return rx_cq; }$/;"	f	class:RDMADispatcher
get_scount	xio/XioConnection.h	/^  uint64_t get_scount() { return scount; }$/;"	f	class:XioConnection
get_send_buffers	async/rdma/Infiniband.cc	/^int Infiniband::MemoryManager::get_send_buffers(std::vector<Chunk*> &c, size_t bytes)$/;"	f	class:Infiniband::MemoryManager
get_seq	Message.h	/^  uint64_t get_seq() const { return header.seq; }$/;"	f	class:Message
get_seq	xio/XioConnection.h	/^  uint64_t get_seq() {$/;"	f	class:XioLoopbackConnection
get_seq	xio/XioMsg.h	/^  XioInSeq& get_seq() { return msg_seq; }$/;"	f	class:XioDispatchHook
get_session_state	xio/XioConnection.h	/^    uint64_t get_session_state() {$/;"	f	class:XioConnection::CState
get_size	async/dpdk/TCP.cc	/^uint8_t tcp_option::get_size(bool syn_on, bool ack_on)$/;"	f	class:tcp_option
get_sockaddr	msg_types.h	/^  const sockaddr *get_sockaddr() const {$/;"	f	struct:entity_addr_t
get_sockaddr_len	msg_types.h	/^  size_t get_sockaddr_len() const {$/;"	f	struct:entity_addr_t
get_sockaddr_storage	msg_types.h	/^  sockaddr_storage get_sockaddr_storage() const {$/;"	f	struct:entity_addr_t
get_socket_priority	Messenger.h	/^  int get_socket_priority() {$/;"	f	class:Messenger
get_source	Message.h	/^  entity_name_t get_source() const {$/;"	f	class:Message
get_source_addr	Message.h	/^  entity_addr_t get_source_addr() const {$/;"	f	class:Message
get_source_inst	Message.h	/^  entity_inst_t get_source_inst() const {$/;"	f	class:Message
get_special_handling	xio/XioConnection.h	/^  uint32_t get_special_handling() { return special_handling; }$/;"	f	class:XioConnection
get_special_handling	xio/XioMessenger.h	/^  uint32_t get_special_handling() { return special_handling; }$/;"	f	class:XioMessenger
get_stack	async/AsyncMessenger.h	/^  NetworkStack *get_stack() {$/;"	f	class:AsyncMessenger
get_stack	async/rdma/RDMAStack.h	/^  RDMAStack *get_stack() { return stack; }$/;"	f	class:RDMAWorker
get_stack	async/rdma/RDMAStack.h	/^  RDMAStack* get_stack() { return stack; }$/;"	f	class:RDMADispatcher
get_startup_state	xio/XioConnection.h	/^    uint64_t get_startup_state() {$/;"	f	class:XioConnection::CState
get_state	async/rdma/Infiniband.cc	/^int Infiniband::QueuePair::get_state() const$/;"	f	class:Infiniband::QueuePair
get_state_name	async/AsyncConnection.h	/^  static const char *get_state_name(int state) {$/;"	f	class:AsyncConnection
get_state_name	simple/Pipe.h	/^    const char *get_state_name() {$/;"	f	class:Pipe
get_state_name	simple/Pipe.h	/^    static const char *get_state_name(int s) {$/;"	f	class:Pipe
get_tcp	async/dpdk/IP.h	/^  tcp<ipv4_traits>& get_tcp() { return *_tcp._tcp; }$/;"	f	class:ipv4
get_throttle_stamp	Message.h	/^  const utime_t& get_throttle_stamp() const { return throttle_stamp; }$/;"	f	class:Message
get_tid	Message.h	/^  uint64_t get_tid() const { return header.tid; }$/;"	f	class:Message
get_trace_endpoint	Messenger.h	/^  const ZTracer::Endpoint* get_trace_endpoint() const {$/;"	f	class:Messenger
get_transmit_packet	async/dpdk/TCP.h	/^Packet tcp<InetTraits>::tcb::get_transmit_packet() {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::tcb
get_tx_buf	async/dpdk/DPDK.h	/^  tx_buf* get_tx_buf() { return _tx_buf_factory.get(); }$/;"	f	class:DPDKQueuePair
get_tx_buffer_size	async/rdma/Infiniband.h	/^    uint32_t get_tx_buffer_size() const {$/;"	f	class:Infiniband::MemoryManager
get_tx_buffers	async/rdma/Infiniband.cc	/^int Infiniband::get_tx_buffers(std::vector<Chunk*> &c, size_t bytes)$/;"	f	class:Infiniband
get_tx_chunk_by_buffer	async/rdma/Infiniband.h	/^    Chunk *get_tx_chunk_by_buffer(const char *c) {$/;"	f	class:Infiniband::MemoryManager
get_tx_chunk_by_buffer	async/rdma/Infiniband.h	/^  Chunk *get_tx_chunk_by_buffer(const char *c) { return memory_manager->get_tx_chunk_by_buffer(c); }$/;"	f	class:Infiniband
get_tx_cq	async/rdma/Infiniband.h	/^    Infiniband::CompletionQueue* get_tx_cq() const { return txcq; }$/;"	f	class:Infiniband::QueuePair
get_tx_cq	async/rdma/RDMAStack.h	/^  Infiniband::CompletionQueue* get_tx_cq() const { return tx_cq; }$/;"	f	class:RDMADispatcher
get_type	Message.h	/^  int get_type() const { return header.type; }$/;"	f	class:Message
get_type	msg_types.h	/^  uint32_t get_type() const { return type; }$/;"	f	struct:entity_addr_t
get_type_name	msg_types.h	/^  static const char *get_type_name(int t) {$/;"	f	struct:entity_addr_t
get_vec	xio/XioPortal.h	/^  const char **get_vec()$/;"	f	class:XioPortals
get_wc	async/rdma/RDMAConnectedSocketImpl.cc	/^void RDMAConnectedSocketImpl::get_wc(std::vector<ibv_wc> &w)$/;"	f	class:RDMAConnectedSocketImpl
get_worker	async/Stack.cc	/^Worker* NetworkStack::get_worker()$/;"	f	class:NetworkStack
get_worker	async/Stack.h	/^  Worker *get_worker(unsigned i) {$/;"	f	class:NetworkStack
get_xhook	xio/XioMsg.h	/^  XioDispatchHook* get_xhook() { return xhook; }$/;"	f	struct:XioCompletion
get_xio_msg	xio/XioMsg.h	/^  const struct xio_msg * get_xio_msg() const {return &req_0.msg;}$/;"	f	class:XioSend
get_xio_msg	xio/XioMsg.h	/^  struct xio_msg * get_xio_msg() {return &req_0.msg;}$/;"	f	class:XioSend
gid	async/rdma/Infiniband.h	/^  union ibv_gid gid;$/;"	m	class:Port	typeref:union:Port::ibv_gid
gid	async/rdma/Infiniband.h	/^  union ibv_gid gid;$/;"	m	struct:IBSYNMsg	typeref:union:IBSYNMsg::ibv_gid
gid_idx	async/rdma/Infiniband.h	/^  int gid_idx;$/;"	m	class:Port
gid_to_wire_gid	async/rdma/Infiniband.cc	/^void Infiniband::gid_to_wire_gid(const union ibv_gid *gid, char wgid[])$/;"	f	class:Infiniband
global_centers	async/Event.h	/^  AssociatedCenters *global_centers = nullptr;$/;"	m	class:EventCenter
global_infiniband	async/rdma/RDMAStack.cc	/^static Tub<Infiniband> global_infiniband;$/;"	v	file:
global_seq	async/AsyncConnection.h	/^  int global_seq;$/;"	m	class:AsyncConnection
global_seq	async/AsyncMessenger.h	/^  __u32 global_seq;$/;"	m	class:AsyncMessenger
global_seq	simple/SimpleMessenger.h	/^  __u32 global_seq;$/;"	m	class:SimpleMessenger
global_seq	xio/XioConnection.h	/^    uint32_t connect_seq, global_seq, peer_global_seq;$/;"	m	class:XioConnection::CState
global_seq_lock	async/AsyncMessenger.h	/^  ceph_spinlock_t global_seq_lock;$/;"	m	class:AsyncMessenger
global_seq_lock	simple/SimpleMessenger.h	/^  ceph_spinlock_t global_seq_lock;$/;"	m	class:SimpleMessenger
got_bad_auth	async/AsyncConnection.h	/^  bool got_bad_auth;$/;"	m	class:AsyncConnection
gw_address	async/dpdk/IP.h	/^  ipv4_address gw_address() const {$/;"	f	class:ipv4
halt_delivery	simple/Pipe.h	/^    bool halt_delivery; \/\/if a pipe's queue is destroyed, stop adding to it$/;"	m	class:Pipe
handle	xio/XioPool.h	/^  struct xio_mempool *handle;$/;"	m	class:XioPool	typeref:struct:XioPool::xio_mempool
handle_ack	async/AsyncConnection.cc	/^void AsyncConnection::handle_ack(uint64_t seq)$/;"	f	class:AsyncConnection
handle_ack	simple/Pipe.cc	/^void Pipe::handle_ack(uint64_t seq)$/;"	f	class:Pipe
handle_async_event	async/rdma/RDMAStack.cc	/^void RDMADispatcher::handle_async_event()$/;"	f	class:RDMADispatcher
handle_connect_msg	async/AsyncConnection.cc	/^ssize_t AsyncConnection::handle_connect_msg(ceph_msg_connect &connect, bufferlist &authorizer_bl,$/;"	f	class:AsyncConnection
handle_connect_reply	async/AsyncConnection.cc	/^int AsyncConnection::handle_connect_reply(ceph_msg_connect &connect, ceph_msg_connect_reply &reply)$/;"	f	class:AsyncConnection
handle_connection	async/rdma/RDMAConnectedSocketImpl.cc	/^void RDMAConnectedSocketImpl::handle_connection() {$/;"	f	class:RDMAConnectedSocketImpl
handle_data_msg	xio/XioConnection.cc	/^int XioConnection::handle_data_msg(struct xio_session *session,$/;"	f	class:XioConnection
handle_pending_message	async/rdma/RDMAStack.cc	/^void RDMAWorker::handle_pending_message()$/;"	f	class:RDMAWorker
handle_received_packet	async/dpdk/IP.cc	/^int ipv4::handle_received_packet(Packet p, ethernet_address from)$/;"	f	class:ipv4
handle_request	async/dpdk/ARP.h	/^int arp_for<L3>::handle_request(arp_hdr* ah) {$/;"	f	class:arp_for
handle_stats	async/dpdk/DPDK.cc	/^void DPDKQueuePair::handle_stats()$/;"	f	class:DPDKQueuePair
handle_tx_event	async/rdma/RDMAStack.cc	/^void RDMADispatcher::handle_tx_event(ibv_wc *cqe, int n)$/;"	f	class:RDMADispatcher
handle_write	async/AsyncConnection.cc	/^void AsyncConnection::handle_write()$/;"	f	class:AsyncConnection
handler	async/PosixStack.cc	/^  NetHandler &handler;$/;"	m	class:PosixServerSocketImpl	file:
handler	async/PosixStack.cc	/^  NetHandler &handler;$/;"	m	class:final	file:
has_feature	Connection.h	/^  bool has_feature(uint64_t f) const { return features & f; }$/;"	f	struct:Connection
has_features	Connection.h	/^  bool has_features(uint64_t f) const {$/;"	f	struct:Connection
has_pending_data	simple/Pipe.h	/^    bool has_pending_data() { return recv_len > recv_ofs; }$/;"	f	class:Pipe
hash	async/dpdk/IP.h	/^  uint32_t hash(const rss_key_type& rss_key) {$/;"	f	struct:l4connid
hash	async/dpdk/IP.h	/^struct ipv4_frag_id::hash : private std::hash<ipv4_address>,$/;"	s	class:ipv4_frag_id
hash	async/dpdk/ip_types.h	/^  struct hash<ipv4_address> {$/;"	s	namespace:std
hash	async/dpdk/shared_ptr.h	/^  struct hash<lw_shared_ptr<T>> : private hash<T*> {$/;"	s	namespace:std
hash	msg_types.h	/^  template<> struct hash< entity_addr_t >$/;"	s	namespace:std
hash	msg_types.h	/^  template<> struct hash< entity_inst_t >$/;"	s	namespace:std
hash	msg_types.h	/^  template<> struct hash< entity_name_t >$/;"	s	namespace:std
hash2cpu	async/dpdk/DPDK.h	/^  unsigned hash2cpu(uint32_t hash) {$/;"	f	class:DPDKDevice
hash2cpu	async/dpdk/net.cc	/^unsigned interface::hash2cpu(uint32_t hash) {$/;"	f	class:interface
hash2qid	async/dpdk/DPDK.h	/^  unsigned hash2qid(uint32_t hash) {$/;"	f	class:DPDKDevice
hdr	xio/XioMsg.h	/^  XioMsgHdr hdr;$/;"	m	struct:XioMsg
hdr	xio/XioMsg.h	/^  ceph_msg_header* hdr;$/;"	m	class:XioMsgHdr
head	xio/XioInSeq.h	/^  struct xio_msg* head;$/;"	m	class:XioInSeq	typeref:struct:XioInSeq::xio_msg
header	Message.h	/^  ceph_msg_header  header;           \/\/ 消息头$/;"	m	class:Message
header	async/dpdk/IP.h	/^    Packet header;$/;"	m	struct:ipv4::frag
headroom	async/dpdk/Packet.h	/^    unsigned headroom = internal_data_size; \/\/ in data$/;"	m	struct:Packet::impl
hlen	async/dpdk/ARP.h	/^    uint8_t hlen;$/;"	m	struct:arp_for::arp_hdr
hook_cnt	xio/XioPool.h	/^  std::atomic<unsigned> hook_cnt = { 0 }; \/\/ recv msgs$/;"	m	class:XioPoolStats
host_address	async/dpdk/IP.h	/^  ipv4_address host_address() {$/;"	f	class:ipv4
hton	async/dpdk/ARP.h	/^    arp_hdr hton() {$/;"	f	struct:arp::arp_hdr
hton	async/dpdk/ARP.h	/^    arp_hdr hton() {$/;"	f	struct:arp_for::arp_hdr
hton	async/dpdk/IP.h	/^  ip_hdr hton() {$/;"	f	class:ip_hdr::frag_bits
hton	async/dpdk/TCP.h	/^    struct mss hton() {$/;"	f	struct:tcp_state::tcp_option::option_kind::option_len::mss
hton	async/dpdk/TCP.h	/^  tcp_hdr hton() {$/;"	f	struct:tcp_state::tcp_option::option_kind::tcp_hdr
hton	async/dpdk/TCP.h	/^tcp_sequence hton(tcp_sequence ts) {$/;"	f	class:tcp_state::tcp_option::option_kind
hton	async/dpdk/byteorder.h	/^inline int16_t hton(int16_t x) { return htons(x); }$/;"	f
hton	async/dpdk/byteorder.h	/^inline int32_t hton(int32_t x) { return htonl(x); }$/;"	f
hton	async/dpdk/byteorder.h	/^inline int64_t hton(int64_t x) { return htonq(x); }$/;"	f
hton	async/dpdk/byteorder.h	/^inline int8_t hton(int8_t x) { return x; }$/;"	f
hton	async/dpdk/byteorder.h	/^inline uint16_t hton(uint16_t x) { return htons(x); }$/;"	f
hton	async/dpdk/byteorder.h	/^inline uint32_t hton(uint32_t x) { return htonl(x); }$/;"	f
hton	async/dpdk/byteorder.h	/^inline uint64_t hton(uint64_t x) { return htonq(x); }$/;"	f
hton	async/dpdk/byteorder.h	/^inline uint8_t hton(uint8_t x) { return x; }$/;"	f
hton	async/dpdk/byteorder.h	/^inline void hton() {}$/;"	f
hton	async/dpdk/ethernet.h	/^  eth_hdr hton() {$/;"	f	struct:eth_hdr
hton	async/dpdk/ethernet.h	/^  ethernet_address hton() {$/;"	f	struct:ethernet_address
hton	async/dpdk/ip_types.h	/^  ipv4_address hton() {$/;"	f	struct:ipv4_address
htonq	async/dpdk/byteorder.h	/^inline uint64_t htonq(uint64_t v) {$/;"	f
htype	async/dpdk/ARP.h	/^    uint16_t htype;$/;"	m	struct:arp::arp_hdr
htype	async/dpdk/ARP.h	/^    uint16_t htype;$/;"	m	struct:arp_for::arp_hdr
huge_page_size	async/dpdk/DPDK.cc	/^static size_t huge_page_size = 512 * CEPH_PAGE_SIZE;$/;"	v	file:
hw_address	async/dpdk/DPDK.h	/^  ethernet_address hw_address() {$/;"	f	class:DPDKDevice
hw_address	async/dpdk/net.h	/^  ethernet_address hw_address() { return _hw_address; }$/;"	f	class:interface
hw_features	async/dpdk/net.h	/^struct hw_features {$/;"	s
hw_features_ref	async/dpdk/DPDK.h	/^  hw_features& hw_features_ref() { return _hw_features; }$/;"	f	class:DPDKDevice
hw_queues_count	async/dpdk/DPDK.h	/^  uint16_t hw_queues_count() { return _num_queues; }$/;"	f	class:DPDKDevice
hw_queues_count	async/dpdk/net.cc	/^uint16_t interface::hw_queues_count() const {$/;"	f	class:interface
i40e_max_xmit_segment_frags	async/dpdk/DPDK.cc	/^static constexpr uint8_t i40e_max_xmit_segment_frags = 8;$/;"	v	file:
i40e_should_linearize	async/dpdk/DPDK.cc	/^bool DPDKQueuePair::tx_buf::i40e_should_linearize(rte_mbuf *head)$/;"	f	class:DPDKQueuePair::tx_buf
ib_physical_port	async/rdma/Infiniband.h	/^    int ib_physical_port;$/;"	m	class:Infiniband::QueuePair
ib_physical_port	async/rdma/Infiniband.h	/^  uint8_t  ib_physical_port = 0;$/;"	m	class:Infiniband
icmp	async/dpdk/IP.h	/^  explicit icmp(CephContext *c, inet_type& inet)$/;"	f	class:icmp
icmp	async/dpdk/IP.h	/^class icmp {$/;"	c
icmp	async/dpdk/const.h	/^  icmp = 1, tcp = 6, unused = 255$/;"	m	class:ip_protocol_num
icmp_hdr	async/dpdk/IP.h	/^struct icmp_hdr {$/;"	s
id	async/Event.h	/^    uint64_t id;$/;"	m	struct:EventCenter::TimeEvent
id	async/Stack.h	/^  unsigned id;$/;"	m	class:Worker
id	async/dpdk/DPDKStack.h	/^    unsigned id;$/;"	m	struct:DPDKWorker::Impl
id	async/dpdk/IP.h	/^  uint16_t id;$/;"	m	struct:ip_hdr
identification	async/dpdk/IP.h	/^  uint16_t identification;$/;"	m	struct:ipv4_frag_id
idx	async/Event.h	/^  unsigned idx;$/;"	m	class:EventCenter
idx	async/dpdk/circular_buffer.h	/^    size_t idx;$/;"	m	struct:circular_buffer::cbiterator
ihl	async/dpdk/IP.h	/^  uint8_t ihl : 4;$/;"	m	struct:ip_hdr
impl	async/dpdk/Packet.h	/^  struct impl {$/;"	s	class:Packet
impl	async/dpdk/Packet.h	/^inline Packet::impl::impl(fragment frag, size_t nr_frags)$/;"	f	class:Packet::impl
impl	async/dpdk/Packet.h	/^inline Packet::impl::impl(size_t nr_frags)$/;"	f	class:Packet::impl
impl	async/dpdk/circular_buffer.h	/^  struct impl : Alloc {$/;"	s	class:circular_buffer
in4_addr	msg_types.h	/^  const sockaddr_in &in4_addr() const{$/;"	f	struct:entity_addr_t
in4_addr	msg_types.h	/^  sockaddr_in &in4_addr() {$/;"	f	struct:entity_addr_t
in6_addr	msg_types.h	/^  const sockaddr_in6 &in6_addr() const{$/;"	f	struct:entity_addr_t
in6_addr	msg_types.h	/^  sockaddr_in6 &in6_addr(){$/;"	f	struct:entity_addr_t
in_my_netmask	async/dpdk/IP.h	/^  bool in_my_netmask(ipv4_address a) const {$/;"	f	class:ipv4
in_q	simple/Pipe.h	/^    DispatchQueue *in_q;$/;"	m	class:Pipe
in_seq	simple/Pipe.h	/^    uint64_t in_seq, in_seq_acked;$/;"	m	class:Pipe
in_seq	xio/XioConnection.h	/^    uint64_t in_seq, out_seq_acked; \/\/ atomic<uint64_t>, got receipt$/;"	m	class:XioConnection::CState
in_seq	xio/XioConnection.h	/^    uint64_t in_seq, out_seq_acked; \/\/ atomic<uint64_t>, got receipt$/;"	m	struct:XioConnection::lifecycle
in_seq	xio/XioConnection.h	/^  XioInSeq in_seq;$/;"	m	class:XioConnection
in_seq_acked	simple/Pipe.h	/^    uint64_t in_seq, in_seq_acked;$/;"	m	class:Pipe
in_state	async/dpdk/TCP.h	/^    bool in_state(tcp_state state) {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::tcb
in_thread	async/Event.h	/^  inline bool in_thread() const {$/;"	f	class:EventCenter
inactive_timeout_us	async/AsyncConnection.h	/^  const uint64_t inactive_timeout_us;$/;"	m	class:AsyncConnection
inc	xio/XioPool.h	/^  void inc(uint64_t size) {$/;"	f	class:XioPoolStats
inc_hookcnt	xio/XioPool.h	/^  void inc_hookcnt() {$/;"	f	class:XioPoolStats
inc_msgcnt	xio/XioPool.h	/^  void inc_msgcnt() {$/;"	f	class:XioPoolStats
inc_overflow	xio/XioPool.h	/^  void inc_overflow() { ctr_set[SLAB_OVERFLOW]++; }$/;"	f	class:XioPoolStats
infiniband	async/rdma/Infiniband.h	/^    Infiniband&  infiniband;     \/\/ Infiniband to which this QP belongs$/;"	m	class:Infiniband::CompletionQueue
infiniband	async/rdma/Infiniband.h	/^    Infiniband&  infiniband;     \/\/ Infiniband to which this QP belongs$/;"	m	class:Infiniband::QueuePair
infiniband	async/rdma/Infiniband.h	/^    Infiniband& infiniband;$/;"	m	class:Infiniband::CompletionChannel
infiniband	async/rdma/RDMAStack.h	/^  Infiniband* infiniband;$/;"	m	class:RDMAConnectedSocketImpl
infiniband	async/rdma/RDMAStack.h	/^  Infiniband* infiniband;$/;"	m	class:RDMAServerSocketImpl
inflight	async/rdma/RDMAStack.h	/^  std::atomic<uint64_t> inflight = {0};$/;"	m	class:RDMADispatcher
init	async/Event.cc	/^int EventCenter::init(int n, unsigned i, const std::string &t)$/;"	f	class:EventCenter
init	async/EventEpoll.cc	/^int EpollDriver::init(EventCenter *c, int nevent)$/;"	f	class:EpollDriver
init	async/EventKqueue.cc	/^int KqueueDriver::init(EventCenter *c, int nevent)$/;"	f	class:KqueueDriver
init	async/EventSelect.cc	/^int SelectDriver::init(EventCenter *c, int nevent)$/;"	f	class:SelectDriver
init	async/Stack.h	/^  bool init = false;$/;"	m	class:Worker
init	async/dpdk/EventDPDK.cc	/^int DPDKDriver::init(EventCenter *c, int nevent)$/;"	f	class:DPDKDriver
init	async/dpdk/dpdk_rte.cc	/^  int eal::init(CephContext *c)$/;"	f	class:dpdk::eal
init	async/rdma/Infiniband.cc	/^int Infiniband::CompletionChannel::init()$/;"	f	class:Infiniband::CompletionChannel
init	async/rdma/Infiniband.cc	/^int Infiniband::CompletionQueue::init()$/;"	f	class:Infiniband::CompletionQueue
init	async/rdma/Infiniband.cc	/^int Infiniband::QueuePair::init()$/;"	f	class:Infiniband::QueuePair
init	async/rdma/Infiniband.cc	/^void Infiniband::init()$/;"	f	class:Infiniband
init_cond	async/Stack.h	/^  std::condition_variable init_cond;$/;"	m	class:Worker
init_done	async/Stack.h	/^  void init_done() {$/;"	f	class:Worker
init_factory	async/dpdk/DPDK.h	/^    void init_factory() {$/;"	f	class:DPDKQueuePair::tx_buf_factory
init_from_options	async/dpdk/TCP.h	/^void tcp<InetTraits>::tcb::init_from_options(tcp_hdr* th, uint8_t* opt_start, uint8_t* opt_end) {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::tcb
init_local_connection	async/AsyncMessenger.h	/^  void init_local_connection() {$/;"	f	class:AsyncMessenger
init_local_connection	simple/SimpleMessenger.cc	/^void SimpleMessenger::init_local_connection()$/;"	f	class:SimpleMessenger
init_local_queue	async/dpdk/DPDK.h	/^  std::unique_ptr<DPDKQueuePair> init_local_queue(CephContext *c, EventCenter *center, string hugepages, uint16_t qid) {$/;"	f	class:DPDKDevice
init_lock	async/Stack.h	/^  std::mutex init_lock;$/;"	m	class:Worker
init_noninline_rx_mbuf	async/dpdk/DPDK.h	/^  static bool init_noninline_rx_mbuf(rte_mbuf* m, size_t size,$/;"	f	class:DPDKQueuePair
init_port_fini	async/dpdk/DPDK.cc	/^int DPDKDevice::init_port_fini()$/;"	f	class:DPDKDevice
init_port_start	async/dpdk/DPDK.cc	/^int DPDKDevice::init_port_start()$/;"	f	class:DPDKDevice
init_rx_mbuf_pool	async/dpdk/DPDK.cc	/^bool DPDKQueuePair::init_rx_mbuf_pool()$/;"	f	class:DPDKQueuePair
initial	async/dpdk/TCP.h	/^      tcp_sequence initial;$/;"	m	struct:tcp_state::tcp_option::option_kind::tcp::tcb::receive
initial	async/dpdk/TCP.h	/^      tcp_sequence initial;$/;"	m	struct:tcp_state::tcp_option::option_kind::tcp::tcb::send
initial_psn	async/rdma/Infiniband.h	/^    uint32_t     initial_psn;    \/\/ initial packet sequence number$/;"	m	class:Infiniband::QueuePair
initialize	async/PosixStack.cc	/^void PosixWorker::initialize()$/;"	f	class:PosixWorker
initialize	async/Stack.h	/^  virtual void initialize() {}$/;"	f	class:Worker
initialize	async/dpdk/DPDKStack.cc	/^void DPDKWorker::initialize()$/;"	f	class:DPDKWorker
initialize	async/rdma/RDMAStack.cc	/^void RDMAWorker::initialize()$/;"	f	class:RDMAWorker
initialized	async/dpdk/dpdk_rte.cc	/^  bool eal::initialized = false;$/;"	m	class:dpdk::eal	file:
initialized	async/dpdk/dpdk_rte.h	/^  static bool initialized;$/;"	m	class:dpdk::eal
initialized	async/rdma/Infiniband.h	/^  bool initialized = false;$/;"	m	class:Infiniband
initialized	xio/XioMessenger.cc	/^std::atomic<bool> initialized = { false };$/;"	v
inject_delay	async/AsyncConnection.cc	/^void AsyncConnection::inject_delay() {$/;"	f	class:AsyncConnection
inline_mbuf_data_size	async/dpdk/DPDK.cc	/^static constexpr size_t inline_mbuf_data_size = 2048;$/;"	v	file:
inline_mbuf_size	async/dpdk/DPDK.cc	/^static constexpr uint16_t inline_mbuf_size = inline_mbuf_data_size + mbuf_overhead;$/;"	v	file:
input_handle_listen_state	async/dpdk/TCP.cc	/^void tcp<InetTraits>::tcb::input_handle_listen_state(tcp_hdr* th, Packet p)$/;"	f	class:tcp::tcb
input_handle_other_state	async/dpdk/TCP.cc	/^void tcp<InetTraits>::tcb::input_handle_other_state(tcp_hdr* th, Packet p)$/;"	f	class:tcp::tcb
input_handle_syn_sent_state	async/dpdk/TCP.cc	/^void tcp<InetTraits>::tcb::input_handle_syn_sent_state(tcp_hdr* th, Packet p)$/;"	f	class:tcp::tcb
insert_out_of_order	async/dpdk/TCP.h	/^void tcp<InetTraits>::tcb::insert_out_of_order(tcp_sequence seg, Packet p) {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::tcb
interface	async/dpdk/net.cc	/^interface::interface(CephContext *c, std::shared_ptr<DPDKDevice> dev, EventCenter *center)$/;"	f	class:interface
interface	async/dpdk/net.h	/^class interface {$/;"	c
internal_data_size	async/dpdk/Packet.cc	/^constexpr size_t Packet::internal_data_size;$/;"	m	class:Packet	file:
internal_data_size	async/dpdk/Packet.h	/^  static constexpr size_t internal_data_size = 128 - 16;$/;"	m	class:Packet
iovs	xio/XioMsg.h	/^  struct xio_iovec_ex iovs[XIO_MSGR_IOVLEN];$/;"	m	struct:xio_msg_ex	typeref:struct:xio_msg_ex::xio_iovec_ex
ip	async/dpdk/ip_types.h	/^  uint32_t ip;$/;"	m	struct:ipv4_addr
ip	async/dpdk/ip_types.h	/^  uint32_t ip;$/;"	m	struct:ipv4_address
ip_checksum	async/dpdk/IPChecksum.cc	/^uint16_t ip_checksum(const void* data, size_t len) {$/;"	f
ip_hdr	async/dpdk/IP.h	/^struct ip_hdr {$/;"	s
ip_hdr_len	async/dpdk/Packet.h	/^  uint8_t ip_hdr_len = 20;$/;"	m	struct:offload_info
ip_hdr_len_min	async/dpdk/IP.h	/^  static constexpr uint8_t ip_hdr_len_min = ipv4_hdr_len_min;$/;"	m	struct:ipv4_traits
ip_packet_filter	async/dpdk/IP.h	/^struct ip_packet_filter {$/;"	s
ip_packet_len_max	async/dpdk/const.h	/^const uint16_t ip_packet_len_max = 65535;$/;"	m	class:ip_protocol_num::eth_protocol_num
ip_proto	async/dpdk/IP.h	/^  uint8_t ip_proto;$/;"	m	class:ip_hdr::frag_bits
ip_protocol	async/dpdk/IP.h	/^class ip_protocol {$/;"	c
ip_protocol_num	async/dpdk/const.h	/^enum class ip_protocol_num : uint8_t {$/;"	c
ipv4	async/dpdk/IP.cc	/^ipv4::ipv4(CephContext *c, EventCenter *cen, interface* netif)$/;"	f	class:ipv4
ipv4	async/dpdk/IP.h	/^class ipv4 {$/;"	c
ipv4	async/dpdk/const.h	/^  ipv4 = 0x0800, arp = 0x0806, ipv6 = 0x86dd$/;"	m	class:ip_protocol_num::eth_protocol_num
ipv4_addr	async/dpdk/ip_types.h	/^  ipv4_addr() : ip(0), port(0) {}$/;"	f	struct:ipv4_addr
ipv4_addr	async/dpdk/ip_types.h	/^  ipv4_addr(const entity_addr_t &ad) {$/;"	f	struct:ipv4_addr
ipv4_addr	async/dpdk/ip_types.h	/^  ipv4_addr(entity_addr_t &&addr) : ipv4_addr(addr) {}$/;"	f	struct:ipv4_addr
ipv4_addr	async/dpdk/ip_types.h	/^  ipv4_addr(uint16_t port) : ip(0), port(port) {}$/;"	f	struct:ipv4_addr
ipv4_addr	async/dpdk/ip_types.h	/^  ipv4_addr(uint32_t ip, uint16_t port) : ip(ip), port(port) {}$/;"	f	struct:ipv4_addr
ipv4_addr	async/dpdk/ip_types.h	/^struct ipv4_addr {$/;"	s
ipv4_address	async/dpdk/ip_types.h	/^  explicit ipv4_address(const std::string& addr) {$/;"	f	struct:ipv4_address
ipv4_address	async/dpdk/ip_types.h	/^  explicit ipv4_address(uint32_t ip) : ip(ip) {}$/;"	f	struct:ipv4_address
ipv4_address	async/dpdk/ip_types.h	/^  ipv4_address() : ip(0) {}$/;"	f	struct:ipv4_address
ipv4_address	async/dpdk/ip_types.h	/^  ipv4_address(ipv4_addr addr) {$/;"	f	struct:ipv4_address
ipv4_address	async/dpdk/ip_types.h	/^struct ipv4_address {$/;"	s
ipv4_frag_id	async/dpdk/IP.h	/^struct ipv4_frag_id {$/;"	s
ipv4_hdr_len_min	async/dpdk/const.h	/^const uint8_t ipv4_hdr_len_min = 20;$/;"	m	class:ip_protocol_num::eth_protocol_num
ipv4_icmp	async/dpdk/IP.h	/^  ipv4_icmp(CephContext *c, ipv4& inet) : cct(c), _inet_l4(inet), _icmp(c, _inet_l4) {}$/;"	f	class:final
ipv4_l4	async/dpdk/IP.h	/^  ipv4_l4(ipv4& inet) : _inet(inet) {}$/;"	f	class:ipv4_l4
ipv4_l4	async/dpdk/IP.h	/^class ipv4_l4 {$/;"	c
ipv4_tag	async/dpdk/IP.h	/^struct ipv4_tag {};$/;"	s
ipv4_tcp	async/dpdk/TCP.cc	/^ipv4_tcp::ipv4_tcp(ipv4& inet, EventCenter *c)$/;"	f	class:ipv4_tcp
ipv4_traits	async/dpdk/IP.h	/^struct ipv4_traits {$/;"	s
ipv6	async/dpdk/const.h	/^  ipv4 = 0x0800, arp = 0x0806, ipv6 = 0x86dd$/;"	m	class:ip_protocol_num::eth_protocol_num
ipv6_hdr_len_min	async/dpdk/const.h	/^const uint8_t ipv6_hdr_len_min = 40;$/;"	m	class:ip_protocol_num::eth_protocol_num
is_all_data_acked	async/dpdk/TCP.h	/^bool tcp<InetTraits>::tcb::is_all_data_acked() {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::tcb
is_blank_ip	msg_types.h	/^  bool is_blank_ip() const {$/;"	f	struct:entity_addr_t
is_client	msg_types.h	/^  bool is_client() const { return type() == TYPE_CLIENT; }$/;"	f	class:entity_name_t
is_code	DispatchQueue.h	/^    bool is_code() const {$/;"	f	class:DispatchQueue::QueueItem
is_complete	async/dpdk/IP.cc	/^bool ipv4::frag::is_complete() {$/;"	f	class:ipv4::frag
is_connected	async/Stack.h	/^  int is_connected() {$/;"	f	class:ConnectedSocket
is_connected	async/dpdk/TCP.h	/^    int is_connected() const { return _tcb->is_connected(); }$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::connection
is_connected	async/dpdk/TCP.h	/^    int is_connected() const {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::tcb
is_connected	simple/Pipe.h	/^    bool is_connected() {$/;"	f	class:Pipe
is_connected	simple/PipeConnection.cc	/^bool PipeConnection::is_connected()$/;"	f	class:PipeConnection
is_connected	simple/SimpleMessenger.cc	/^bool SimpleMessenger::is_connected(Connection *con)$/;"	f	class:SimpleMessenger
is_dead	async/rdma/Infiniband.h	/^    bool is_dead() const { return dead; }$/;"	f	class:Infiniband::QueuePair
is_error	async/rdma/Infiniband.cc	/^bool Infiniband::QueuePair::is_error() const$/;"	f	class:Infiniband::QueuePair
is_flushing	simple/Pipe.cc	/^  bool is_flushing() {$/;"	f	class:Pipe::DelayedDelivery
is_i40e_device	async/dpdk/DPDK.h	/^  bool is_i40e_device() const {$/;"	f	class:DPDKDevice
is_init	async/Stack.h	/^  bool is_init() {$/;"	f	class:Worker
is_ip	msg_types.h	/^  bool is_ip() const {$/;"	f	struct:entity_addr_t
is_mds	msg_types.h	/^  bool is_mds() const { return type() == TYPE_MDS; }$/;"	f	class:entity_name_t
is_mgr	msg_types.h	/^  bool is_mgr() const { return type() == TYPE_MGR; }$/;"	f	class:entity_name_t
is_mon	msg_types.h	/^  bool is_mon() const { return type() == TYPE_MON; }$/;"	f	class:entity_name_t
is_my_buffer	async/rdma/Infiniband.h	/^      bool is_my_buffer(const char *c) const {$/;"	f	class:Infiniband::MemoryManager::Cluster
is_new	msg_types.h	/^  bool is_new() const { return num() < 0; }$/;"	f	class:entity_name_t
is_osd	msg_types.h	/^  bool is_osd() const { return type() == TYPE_OSD; }$/;"	f	class:entity_name_t
is_pending	async/rdma/RDMAStack.h	/^  bool is_pending() {return pending;}$/;"	f	class:RDMAConnectedSocketImpl
is_queued	async/AsyncConnection.h	/^  bool is_queued() const {$/;"	f	class:AsyncConnection
is_queued	simple/Pipe.h	/^    bool is_queued() { return !out_q.empty() || send_keepalive || send_keepalive_ack; }$/;"	f	class:Pipe
is_ready	async/Stack.h	/^  virtual bool is_ready() { return true; };$/;"	f	class:NetworkStack
is_reset_from_peer	async/AsyncConnection.h	/^  bool is_reset_from_peer;$/;"	m	class:AsyncConnection
is_rx_buffer	async/rdma/Infiniband.h	/^    bool is_rx_buffer(const char* c) { return channel->is_my_buffer(c); }$/;"	f	class:Infiniband::MemoryManager
is_rx_buffer	async/rdma/Infiniband.h	/^  bool is_rx_buffer(const char* c) { return memory_manager->is_rx_buffer(c);}$/;"	f	class:Infiniband
is_same_host	msg_types.h	/^  bool is_same_host(const entity_addr_t &o) const {$/;"	f	struct:entity_addr_t
is_server	async/rdma/RDMAStack.h	/^  bool is_server;$/;"	m	class:RDMAConnectedSocketImpl
is_started	DispatchQueue.h	/^  bool is_started() const {return dispatch_thread.is_started();}$/;"	f	class:DispatchQueue
is_tx_buffer	async/rdma/Infiniband.h	/^    bool is_tx_buffer(const char* c) { return send->is_my_buffer(c); }$/;"	f	class:Infiniband::MemoryManager
is_tx_buffer	async/rdma/Infiniband.h	/^  bool is_tx_buffer(const char* c) { return memory_manager->is_tx_buffer(c);}$/;"	f	class:Infiniband
is_unspecified	async/dpdk/ip_types.h	/^static inline bool is_unspecified(ipv4_address addr) { return addr.ip == 0; }$/;"	f
is_vmxnet3_device	async/dpdk/DPDK.h	/^  bool is_vmxnet3_device() const {$/;"	f	class:DPDKDevice
isn_secret	async/dpdk/TCP.h	/^      isn_secret () {$/;"	f	struct:tcp_state::tcp_option::option_kind::tcp::tcb::isn_secret
isn_secret	async/dpdk/TCP.h	/^    struct isn_secret {$/;"	s	class:tcp_state::tcp_option::option_kind::tcp::tcb
iterator	async/dpdk/circular_buffer.h	/^  typedef cbiterator<circular_buffer, T> iterator;$/;"	t	class:circular_buffer
ix	xio/XioPortal.h	/^    int ix; \/* atomicity by portal thread *\/$/;"	m	struct:XioPortal::SubmitQueue
join	simple/Pipe.cc	/^void Pipe::join()$/;"	f	class:Pipe
join	xio/XioPortal.h	/^  void join()$/;"	f	class:XioPortals
join_reader	simple/Pipe.cc	/^void Pipe::join_reader()$/;"	f	class:Pipe
join_worker	async/rdma/RDMAStack.cc	/^void RDMAStack::join_worker(unsigned i)$/;"	f	class:RDMAStack
keepalive	async/AsyncConnection.h	/^  bool keepalive;$/;"	m	class:AsyncConnection
keepalive	xio/XioConnection.h	/^    bool keepalive;$/;"	m	struct:XioConnection::SendQ
keepalive_ack_stamp	simple/Pipe.h	/^    utime_t keepalive_ack_stamp;$/;"	m	class:Pipe
key	async/dpdk/TCP.h	/^      uint32_t key[16];$/;"	m	struct:tcp_state::tcp_option::option_kind::tcp::tcb::isn_secret
kind	async/dpdk/TCP.h	/^    option_kind kind = option_kind::eol;$/;"	m	struct:tcp_state::tcp_option::option_kind::option_len::eol
kind	async/dpdk/TCP.h	/^    option_kind kind = option_kind::mss;$/;"	m	struct:tcp_state::tcp_option::option_kind::option_len::mss
kind	async/dpdk/TCP.h	/^    option_kind kind = option_kind::nop;$/;"	m	struct:tcp_state::tcp_option::option_kind::option_len::nop
kind	async/dpdk/TCP.h	/^    option_kind kind = option_kind::sack;$/;"	m	struct:tcp_state::tcp_option::option_kind::option_len::sack
kind	async/dpdk/TCP.h	/^    option_kind kind = option_kind::timestamps;$/;"	m	struct:tcp_state::tcp_option::option_kind::option_len::timestamps
kind	async/dpdk/TCP.h	/^    option_kind kind = option_kind::win_scale;$/;"	m	struct:tcp_state::tcp_option::option_kind::option_len::win_scale
kqfd	async/EventKqueue.h	/^  int kqfd;$/;"	m	class:KqueueDriver
l2_addr	async/dpdk/net.cc	/^  ethernet_address l2_addr;$/;"	m	class:C_arp_learn	file:
l2receive	async/dpdk/DPDK.h	/^  void l2receive(int qid, Packet p) {$/;"	f	class:DPDKDevice
l2self	async/dpdk/ARP.h	/^  ethernet_address l2self() { return _netif->hw_address(); }$/;"	f	class:arp
l2self	async/dpdk/ARP.h	/^  l2addr l2self() { return _arp.l2self(); }$/;"	f	class:arp_for
l3_addr	async/dpdk/net.cc	/^  ipv4_address l3_addr;$/;"	m	class:C_arp_learn	file:
l3_protocol	async/dpdk/net.cc	/^l3_protocol::l3_protocol(interface* netif, eth_protocol_num proto_num, packet_provider_type func)$/;"	f	class:l3_protocol
l3_protocol	async/dpdk/net.h	/^class l3_protocol {$/;"	c
l3_rx_stream	async/dpdk/net.h	/^    l3_rx_stream(std::function<bool (forward_hash&, Packet&, size_t)>&& fw) : forward(fw) {}$/;"	f	struct:interface::l3_rx_stream
l3_rx_stream	async/dpdk/net.h	/^  struct l3_rx_stream {$/;"	s	class:interface
l3packet	async/dpdk/net.h	/^  struct l3packet {$/;"	s	class:l3_protocol
l4connid	async/dpdk/IP.h	/^struct l4connid {$/;"	s
l4packet	async/dpdk/IP.h	/^  struct l4packet {$/;"	s	struct:ipv4_traits
l_dpdk_dev_first	async/dpdk/DPDK.h	/^  l_dpdk_dev_first = 58800,$/;"	e	enum:__anon4
l_dpdk_dev_last	async/dpdk/DPDK.h	/^  l_dpdk_dev_last$/;"	e	enum:__anon4
l_dpdk_dev_rx_badcrc_errors	async/dpdk/DPDK.h	/^  l_dpdk_dev_rx_badcrc_errors,$/;"	e	enum:__anon4
l_dpdk_dev_rx_dropped_errors	async/dpdk/DPDK.h	/^  l_dpdk_dev_rx_dropped_errors,$/;"	e	enum:__anon4
l_dpdk_dev_rx_mcast	async/dpdk/DPDK.h	/^  l_dpdk_dev_rx_mcast,$/;"	e	enum:__anon4
l_dpdk_dev_rx_nombuf_errors	async/dpdk/DPDK.h	/^  l_dpdk_dev_rx_nombuf_errors,$/;"	e	enum:__anon4
l_dpdk_dev_rx_total_errors	async/dpdk/DPDK.h	/^  l_dpdk_dev_rx_total_errors,$/;"	e	enum:__anon4
l_dpdk_dev_tx_total_errors	async/dpdk/DPDK.h	/^  l_dpdk_dev_tx_total_errors,$/;"	e	enum:__anon4
l_dpdk_qp_first	async/dpdk/DPDK.h	/^  l_dpdk_qp_first = 58900,$/;"	e	enum:__anon5
l_dpdk_qp_first	async/dpdk/IP.cc	/^  l_dpdk_qp_first = 99000,$/;"	e	enum:__anon3	file:
l_dpdk_qp_last	async/dpdk/DPDK.h	/^  l_dpdk_qp_last$/;"	e	enum:__anon5
l_dpdk_qp_last	async/dpdk/IP.cc	/^  l_dpdk_qp_last$/;"	e	enum:__anon3	file:
l_dpdk_qp_rx_bad_checksum_errors	async/dpdk/DPDK.h	/^  l_dpdk_qp_rx_bad_checksum_errors,$/;"	e	enum:__anon5
l_dpdk_qp_rx_bytes	async/dpdk/DPDK.h	/^  l_dpdk_qp_rx_bytes,$/;"	e	enum:__anon5
l_dpdk_qp_rx_copy_bytes	async/dpdk/DPDK.h	/^  l_dpdk_qp_rx_copy_bytes,$/;"	e	enum:__anon5
l_dpdk_qp_rx_copy_ops	async/dpdk/DPDK.h	/^  l_dpdk_qp_rx_copy_ops,$/;"	e	enum:__anon5
l_dpdk_qp_rx_fragments	async/dpdk/DPDK.h	/^  l_dpdk_qp_rx_fragments,$/;"	e	enum:__anon5
l_dpdk_qp_rx_last_bunch	async/dpdk/DPDK.h	/^  l_dpdk_qp_rx_last_bunch,$/;"	e	enum:__anon5
l_dpdk_qp_rx_linearize_ops	async/dpdk/DPDK.h	/^  l_dpdk_qp_rx_linearize_ops,$/;"	e	enum:__anon5
l_dpdk_qp_rx_no_memory_errors	async/dpdk/DPDK.h	/^  l_dpdk_qp_rx_no_memory_errors,$/;"	e	enum:__anon5
l_dpdk_qp_rx_packets	async/dpdk/DPDK.h	/^  l_dpdk_qp_rx_packets,$/;"	e	enum:__anon5
l_dpdk_qp_tx_bytes	async/dpdk/DPDK.h	/^  l_dpdk_qp_tx_bytes,$/;"	e	enum:__anon5
l_dpdk_qp_tx_copy_bytes	async/dpdk/DPDK.h	/^  l_dpdk_qp_tx_copy_bytes,$/;"	e	enum:__anon5
l_dpdk_qp_tx_copy_ops	async/dpdk/DPDK.h	/^  l_dpdk_qp_tx_copy_ops,$/;"	e	enum:__anon5
l_dpdk_qp_tx_fragments	async/dpdk/DPDK.h	/^  l_dpdk_qp_tx_fragments,$/;"	e	enum:__anon5
l_dpdk_qp_tx_last_bunch	async/dpdk/DPDK.h	/^  l_dpdk_qp_tx_last_bunch,$/;"	e	enum:__anon5
l_dpdk_qp_tx_linearize_ops	async/dpdk/DPDK.h	/^  l_dpdk_qp_tx_linearize_ops,$/;"	e	enum:__anon5
l_dpdk_qp_tx_packets	async/dpdk/DPDK.h	/^  l_dpdk_qp_tx_packets,$/;"	e	enum:__anon5
l_dpdk_qp_tx_queue_length	async/dpdk/DPDK.h	/^  l_dpdk_qp_tx_queue_length,$/;"	e	enum:__anon5
l_dpdk_total_linearize_operations	async/dpdk/IP.cc	/^  l_dpdk_total_linearize_operations,$/;"	e	enum:__anon3	file:
l_msgr_active_connections	async/Stack.h	/^  l_msgr_active_connections,$/;"	e	enum:__anon9
l_msgr_created_connections	async/Stack.h	/^  l_msgr_created_connections,$/;"	e	enum:__anon9
l_msgr_first	async/Stack.h	/^  l_msgr_first = 94000,$/;"	e	enum:__anon9
l_msgr_last	async/Stack.h	/^  l_msgr_last,$/;"	e	enum:__anon9
l_msgr_rdma_active_queue_pair	async/rdma/RDMAStack.h	/^  l_msgr_rdma_active_queue_pair,$/;"	e	enum:__anon6
l_msgr_rdma_async_last_wqe_events	async/rdma/RDMAStack.h	/^  l_msgr_rdma_async_last_wqe_events,$/;"	e	enum:__anon6
l_msgr_rdma_created_queue_pair	async/rdma/RDMAStack.h	/^  l_msgr_rdma_created_queue_pair,$/;"	e	enum:__anon6
l_msgr_rdma_dispatcher_first	async/rdma/RDMAStack.h	/^  l_msgr_rdma_dispatcher_first = 94000,$/;"	e	enum:__anon6
l_msgr_rdma_dispatcher_last	async/rdma/RDMAStack.h	/^  l_msgr_rdma_dispatcher_last,$/;"	e	enum:__anon6
l_msgr_rdma_first	async/rdma/RDMAStack.h	/^  l_msgr_rdma_first = 95000,$/;"	e	enum:__anon7
l_msgr_rdma_handshake_errors	async/rdma/RDMAStack.h	/^  l_msgr_rdma_handshake_errors,$/;"	e	enum:__anon6
l_msgr_rdma_inflight_tx_chunks	async/rdma/RDMAStack.h	/^  l_msgr_rdma_inflight_tx_chunks,$/;"	e	enum:__anon6
l_msgr_rdma_inqueue_rx_chunks	async/rdma/RDMAStack.h	/^  l_msgr_rdma_inqueue_rx_chunks,$/;"	e	enum:__anon6
l_msgr_rdma_last	async/rdma/RDMAStack.h	/^  l_msgr_rdma_last,$/;"	e	enum:__anon7
l_msgr_rdma_pending_sent_conns	async/rdma/RDMAStack.h	/^  l_msgr_rdma_pending_sent_conns,$/;"	e	enum:__anon7
l_msgr_rdma_polling	async/rdma/RDMAStack.h	/^  l_msgr_rdma_polling,$/;"	e	enum:__anon6
l_msgr_rdma_rx_bytes	async/rdma/RDMAStack.h	/^  l_msgr_rdma_rx_bytes,$/;"	e	enum:__anon7
l_msgr_rdma_rx_chunks	async/rdma/RDMAStack.h	/^  l_msgr_rdma_rx_chunks,$/;"	e	enum:__anon7
l_msgr_rdma_rx_fin	async/rdma/RDMAStack.h	/^  l_msgr_rdma_rx_fin,$/;"	e	enum:__anon6
l_msgr_rdma_rx_no_registered_mem	async/rdma/RDMAStack.h	/^  l_msgr_rdma_rx_no_registered_mem,$/;"	e	enum:__anon7
l_msgr_rdma_rx_total_wc	async/rdma/RDMAStack.h	/^  l_msgr_rdma_rx_total_wc,$/;"	e	enum:__anon6
l_msgr_rdma_rx_total_wc_errors	async/rdma/RDMAStack.h	/^  l_msgr_rdma_rx_total_wc_errors,$/;"	e	enum:__anon6
l_msgr_rdma_total_async_events	async/rdma/RDMAStack.h	/^  l_msgr_rdma_total_async_events,$/;"	e	enum:__anon6
l_msgr_rdma_tx_bytes	async/rdma/RDMAStack.h	/^  l_msgr_rdma_tx_bytes,$/;"	e	enum:__anon7
l_msgr_rdma_tx_chunks	async/rdma/RDMAStack.h	/^  l_msgr_rdma_tx_chunks,$/;"	e	enum:__anon7
l_msgr_rdma_tx_failed	async/rdma/RDMAStack.h	/^  l_msgr_rdma_tx_failed,$/;"	e	enum:__anon7
l_msgr_rdma_tx_no_mem	async/rdma/RDMAStack.h	/^  l_msgr_rdma_tx_no_mem,$/;"	e	enum:__anon7
l_msgr_rdma_tx_parital_mem	async/rdma/RDMAStack.h	/^  l_msgr_rdma_tx_parital_mem,$/;"	e	enum:__anon7
l_msgr_rdma_tx_total_wc	async/rdma/RDMAStack.h	/^  l_msgr_rdma_tx_total_wc,$/;"	e	enum:__anon6
l_msgr_rdma_tx_total_wc_errors	async/rdma/RDMAStack.h	/^  l_msgr_rdma_tx_total_wc_errors,$/;"	e	enum:__anon6
l_msgr_rdma_tx_wc_retry_errors	async/rdma/RDMAStack.h	/^  l_msgr_rdma_tx_wc_retry_errors,$/;"	e	enum:__anon6
l_msgr_rdma_tx_wc_wr_flush_errors	async/rdma/RDMAStack.h	/^  l_msgr_rdma_tx_wc_wr_flush_errors,$/;"	e	enum:__anon6
l_msgr_recv_bytes	async/Stack.h	/^  l_msgr_recv_bytes,$/;"	e	enum:__anon9
l_msgr_recv_messages	async/Stack.h	/^  l_msgr_recv_messages,$/;"	e	enum:__anon9
l_msgr_running_fast_dispatch_time	async/Stack.h	/^  l_msgr_running_fast_dispatch_time,$/;"	e	enum:__anon9
l_msgr_running_recv_time	async/Stack.h	/^  l_msgr_running_recv_time,$/;"	e	enum:__anon9
l_msgr_running_send_time	async/Stack.h	/^  l_msgr_running_send_time,$/;"	e	enum:__anon9
l_msgr_running_total_time	async/Stack.h	/^  l_msgr_running_total_time,$/;"	e	enum:__anon9
l_msgr_send_bytes	async/Stack.h	/^  l_msgr_send_bytes,$/;"	e	enum:__anon9
l_msgr_send_messages	async/Stack.h	/^  l_msgr_send_messages,$/;"	e	enum:__anon9
last_active	async/AsyncConnection.h	/^  ceph::coarse_mono_clock::time_point last_active;$/;"	m	class:AsyncConnection
last_frag_received	async/dpdk/IP.h	/^    bool last_frag_received = false;$/;"	m	struct:ipv4::frag
last_keepalive	Connection.h	/^  utime_t last_keepalive, last_keepalive_ack;$/;"	m	struct:Connection
last_keepalive_ack	Connection.h	/^  utime_t last_keepalive, last_keepalive_ack;$/;"	m	struct:Connection
last_tick_id	async/AsyncConnection.h	/^  uint64_t last_tick_id = 0;$/;"	m	class:AsyncConnection
last_unused	xio/XioPortal.h	/^  int last_unused;$/;"	m	class:XioPortals
lazy_send_message	xio/XioMessenger.h	/^  virtual int lazy_send_message(Message *m, Connection *con)$/;"	f	class:XioMessenger
lazy_send_message	xio/XioMessenger.h	/^  virtual int lazy_send_message(Message *m, const entity_inst_t& dest)$/;"	f	class:XioMessenger
learn	async/dpdk/ARP.h	/^void arp_for<L3>::learn(l2addr hwaddr, l3addr paddr) {$/;"	f	class:arp_for
learn	async/dpdk/IP.h	/^  void learn(ethernet_address l2, ipv4_address l3) {$/;"	f	class:ipv4
learned_addr	async/AsyncMessenger.cc	/^void AsyncMessenger::learned_addr(const entity_addr_t &peer_addr_for_me)$/;"	f	class:AsyncMessenger
learned_addr	simple/SimpleMessenger.cc	/^void SimpleMessenger::learned_addr(const entity_addr_t &peer_addr_for_me)$/;"	f	class:SimpleMessenger
learned_addr	xio/XioMessenger.cc	/^void XioMessenger::learned_addr(const entity_addr_t &peer_addr_for_me)$/;"	f	class:XioMessenger
len	async/dpdk/IP.h	/^  uint16_t len;$/;"	m	struct:ip_hdr
len	async/dpdk/Packet.h	/^  unsigned len() const { return _impl->_len; }$/;"	f	class:Packet
len	async/dpdk/TCP.h	/^    option_len len = option_len::mss;$/;"	m	struct:tcp_state::tcp_option::option_kind::option_len::mss
len	async/dpdk/TCP.h	/^    option_len len = option_len::sack;$/;"	m	struct:tcp_state::tcp_option::option_kind::option_len::sack
len	async/dpdk/TCP.h	/^    option_len len = option_len::timestamps;$/;"	m	struct:tcp_state::tcp_option::option_kind::option_len::timestamps
len	async/dpdk/TCP.h	/^    option_len len = option_len::win_scale;$/;"	m	struct:tcp_state::tcp_option::option_kind::option_len::win_scale
level_pair	xio/XioMessenger.cc	/^typedef pair<const char*, int> level_pair;$/;"	t	namespace:xio_log	file:
lf_state	xio/XioConnection.h	/^    enum lf_state {$/;"	g	struct:XioConnection::lifecycle
lid	async/rdma/Infiniband.h	/^  uint16_t lid;$/;"	m	class:Port
lid	async/rdma/Infiniband.h	/^  uint16_t lid;$/;"	m	struct:IBSYNMsg
lifecycle	xio/XioConnection.h	/^    lifecycle() : state(lifecycle::INIT), reconnects(0), connect_seq(0),$/;"	f	struct:XioConnection::lifecycle
lifecycle	xio/XioConnection.h	/^  struct lifecycle {$/;"	s	class:XioConnection
limited_transfer	async/dpdk/TCP.h	/^      uint32_t limited_transfer = 0;$/;"	m	struct:tcp_state::tcp_option::option_kind::tcp::tcb::send
linearizations	async/dpdk/PacketUtil.h	/^  static uint64_t linearizations() {$/;"	f	class:packet_merger
linearizations_ref	async/dpdk/PacketUtil.h	/^  static uint64_t& linearizations_ref() {$/;"	f	class:packet_merger
linearize	async/dpdk/Packet.cc	/^void Packet::linearize(size_t at_frag, size_t desired_size) {$/;"	f	class:Packet
linearize	async/dpdk/Packet.h	/^  void linearize() { return linearize(0, len()); }$/;"	f	class:Packet
listen	async/PosixStack.cc	/^int PosixWorker::listen(entity_addr_t &sa, const SocketOptions &opt,$/;"	f	class:PosixWorker
listen	async/dpdk/DPDKStack.cc	/^int DPDKWorker::listen(entity_addr_t &sa, const SocketOptions &opt,$/;"	f	class:DPDKWorker
listen	async/dpdk/DPDKStack.h	/^  int listen() {$/;"	f	class:DPDKServerSocketImpl
listen	async/dpdk/TCP.h	/^    int listen() {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::listener
listen	async/dpdk/UserspaceEvent.h	/^  int listen(int fd, int mask) {$/;"	f	class:UserspaceEventManager
listen	async/dpdk/stream.h	/^  subscription<T...> listen() {$/;"	f	class:stream
listen	async/dpdk/stream.h	/^  subscription<T...> listen(next_fn next) {$/;"	f	class:stream
listen	async/rdma/RDMAServerSocketImpl.cc	/^int RDMAServerSocketImpl::listen(entity_addr_t &sa, const SocketOptions &opt)$/;"	f	class:RDMAServerSocketImpl
listen	async/rdma/RDMAStack.cc	/^int RDMAWorker::listen(entity_addr_t &sa, const SocketOptions &opt,ServerSocket *sock)$/;"	f	class:RDMAWorker
listen_handler	async/AsyncMessenger.h	/^  EventCallbackRef listen_handler;$/;"	m	class:Processor
listen_sd	simple/Accepter.h	/^  int listen_sd;$/;"	m	class:Accepter
listen_socket	async/AsyncMessenger.h	/^  ServerSocket listen_socket;$/;"	m	class:Processor
listener	async/dpdk/TCP.h	/^    listener(listener&& x)$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::listener
listener	async/dpdk/TCP.h	/^    listener(tcp& t, uint16_t port, size_t queue_length)$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::listener
listener	async/dpdk/TCP.h	/^  class listener {$/;"	c	class:tcp_state::tcp_option::option_kind::tcp
listening_mask	async/dpdk/UserspaceEvent.h	/^    int8_t listening_mask = 0;$/;"	m	struct:UserspaceEventManager::UserspaceFDImpl
local_connection	async/AsyncMessenger.h	/^  ConnectionRef local_connection;$/;"	m	class:AsyncMessenger
local_connection	simple/SimpleMessenger.h	/^  ConnectionRef local_connection;$/;"	m	class:SimpleMessenger
local_delivery	DispatchQueue.cc	/^void DispatchQueue::local_delivery(Message *m, int priority)$/;"	f	class:DispatchQueue
local_delivery_cond	DispatchQueue.h	/^  Cond local_delivery_cond;$/;"	m	class:DispatchQueue
local_delivery_lock	DispatchQueue.h	/^  Mutex local_delivery_lock;$/;"	m	class:DispatchQueue
local_delivery_thread	DispatchQueue.h	/^  } local_delivery_thread;$/;"	m	class:DispatchQueue	typeref:class:DispatchQueue::LocalDeliveryThread
local_ip	async/dpdk/IP.h	/^  ipaddr local_ip;$/;"	m	struct:l4connid
local_messages	DispatchQueue.h	/^  list<pair<Message *, int> > local_messages;$/;"	m	class:DispatchQueue
local_mss	async/dpdk/TCP.h	/^    uint16_t local_mss() {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::tcb
local_port	async/dpdk/IP.h	/^  uint16_t local_port;$/;"	m	struct:l4connid
local_worker	async/AsyncMessenger.h	/^  Worker *local_worker;$/;"	m	class:AsyncMessenger
lock	Connection.h	/^  mutable Mutex lock;$/;"	m	struct:Connection
lock	DispatchQueue.h	/^  mutable Mutex lock;$/;"	m	class:DispatchQueue
lock	QueueStrategy.h	/^  Mutex lock;$/;"	m	class:QueueStrategy
lock	async/AsyncConnection.h	/^  std::mutex lock;$/;"	m	class:AsyncConnection
lock	async/AsyncMessenger.h	/^  Mutex lock;$/;"	m	class:AsyncMessenger
lock	async/Event.h	/^    std::mutex lock;$/;"	m	class:EventCenter::C_submit_event
lock	async/dpdk/dpdk_rte.cc	/^  std::mutex eal::lock;$/;"	m	class:dpdk::eal	file:
lock	async/dpdk/dpdk_rte.h	/^  static std::mutex lock;$/;"	m	class:dpdk::eal
lock	async/rdma/Infiniband.h	/^      Mutex lock;$/;"	m	class:Infiniband::MemoryManager::Cluster
lock	async/rdma/Infiniband.h	/^  Mutex lock;$/;"	m	class:Infiniband
lock	async/rdma/RDMAStack.h	/^  Mutex lock; \/\/ protect `qp_conns`, `dead_queue_pairs`$/;"	m	class:RDMADispatcher
lock	async/rdma/RDMAStack.h	/^  Mutex lock;$/;"	m	class:RDMAConnectedSocketImpl
lock	async/rdma/RDMAStack.h	/^  Mutex lock;$/;"	m	class:RDMAWorker
lock	simple/SimpleMessenger.h	/^  Mutex lock;$/;"	m	class:SimpleMessenger
log_dout	xio/XioMessenger.cc	/^void log_dout(const char *file, unsigned line,$/;"	f	namespace:xio_log
logger	async/AsyncConnection.h	/^  PerfCounters *logger;$/;"	m	class:AsyncConnection
lookup_conn	async/AsyncMessenger.h	/^  AsyncConnectionRef lookup_conn(const entity_addr_t& k) {$/;"	f	class:AsyncMessenger
loop_con	xio/XioMessenger.h	/^  XioLoopbackConnectionRef loop_con;$/;"	m	class:XioMessenger
lossless_client	Messenger.h	/^    static Policy lossless_client(uint64_t req) {$/;"	f	struct:Messenger::Policy
lossless_peer	Messenger.h	/^    static Policy lossless_peer(uint64_t req) {$/;"	f	struct:Messenger::Policy
lossless_peer_reuse	Messenger.h	/^    static Policy lossless_peer_reuse(uint64_t req) {$/;"	f	struct:Messenger::Policy
lossy	Messenger.h	/^    bool lossy;$/;"	m	struct:Messenger::Policy
lossy_client	Messenger.h	/^    static Policy lossy_client(uint64_t req) {$/;"	f	struct:Messenger::Policy
lw_shared_ptr	async/dpdk/shared_ptr.h	/^  lw_shared_ptr(std::nullptr_t) noexcept : lw_shared_ptr() {}$/;"	f	class:lw_shared_ptr
lw_shared_ptr	async/dpdk/shared_ptr.h	/^class lw_shared_ptr {$/;"	c
m	DispatchQueue.h	/^    MessageRef m;$/;"	m	class:DispatchQueue::QueueItem
m	Message.h	/^    Message *m;$/;"	m	class:Message::CompletionHook
m	xio/XioMsg.h	/^  Message* m;$/;"	m	struct:XioMsg
mac	async/dpdk/ethernet.h	/^  std::array<uint8_t, 6> mac;$/;"	m	struct:ethernet_address
magic	Message.h	/^  uint32_t magic = 0;                \/\/ 消息的魔术字$/;"	m	class:Message
magic	Messenger.h	/^  uint32_t magic;$/;"	m	class:Messenger
magic	async/dpdk/UserspaceEvent.h	/^    uint32_t magic = 4921;$/;"	m	struct:UserspaceEventManager::UserspaceFDImpl
magic	xio/XioConnection.h	/^  uint32_t magic;$/;"	m	class:XioConnection
magic	xio/XioPortal.h	/^  uint32_t magic;$/;"	m	class:XioPortal
make	async/dpdk/shared_ptr.h	/^  static lw_shared_ptr make(A&&... a) {$/;"	f	class:lw_shared_ptr
make_lw_shared	async/dpdk/shared_ptr.h	/^lw_shared_ptr<T> make_lw_shared(A&&... a) {$/;"	f
make_lw_shared	async/dpdk/shared_ptr.h	/^lw_shared_ptr<T> make_lw_shared(T& a) {$/;"	f
make_lw_shared	async/dpdk/shared_ptr.h	/^lw_shared_ptr<T> make_lw_shared(T&& a) {$/;"	f
make_pending_worker	async/rdma/RDMAStack.h	/^  void make_pending_worker(RDMAWorker* w) {$/;"	f	class:RDMADispatcher
make_query_packet	async/dpdk/ARP.h	/^Packet arp_for<L3>::make_query_packet(l3addr paddr) {$/;"	f	class:arp_for
make_seq	async/dpdk/TCP.h	/^inline tcp_sequence make_seq(uint32_t raw) { return tcp_sequence{raw}; }$/;"	f	class:tcp_state::tcp_option::option_kind
malloc_huge_pages	async/rdma/Infiniband.cc	/^void* Infiniband::MemoryManager::malloc_huge_pages(size_t size)$/;"	f	class:Infiniband::MemoryManager
manager	async/dpdk/EventDPDK.h	/^  UserspaceEventManager manager;$/;"	m	class:DPDKDriver
manager	async/dpdk/TCP.h	/^    UserspaceEventManager &manager;$/;"	m	class:tcp_state::tcp_option::option_kind::tcp::tcb
manager	async/dpdk/TCP.h	/^  UserspaceEventManager &manager;$/;"	m	class:tcp_state::tcp_option::option_kind::tcp
manager	async/rdma/Infiniband.h	/^      MemoryManager& manager;$/;"	m	class:Infiniband::MemoryManager::Cluster
map	async/dpdk/PacketUtil.h	/^  std::map<Offset, Packet> map;$/;"	m	class:packet_merger
mark_disposable	simple/PipeConnection.cc	/^void PipeConnection::mark_disposable()$/;"	f	class:PipeConnection
mark_disposable	simple/SimpleMessenger.cc	/^void SimpleMessenger::mark_disposable(Connection *con)$/;"	f	class:SimpleMessenger
mark_disposable	xio/XioConnection.cc	/^void XioConnection::mark_disposable()$/;"	f	class:XioConnection
mark_disposable	xio/XioMessenger.cc	/^void XioMessenger::mark_disposable(Connection *con)$/;"	f	class:XioMessenger
mark_down	async/AsyncConnection.cc	/^void AsyncConnection::mark_down()$/;"	f	class:AsyncConnection
mark_down	async/AsyncMessenger.cc	/^void AsyncMessenger::mark_down(const entity_addr_t& addr)$/;"	f	class:AsyncMessenger
mark_down	simple/PipeConnection.cc	/^void PipeConnection::mark_down()$/;"	f	class:PipeConnection
mark_down	simple/SimpleMessenger.cc	/^void SimpleMessenger::mark_down(Connection *con)$/;"	f	class:SimpleMessenger
mark_down	simple/SimpleMessenger.cc	/^void SimpleMessenger::mark_down(const entity_addr_t& addr)$/;"	f	class:SimpleMessenger
mark_down	xio/XioConnection.cc	/^void XioConnection::mark_down()$/;"	f	class:XioConnection
mark_down	xio/XioMessenger.cc	/^void XioMessenger::mark_down(Connection* con)$/;"	f	class:XioMessenger
mark_down	xio/XioMessenger.cc	/^void XioMessenger::mark_down(const entity_addr_t& addr)$/;"	f	class:XioMessenger
mark_down_all	simple/SimpleMessenger.cc	/^void SimpleMessenger::mark_down_all()$/;"	f	class:SimpleMessenger
mark_down_all	xio/XioMessenger.cc	/^void XioMessenger::mark_down_all()$/;"	f	class:XioMessenger
mark_down_on_empty	xio/XioMessenger.cc	/^void XioMessenger::mark_down_on_empty(Connection* con)$/;"	f	class:XioMessenger
marrival	DispatchQueue.h	/^  set<pair<double, Message*> > marrival;$/;"	m	class:DispatchQueue
marrival_map	DispatchQueue.h	/^  map<Message *, set<pair<double, Message*> >::iterator> marrival_map;$/;"	m	class:DispatchQueue
mask	async/Event.h	/^    int mask;$/;"	m	struct:EventCenter::FileEvent
mask	async/Event.h	/^  int mask;$/;"	m	struct:FiredFileEvent
mask	async/EventKqueue.h	/^    int mask;$/;"	m	struct:KqueueDriver::SaveEvent
mask	async/dpdk/circular_buffer.h	/^inline size_t circular_buffer<T, Alloc>::mask(size_t idx) const {$/;"	f	class:circular_buffer
match_available_address	async/dpdk/DPDKStack.cc	/^static bool match_available_address(const vector<AvailableIPAddress> &avails,$/;"	f	file:
max_fd	async/EventSelect.h	/^  int max_fd;$/;"	m	class:SelectDriver
max_fd	async/dpdk/UserspaceEvent.h	/^  int max_fd = 0;$/;"	m	class:UserspaceEventManager
max_frags	async/dpdk/DPDK.cc	/^static constexpr uint8_t max_frags = 32 + 1;$/;"	v	file:
max_packet_len	async/dpdk/net.h	/^  uint16_t max_packet_len = ip_packet_len_max - eth_hdr_len;$/;"	m	struct:hw_features
max_recv_wr	async/rdma/Infiniband.h	/^    uint32_t     max_recv_wr;$/;"	m	class:Infiniband::QueuePair
max_recv_wr	async/rdma/Infiniband.h	/^  uint32_t max_recv_wr = 0;$/;"	m	class:Infiniband
max_send_wr	async/rdma/Infiniband.h	/^    uint32_t     max_send_wr;$/;"	m	class:Infiniband::QueuePair
max_send_wr	async/rdma/Infiniband.h	/^  uint32_t max_send_wr = 0;$/;"	m	class:Infiniband
max_sge	async/rdma/Infiniband.h	/^  uint32_t max_sge = 0;$/;"	m	class:Infiniband
max_wait_idx	async/dpdk/UserspaceEvent.h	/^  uint32_t max_wait_idx = 0;$/;"	m	class:UserspaceEventManager
max_waiters	async/dpdk/ARP.h	/^  static constexpr auto max_waiters = 512;$/;"	m	class:arp_for
maybe_expand	async/dpdk/circular_buffer.h	/^inline void circular_buffer<T, Alloc>::maybe_expand(size_t nr) {$/;"	f	class:circular_buffer
maybe_start_delay_thread	async/AsyncConnection.cc	/^void AsyncConnection::maybe_start_delay_thread()$/;"	f	class:AsyncConnection
maybe_start_delay_thread	simple/Pipe.cc	/^void Pipe::maybe_start_delay_thread()$/;"	f	class:Pipe
mbuf_cache_size	async/dpdk/DPDK.cc	/^static constexpr uint16_t mbuf_cache_size        = 512;$/;"	v	file:
mbuf_data_size	async/dpdk/DPDK.cc	/^static constexpr size_t mbuf_data_size = 4096;$/;"	v	file:
mbuf_overhead	async/dpdk/DPDK.cc	/^static constexpr uint16_t mbuf_overhead          =$/;"	v	file:
mbufs_per_queue_rx	async/dpdk/DPDK.cc	/^static constexpr uint16_t mbufs_per_queue_rx     = 2 * default_ring_size;$/;"	v	file:
mbufs_per_queue_tx	async/dpdk/DPDK.cc	/^static constexpr uint16_t mbufs_per_queue_tx     = 2 * default_ring_size;$/;"	v	file:
me	async/dpdk/DPDK.h	/^    static tx_buf* me(rte_mbuf* mbuf) {$/;"	f	class:DPDKQueuePair::tx_buf
mem_size	async/dpdk/IP.h	/^    uint32_t mem_size = 0;$/;"	m	struct:ipv4::frag
mem_size	async/dpdk/dpdk_rte.cc	/^  size_t eal::mem_size(int num_cpus)$/;"	f	class:dpdk::eal
memory	async/dpdk/Packet.h	/^  unsigned memory() const { return len() +  sizeof(Packet::impl); }$/;"	f	class:Packet
memory_manager	async/rdma/Infiniband.h	/^  MemoryManager* memory_manager = nullptr;$/;"	m	class:Infiniband
merge	async/dpdk/IP.cc	/^int32_t ipv4::frag::merge(ip_hdr &h, uint16_t offset, Packet p) {$/;"	f	class:ipv4::frag
merge	async/dpdk/PacketUtil.h	/^  void merge(Offset offset, Packet p) {$/;"	f	class:packet_merger
merge_out_of_order	async/dpdk/TCP.h	/^bool tcp<InetTraits>::tcb::merge_out_of_order() {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::tcb
mf	async/dpdk/IP.h	/^  bool mf() { return frag & (1 << uint8_t(frag_bits::mf)); }$/;"	f	class:ip_hdr::frag_bits
mf	async/dpdk/IP.h	/^  enum class frag_bits : uint8_t { mf = 13, df = 14, reserved = 15, offset_shift = 3 };$/;"	m	class:ip_hdr::frag_bits
middle	Message.h	/^  bufferlist       middle;           \/\/ "middle" unaligned blob$/;"	m	class:Message
middle	async/AsyncConnection.h	/^  bufferlist front, middle, data;$/;"	m	class:AsyncConnection
move	async/dpdk/Packet.h	/^    : _impl(std::move(x._impl)) {$/;"	f
move	async/dpdk/TCP.h	/^    connection(connection&& x) noexcept : _tcb(std::move(x._tcb)) {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::connection
mp	xio/XioPool.h	/^    struct xio_reg_mem mp[1];$/;"	m	struct:XioPool::xio_piece	typeref:struct:XioPool::xio_piece::xio_reg_mem
mp_this	xio/XioMsg.h	/^  struct xio_reg_mem mp_this;$/;"	m	class:XioDispatchHook	typeref:struct:XioDispatchHook::xio_reg_mem
mp_this	xio/XioMsg.h	/^  struct xio_reg_mem mp_this;$/;"	m	class:XioMarkDownHook	typeref:struct:XioMarkDownHook::xio_reg_mem
mp_this	xio/XioMsg.h	/^  struct xio_reg_mem mp_this;$/;"	m	class:XioSend	typeref:struct:XioSend::xio_reg_mem
mqueue	DispatchQueue.h	/^  PrioritizedQueue<QueueItem, uint64_t> mqueue;$/;"	m	class:DispatchQueue
mqueue	QueueStrategy.h	/^  Message::Queue mqueue;$/;"	m	class:QueueStrategy
mqueue	xio/XioConnection.h	/^    Message::Queue mqueue; \/\/ deferred$/;"	m	struct:XioConnection::SendQ
mr	async/rdma/Infiniband.h	/^      ibv_mr* mr;$/;"	m	class:Infiniband::MemoryManager::Chunk
ms_can_fast_dispatch	Dispatcher.h	/^  virtual bool ms_can_fast_dispatch(const Message *m) const { return false;}$/;"	f	class:Dispatcher
ms_can_fast_dispatch	Messenger.h	/^  bool ms_can_fast_dispatch(const Message *m) {$/;"	f	class:Messenger
ms_can_fast_dispatch_any	Dispatcher.h	/^  virtual bool ms_can_fast_dispatch_any() const { return false; }$/;"	f	class:Dispatcher
ms_deliver_dispatch	Messenger.h	/^  void ms_deliver_dispatch(Message *m) {$/;"	f	class:Messenger
ms_deliver_get_authorizer	Messenger.h	/^  AuthAuthorizer *ms_deliver_get_authorizer(int peer_type, bool force_new) {$/;"	f	class:Messenger
ms_deliver_handle_accept	Messenger.h	/^  void ms_deliver_handle_accept(Connection *con) {$/;"	f	class:Messenger
ms_deliver_handle_connect	Messenger.h	/^  void ms_deliver_handle_connect(Connection *con) {$/;"	f	class:Messenger
ms_deliver_handle_fast_accept	Messenger.h	/^  void ms_deliver_handle_fast_accept(Connection *con) {$/;"	f	class:Messenger
ms_deliver_handle_fast_connect	Messenger.h	/^  void ms_deliver_handle_fast_connect(Connection *con) {$/;"	f	class:Messenger
ms_deliver_handle_refused	Messenger.h	/^  void ms_deliver_handle_refused(Connection *con) {$/;"	f	class:Messenger
ms_deliver_handle_remote_reset	Messenger.h	/^  void ms_deliver_handle_remote_reset(Connection *con) {$/;"	f	class:Messenger
ms_deliver_handle_reset	Messenger.h	/^  void ms_deliver_handle_reset(Connection *con) {$/;"	f	class:Messenger
ms_deliver_verify_authorizer	Messenger.h	/^  bool ms_deliver_verify_authorizer(Connection *con, int peer_type,$/;"	f	class:Messenger
ms_fast_dispatch	Dispatcher.h	/^  virtual void ms_fast_dispatch(Message *m) { ceph_abort(); }$/;"	f	class:Dispatcher
ms_fast_dispatch	Messenger.h	/^  void ms_fast_dispatch(Message *m) {$/;"	f	class:Messenger
ms_fast_preprocess	Dispatcher.h	/^  virtual void ms_fast_preprocess(Message *m) {}$/;"	f	class:Dispatcher
ms_fast_preprocess	Messenger.h	/^  void ms_fast_preprocess(Message *m) {$/;"	f	class:Messenger
ms_get_authorizer	Dispatcher.h	/^  virtual bool ms_get_authorizer(int dest_type, AuthAuthorizer **a, bool force_new) { return false; }$/;"	f	class:Dispatcher
ms_handle_accept	Dispatcher.h	/^  virtual void ms_handle_accept(Connection *con) {}$/;"	f	class:Dispatcher
ms_handle_connect	Dispatcher.h	/^  virtual void ms_handle_connect(Connection *con) {}$/;"	f	class:Dispatcher
ms_handle_fast_accept	Dispatcher.h	/^  virtual void ms_handle_fast_accept(Connection *con) {}$/;"	f	class:Dispatcher
ms_handle_fast_connect	Dispatcher.h	/^  virtual void ms_handle_fast_connect(Connection *con) {}$/;"	f	class:Dispatcher
ms_type	async/AsyncMessenger.h	/^  std::string ms_type;$/;"	m	class:AsyncMessenger
ms_verify_authorizer	Dispatcher.h	/^  virtual bool ms_verify_authorizer(Connection *con,$/;"	f	class:Dispatcher
msg	xio/XioMsg.h	/^  struct xio_msg msg;$/;"	m	struct:xio_msg_ex	typeref:struct:xio_msg_ex::xio_msg
msg_cnt	xio/XioMsg.h	/^  __le32 msg_cnt;$/;"	m	class:XioMsgCnt
msg_cnt	xio/XioMsg.h	/^  __le32 msg_cnt;$/;"	m	class:XioMsgHdr
msg_cnt	xio/XioPool.h	/^  std::atomic<unsigned> msg_cnt = { 0 };  \/\/ send msgs$/;"	m	class:XioPoolStats
msg_left	async/AsyncConnection.h	/^  unsigned msg_left;$/;"	m	class:AsyncConnection
msg_release_fail	xio/XioConnection.cc	/^void XioConnection::msg_release_fail(struct xio_msg *msg, int code)$/;"	f	class:XioConnection
msg_send_fail	xio/XioConnection.cc	/^void XioConnection::msg_send_fail(XioSend *xsend, int code)$/;"	f	class:XioConnection
msg_seq	xio/XioMsg.h	/^  XioInSeq msg_seq;$/;"	m	class:XioDispatchHook
msg_throttler	Message.h	/^  Throttle *msg_throttler = nullptr;$/;"	m	class:Message
msg_type	async/dpdk/IP.h	/^  enum class msg_type : uint8_t {$/;"	c	struct:icmp_hdr
msgr	Connection.h	/^  Messenger *msgr;$/;"	m	struct:Connection
msgr	DispatchQueue.h	/^  Messenger *msgr;$/;"	m	class:DispatchQueue
msgr	DispatchStrategy.h	/^  Messenger *msgr;$/;"	m	class:DispatchStrategy
msgr	async/AsyncConnection.h	/^    AsyncMessenger *msgr;$/;"	m	class:AsyncConnection::DelayedDelivery
msgr	async/AsyncMessenger.cc	/^  AsyncMessenger *msgr;$/;"	m	class:C_handle_reap	file:
msgr	async/AsyncMessenger.h	/^  AsyncMessenger *msgr;$/;"	m	class:Processor
msgr	simple/Accepter.h	/^  SimpleMessenger *msgr;$/;"	m	class:Accepter
msgr	simple/Pipe.h	/^    SimpleMessenger *msgr;$/;"	m	class:Pipe
msgr	simple/SimpleMessenger.h	/^    SimpleMessenger *msgr;$/;"	m	class:SimpleMessenger::ReaperThread
msgr	xio/XioPortal.h	/^  Messenger *msgr;$/;"	m	class:XioPortal
msgvec	async/AsyncConnection.h	/^  struct iovec msgvec[ASYNC_IOV_MAX];$/;"	m	class:AsyncConnection	typeref:struct:AsyncConnection::iovec
msgvec	simple/Pipe.h	/^    struct iovec msgvec[SM_IOV_MAX];$/;"	m	class:Pipe	typeref:struct:Pipe::iovec
mss	async/dpdk/TCP.h	/^      uint16_t mss;$/;"	m	struct:tcp_state::tcp_option::option_kind::tcp::tcb::receive
mss	async/dpdk/TCP.h	/^      uint16_t mss;$/;"	m	struct:tcp_state::tcp_option::option_kind::tcp::tcb::send
mss	async/dpdk/TCP.h	/^    uint16_t mss;$/;"	m	struct:tcp_state::tcp_option::option_kind::option_len::mss
mss	async/dpdk/TCP.h	/^  enum class option_kind: uint8_t { mss = 2, win_scale = 3, sack = 4, timestamps = 8,  nop = 1, eol = 0 };$/;"	m	class:tcp_state::tcp_option::option_kind
mss	async/dpdk/TCP.h	/^  enum class option_len:  uint8_t { mss = 4, win_scale = 3, sack = 2, timestamps = 10, nop = 1, eol = 1 };$/;"	m	class:tcp_state::tcp_option::option_kind::option_len
mss	async/dpdk/TCP.h	/^  struct mss {$/;"	s	class:tcp_state::tcp_option::option_kind::option_len
mtu	async/dpdk/net.h	/^  uint16_t mtu = 1500;$/;"	m	struct:hw_features
my_inst	Messenger.h	/^  entity_inst_t my_inst;$/;"	m	class:Messenger
my_msg	async/rdma/RDMAStack.h	/^  IBSYNMsg my_msg;$/;"	m	class:RDMAConnectedSocketImpl
mythread	async/EventKqueue.h	/^  pthread_t mythread;$/;"	m	class:KqueueDriver
n	xio/XioPortal.h	/^  int n;$/;"	m	class:XioPortals
nInstances	xio/XioMessenger.cc	/^std::atomic<unsigned> XioMessenger::nInstances = { 0 };$/;"	m	class:XioMessenger	file:
nInstances	xio/XioMessenger.h	/^  static std::atomic<uint64_t> nInstances = { 0 };$/;"	m	class:XioMessenger
n_reqs	xio/XioConnection.h	/^  uint32_t n_reqs; \/\/ Accelio-initiated reqs in progress (!counting partials)$/;"	m	class:XioConnection
n_threads	QueueStrategy.h	/^  const int n_threads;$/;"	m	class:QueueStrategy
name	async/rdma/Infiniband.h	/^  const char* name;$/;"	m	class:Device
name	msg_types.h	/^  entity_name_t name;$/;"	m	struct:entity_inst_t
need_addr	async/AsyncMessenger.h	/^  bool need_addr;$/;"	m	class:AsyncMessenger
need_addr	simple/SimpleMessenger.h	/^  bool need_addr;$/;"	m	class:SimpleMessenger
need_addr	xio/XioMessenger.h	/^  bool need_addr;$/;"	m	class:XioMessenger
need_wakeup	async/Event.h	/^  virtual bool need_wakeup() { return true; }$/;"	f	class:EventDriver
need_wakeup	async/dpdk/EventDPDK.h	/^  bool need_wakeup() { return false; }$/;"	f	class:DPDKDriver
needs_csum	async/dpdk/Packet.h	/^  bool needs_csum = false;$/;"	m	struct:offload_info
needs_frag	async/dpdk/IP.h	/^  static bool needs_frag(Packet& p, ip_protocol_num proto_num, hw_features hw_features) {$/;"	f	class:ipv4
needs_ip_csum	async/dpdk/Packet.h	/^  bool needs_ip_csum = false;$/;"	m	struct:offload_info
net	async/AsyncMessenger.h	/^  NetHandler net;$/;"	m	class:Processor
net	async/Event.h	/^  NetHandler net;$/;"	m	class:EventCenter
net	async/PosixStack.h	/^  NetHandler net;$/;"	m	class:PosixWorker
net	async/rdma/RDMAStack.h	/^  NetHandler net;$/;"	m	class:RDMAServerSocketImpl
netif	async/dpdk/IP.h	/^  interface *netif() const {$/;"	f	class:ipv4
netmask_address	async/dpdk/IP.h	/^  ipv4_address netmask_address() const {$/;"	f	class:ipv4
nevent	async/Event.h	/^  int nevent;$/;"	m	class:EventCenter
new_session	xio/XioMessenger.cc	/^int XioMessenger::new_session(struct xio_session *session,$/;"	f	class:XioMessenger
next	async/dpdk/TCP.h	/^      tcp_sequence next;$/;"	m	struct:tcp_state::tcp_option::option_kind::tcp::tcb::receive
next	async/dpdk/TCP.h	/^      tcp_sequence next;$/;"	m	struct:tcp_state::tcp_option::option_kind::tcp::tcb::send
next	xio/XioInSeq.h	/^  void next(struct xio_msg** msg) {$/;"	f	class:XioInSeq
next	xio/XioPool.h	/^    struct xio_piece *next;$/;"	m	struct:XioPool::xio_piece	typeref:struct:XioPool::xio_piece::xio_piece
next_id	DispatchQueue.h	/^  std::atomic<uint64_t> next_id;$/;"	m	class:DispatchQueue
next_out_seq	xio/XioConnection.h	/^    uint64_t next_out_seq() {$/;"	f	class:XioConnection::CState
next_out_seq	xio/XioConnection.h	/^    uint64_t next_out_seq() {$/;"	f	struct:XioConnection::lifecycle
next_seq	xio/XioConnection.h	/^  uint64_t next_seq() {$/;"	f	class:XioLoopbackConnection
nlanes	xio/XioPortal.h	/^    const static int nlanes = 7;$/;"	m	struct:XioPortal::SubmitQueue
nodelay	async/Stack.h	/^  bool nodelay = true;$/;"	m	struct:SocketOptions
noexcept	async/dpdk/Packet.h	/^  Packet(Packet&& x) noexcept;$/;"	m	class:Packet
noexcept	async/dpdk/shared_ptr.h	/^  lw_shared_ptr() noexcept = default;$/;"	m	class:lw_shared_ptr
nonblock	async/Stack.h	/^  bool nonblock = true;$/;"	m	struct:SocketOptions
nonblock_connect	async/net_handler.cc	/^int NetHandler::nonblock_connect(const entity_addr_t &addr, const entity_addr_t& bind_addr)$/;"	f	class:ceph::NetHandler
nonblock_connect_need_writable_event	async/Stack.h	/^  virtual bool nonblock_connect_need_writable_event() const { return true; }$/;"	f	class:NetworkStack
nonblock_connect_need_writable_event	async/rdma/RDMAStack.h	/^  virtual bool nonblock_connect_need_writable_event() const { return false; }$/;"	f	class:RDMAStack
nonce	async/AsyncMessenger.h	/^  uint64_t nonce;$/;"	m	class:AsyncMessenger
nonce	msg_types.h	/^  __u32 nonce;$/;"	m	struct:entity_addr_t
nonce	simple/Accepter.h	/^  uint64_t nonce;$/;"	m	class:Accepter
nonce	simple/SimpleMessenger.h	/^  uint64_t nonce;$/;"	m	class:SimpleMessenger
nonce	xio/XioMessenger.h	/^  uint64_t nonce;$/;"	m	class:XioMessenger
nonwait	async/Event.h	/^    bool nonwait;$/;"	m	class:EventCenter::C_submit_event
nop	async/dpdk/TCP.h	/^  enum class option_kind: uint8_t { mss = 2, win_scale = 3, sack = 4, timestamps = 8,  nop = 1, eol = 0 };$/;"	m	class:tcp_state::tcp_option::option_kind
nop	async/dpdk/TCP.h	/^  enum class option_len:  uint8_t { mss = 4, win_scale = 3, sack = 2, timestamps = 10, nop = 1, eol = 1 };$/;"	m	class:tcp_state::tcp_option::option_kind::option_len
nop	async/dpdk/TCP.h	/^  struct nop {$/;"	s	class:tcp_state::tcp_option::option_kind::option_len
notify	async/dpdk/UserspaceEvent.cc	/^int UserspaceEventManager::notify(int fd, int mask)$/;"	f	class:UserspaceEventManager
notify	async/rdma/RDMAConnectedSocketImpl.cc	/^void RDMAConnectedSocketImpl::notify()$/;"	f	class:RDMAConnectedSocketImpl
notify_fd	async/rdma/RDMAStack.h	/^  int notify_fd = -1;$/;"	m	class:RDMAConnectedSocketImpl
notify_handler	async/Event.h	/^  EventCallbackRef notify_handler;$/;"	m	class:EventCenter
notify_on_dispatch_done	simple/Pipe.h	/^    bool notify_on_dispatch_done; \/\/\/ something wants a signal when dispatch done$/;"	m	class:Pipe
notify_pending_workers	async/rdma/RDMAStack.cc	/^void RDMADispatcher::notify_pending_workers() {$/;"	f	class:RDMADispatcher
notify_receive_fd	async/Event.h	/^  int notify_receive_fd;$/;"	m	class:EventCenter
notify_send_fd	async/Event.h	/^  int notify_send_fd;$/;"	m	class:EventCenter
notify_worker	async/rdma/RDMAStack.h	/^  void notify_worker() {$/;"	f	class:RDMAWorker
nr_frags	async/dpdk/Packet.h	/^  unsigned nr_frags() const { return _impl->_nr_frags; }$/;"	f	class:Packet
nr_transmits	async/dpdk/TCP.h	/^      unsigned nr_transmits;$/;"	m	struct:tcp_state::tcp_option::option_kind::tcp::tcb::unacked_segment
nrefs	xio/XioMsg.h	/^  std::atomic<unsigned> nrefs = { 0 };$/;"	m	class:XioSend
nsessions	xio/XioMessenger.h	/^  std::atomic<uint64_t> nsessions = { 0 };$/;"	m	class:XioMessenger
ntoh	async/dpdk/ARP.h	/^    arp_hdr ntoh() {$/;"	f	struct:arp::arp_hdr
ntoh	async/dpdk/ARP.h	/^    arp_hdr ntoh() {$/;"	f	struct:arp_for::arp_hdr
ntoh	async/dpdk/IP.h	/^  ip_hdr ntoh() {$/;"	f	class:ip_hdr::frag_bits
ntoh	async/dpdk/TCP.h	/^  tcp_hdr ntoh() {$/;"	f	struct:tcp_state::tcp_option::option_kind::tcp_hdr
ntoh	async/dpdk/TCP.h	/^tcp_sequence ntoh(tcp_sequence ts) {$/;"	f	class:tcp_state::tcp_option::option_kind
ntoh	async/dpdk/byteorder.h	/^inline int16_t ntoh(int16_t x) { return ntohs(x); }$/;"	f
ntoh	async/dpdk/byteorder.h	/^inline int32_t ntoh(int32_t x) { return ntohl(x); }$/;"	f
ntoh	async/dpdk/byteorder.h	/^inline int64_t ntoh(int64_t x) { return ntohq(x); }$/;"	f
ntoh	async/dpdk/byteorder.h	/^inline int8_t ntoh(int8_t x) { return x; }$/;"	f
ntoh	async/dpdk/byteorder.h	/^inline uint16_t ntoh(uint16_t x) { return ntohs(x); }$/;"	f
ntoh	async/dpdk/byteorder.h	/^inline uint32_t ntoh(uint32_t x) { return ntohl(x); }$/;"	f
ntoh	async/dpdk/byteorder.h	/^inline uint64_t ntoh(uint64_t x) { return ntohq(x); }$/;"	f
ntoh	async/dpdk/byteorder.h	/^inline uint8_t ntoh(uint8_t x) { return x; }$/;"	f
ntoh	async/dpdk/byteorder.h	/^inline void ntoh() {}$/;"	f
ntoh	async/dpdk/ethernet.h	/^  eth_hdr ntoh() {$/;"	f	struct:eth_hdr
ntoh	async/dpdk/ethernet.h	/^  ethernet_address ntoh() {$/;"	f	struct:ethernet_address
ntoh	async/dpdk/ip_types.h	/^  ipv4_address ntoh() {$/;"	f	struct:ipv4_address
ntohq	async/dpdk/byteorder.h	/^inline uint64_t ntohq(uint64_t v) {$/;"	f
num	async/rdma/Infiniband.h	/^  int num;$/;"	m	class:DeviceList
num	msg_types.h	/^  int64_t num() const { return _num; }$/;"	f	class:entity_name_t
num_chunk	async/rdma/Infiniband.h	/^      uint32_t num_chunk;$/;"	m	class:Infiniband::MemoryManager::Cluster
num_dead_queue_pair	async/rdma/RDMAStack.h	/^  std::atomic<uint64_t> num_dead_queue_pair = {0};$/;"	m	class:RDMADispatcher
num_pending_workers	async/rdma/RDMAStack.h	/^  std::atomic<uint64_t> num_pending_workers = {0};$/;"	m	class:RDMADispatcher
num_qp_conn	async/rdma/RDMAStack.h	/^  std::atomic<uint64_t> num_qp_conn = {0};$/;"	m	class:RDMADispatcher
num_workers	async/Stack.h	/^  unsigned num_workers = 0;$/;"	m	class:NetworkStack
odd	async/dpdk/IPChecksum.h	/^  bool odd = false;$/;"	m	struct:checksummer
offload_info	async/dpdk/Packet.h	/^  class offload_info offload_info() const { return _impl->_offload_info; }$/;"	f	class:Packet
offload_info	async/dpdk/Packet.h	/^struct offload_info {$/;"	s
offload_info_ref	async/dpdk/Packet.h	/^  class offload_info& offload_info_ref() { return _impl->_offload_info; }$/;"	f	class:Packet
offset	async/dpdk/IP.h	/^  uint16_t offset() { return frag << uint8_t(frag_bits::offset_shift); }$/;"	f	class:ip_hdr::frag_bits
offset	async/rdma/Infiniband.h	/^      uint32_t offset;$/;"	m	class:Infiniband::MemoryManager::Chunk
offset_shift	async/dpdk/IP.h	/^  enum class frag_bits : uint8_t { mf = 13, df = 14, reserved = 15, offset_shift = 3 };$/;"	m	class:ip_hdr::frag_bits
on_cancel	xio/XioMessenger.cc	/^static int on_cancel(struct xio_session *session,$/;"	f	file:
on_cancel_request	xio/XioMessenger.cc	/^static int on_cancel_request(struct xio_session *session,$/;"	f	file:
on_disconnect_event	xio/XioConnection.h	/^  int on_disconnect_event() {$/;"	f	class:XioConnection
on_err_finalize	xio/XioMsg.h	/^  void on_err_finalize(XioConnection *xcon) {$/;"	f	class:XioDispatchHook
on_msg	xio/XioConnection.cc	/^int XioConnection::on_msg(struct xio_session *session,$/;"	f	class:XioConnection
on_msg	xio/XioMessenger.cc	/^static int on_msg(struct xio_session *session,$/;"	f	file:
on_msg_error	xio/XioConnection.cc	/^int XioConnection::on_msg_error(struct xio_session *session,$/;"	f	class:XioConnection
on_msg_error	xio/XioMessenger.cc	/^static int on_msg_error(struct xio_session *session,$/;"	f	file:
on_new_session	xio/XioMessenger.cc	/^static int on_new_session(struct xio_session *session,$/;"	f	file:
on_ow_msg_send_complete	xio/XioConnection.cc	/^int XioConnection::on_ow_msg_send_complete(struct xio_session *session,$/;"	f	class:XioConnection
on_ow_msg_send_complete	xio/XioMessenger.cc	/^static int on_ow_msg_send_complete(struct xio_session *session,$/;"	f	file:
on_session_event	xio/XioMessenger.cc	/^static int on_session_event(struct xio_session *session,$/;"	f	file:
on_teardown_event	xio/XioConnection.h	/^  int on_teardown_event() {$/;"	f	class:XioConnection
once_ready	async/AsyncConnection.h	/^  bool once_ready;$/;"	m	class:AsyncConnection
op_reply	async/dpdk/ARP.h	/^    op_reply = 2,$/;"	e	enum:arp_for::oper
op_request	async/dpdk/ARP.h	/^    op_request = 1,$/;"	e	enum:arp_for::oper
open_write	async/AsyncConnection.h	/^  bool open_write = false;$/;"	m	class:AsyncConnection
oper	async/dpdk/ARP.h	/^    uint16_t oper;$/;"	m	struct:arp_for::arp_hdr
oper	async/dpdk/ARP.h	/^  enum oper {$/;"	g	class:arp_for
operator !=	async/dpdk/TCP.h	/^inline bool operator!=(tcp_sequence s, tcp_sequence q) { return !(s == q); }$/;"	f	class:tcp_state::tcp_option::option_kind
operator !=	async/dpdk/circular_buffer.h	/^    bool operator!=(const cbiterator<CB, ValueType>& rhs) const {$/;"	f	struct:circular_buffer::cbiterator
operator !=	async/dpdk/ip_types.h	/^  friend bool operator!=(ipv4_address x, ipv4_address y) {$/;"	f	struct:ipv4_address
operator !=	async/dpdk/shared_ptr.h	/^  bool operator!=(const lw_shared_ptr<const T>& x) const {$/;"	f	class:lw_shared_ptr
operator !=	async/dpdk/shared_ptr.h	/^  bool operator!=(const lw_shared_ptr<remove_const_t<T>>& x) const {$/;"	f	class:lw_shared_ptr
operator !=	msg_types.h	/^inline bool operator!= (const entity_name_t& l, const entity_name_t& r) { $/;"	f
operator !=	msg_types.h	/^inline bool operator!=(const entity_addr_t& a, const entity_addr_t& b) { return memcmp(&a, &b, sizeof(a)) != 0; }$/;"	f
operator !=	msg_types.h	/^inline bool operator!=(const entity_inst_t& a, const entity_inst_t& b) { $/;"	f
operator ()	async/dpdk/DPDK.h	/^  void operator()(void* p) { ::free(p); }$/;"	f	struct:free_deleter
operator ()	async/dpdk/ip_types.h	/^    size_t operator()(ipv4_address a) const { return a.ip; }$/;"	f	struct:std::hash
operator ()	async/dpdk/shared_ptr.h	/^    size_t operator()(const lw_shared_ptr<T>& p) const {$/;"	f	struct:std::hash
operator ()	msg_types.h	/^    size_t operator()( const entity_addr_t& x ) const$/;"	f	struct:std::hash
operator ()	msg_types.h	/^    size_t operator()( const entity_inst_t& x ) const$/;"	f	struct:std::hash
operator ()	msg_types.h	/^    size_t operator()( const entity_name_t &m ) const$/;"	f	struct:std::hash
operator ()	xio/XioConnection.h	/^    bool operator()(const XioConnection &c, const entity_inst_t &peer) const$/;"	f	struct:XioConnection::EntityComp
operator ()	xio/XioConnection.h	/^    bool operator()(const XioConnection &lhs,  const XioConnection &rhs) const$/;"	f	struct:XioConnection::EntityComp
operator ()	xio/XioConnection.h	/^    bool operator()(const entity_inst_t &peer, const XioConnection &c) const$/;"	f	struct:XioConnection::EntityComp
operator *	async/dpdk/circular_buffer.h	/^    ValueType& operator*() const { return cb->_impl.storage[cb->mask(idx)]; }$/;"	f	struct:circular_buffer::cbiterator
operator +	async/dpdk/TCP.h	/^inline tcp_sequence operator+(tcp_sequence s, int32_t n) { return s += n; }$/;"	f	class:tcp_state::tcp_option::option_kind
operator +	async/dpdk/circular_buffer.h	/^    cbiterator<CB, ValueType> operator+(typename super_t::difference_type n) const {$/;"	f	struct:circular_buffer::cbiterator
operator ++	async/dpdk/circular_buffer.h	/^    cbiterator<CB, ValueType> operator++(int unused) {$/;"	f	struct:circular_buffer::cbiterator
operator ++	async/dpdk/circular_buffer.h	/^    cbiterator<CB, ValueType>& operator++() {$/;"	f	struct:circular_buffer::cbiterator
operator +=	async/dpdk/TCP.h	/^inline tcp_sequence& operator+=(tcp_sequence& s, int32_t n) { s.raw += n; return s; }$/;"	f	class:tcp_state::tcp_option::option_kind
operator +=	async/dpdk/TCP.h	/^inline uint8_t& operator+=(uint8_t& x, tcp_option::option_len len) { x += uint8_t(len); return x; }$/;"	f	class:tcp_state::tcp_option::option_kind
operator +=	async/dpdk/TCP.h	/^inline uint8_t*& operator+=(uint8_t*& x, tcp_option::option_len len) { x += uint8_t(len); return x; }$/;"	f	class:tcp_state::tcp_option::option_kind
operator +=	async/dpdk/circular_buffer.h	/^    cbiterator<CB, ValueType>& operator+=(typename super_t::difference_type n) {$/;"	f	struct:circular_buffer::cbiterator
operator -	async/dpdk/TCP.h	/^inline int32_t operator-(tcp_sequence s, tcp_sequence q) { return s.raw - q.raw; }$/;"	f	class:tcp_state::tcp_option::option_kind
operator -	async/dpdk/TCP.h	/^inline tcp_sequence operator-(tcp_sequence s, int32_t n) { return s -= n; }$/;"	f	class:tcp_state::tcp_option::option_kind
operator -	async/dpdk/circular_buffer.h	/^    cbiterator<CB, ValueType> operator-(typename super_t::difference_type n) const {$/;"	f	struct:circular_buffer::cbiterator
operator -	async/dpdk/circular_buffer.h	/^    typename super_t::difference_type operator-(const cbiterator<CB, ValueType>& rhs) const {$/;"	f	struct:circular_buffer::cbiterator
operator --	async/dpdk/circular_buffer.h	/^    cbiterator<CB, ValueType> operator--(int unused) {$/;"	f	struct:circular_buffer::cbiterator
operator --	async/dpdk/circular_buffer.h	/^    cbiterator<CB, ValueType>& operator--() {$/;"	f	struct:circular_buffer::cbiterator
operator -=	async/dpdk/TCP.h	/^inline tcp_sequence& operator-=(tcp_sequence& s, int32_t n) { s.raw -= n; return s; }$/;"	f	class:tcp_state::tcp_option::option_kind
operator -=	async/dpdk/circular_buffer.h	/^    cbiterator<CB, ValueType>& operator-=(typename super_t::difference_type n) {$/;"	f	struct:circular_buffer::cbiterator
operator ->	async/dpdk/circular_buffer.h	/^    ValueType* operator->() const { return &cb->_impl.storage[cb->mask(idx)]; }$/;"	f	struct:circular_buffer::cbiterator
operator <	async/dpdk/TCP.h	/^inline bool operator<(tcp_sequence s, tcp_sequence q) { return s - q < 0; }$/;"	f	class:tcp_state::tcp_option::option_kind
operator <	async/dpdk/circular_buffer.h	/^    bool operator<(const cbiterator<CB, ValueType>& rhs) const {$/;"	f	struct:circular_buffer::cbiterator
operator <	msg_types.h	/^inline bool operator< (const entity_name_t& l, const entity_name_t& r) { $/;"	f
operator <	msg_types.h	/^inline bool operator<(const entity_addr_t& a, const entity_addr_t& b) { return memcmp(&a, &b, sizeof(a)) < 0; }$/;"	f
operator <	msg_types.h	/^inline bool operator<(const entity_inst_t& a, const entity_inst_t& b) { $/;"	f
operator <<	Message.h	/^inline ostream& operator<<(ostream& out, const Message& m) {$/;"	f
operator <<	async/dpdk/IP.cc	/^std::ostream& operator<<(std::ostream& os, const ipv4_address& a) {$/;"	f
operator <<	async/dpdk/Packet.cc	/^std::ostream& operator<<(std::ostream& os, const Packet& p) {$/;"	f
operator <<	async/dpdk/TCP.h	/^inline std::ostream & operator<<(std::ostream & str, const tcp_state& s) {$/;"	f	class:tcp_state
operator <<	async/dpdk/TCP.h	/^inline std::ostream& operator<<(std::ostream& os, const tcp_sequence& s) {$/;"	f	class:tcp_state::tcp_option::option_kind
operator <<	async/dpdk/ethernet.cc	/^std::ostream& operator<<(std::ostream& os, const ethernet_address& ea) {$/;"	f
operator <<	async/dpdk/shared_ptr.h	/^std::ostream& operator<<(std::ostream& out, const lw_shared_ptr<T>& p) {$/;"	f
operator <<	msg_types.cc	/^ostream& operator<<(ostream& out, const entity_addr_t &addr)$/;"	f
operator <<	msg_types.cc	/^ostream& operator<<(ostream& out, const sockaddr *sa)$/;"	f
operator <<	msg_types.cc	/^ostream& operator<<(ostream& out, const sockaddr_storage &ss)$/;"	f
operator <<	msg_types.h	/^inline ostream& operator<<(ostream& out, const ceph_entity_inst &i)$/;"	f
operator <<	msg_types.h	/^inline ostream& operator<<(ostream& out, const entity_inst_t &i)$/;"	f
operator <<	msg_types.h	/^inline std::ostream& operator<<(std::ostream& out, const ceph_entity_name& addr) {$/;"	f
operator <<	msg_types.h	/^inline std::ostream& operator<<(std::ostream& out, const entity_name_t& addr) {$/;"	f
operator <<	simple/Pipe.cc	/^ostream& operator<<(ostream &out, const Pipe &pipe) {$/;"	f
operator <=	async/dpdk/TCP.h	/^inline bool operator<=(tcp_sequence s, tcp_sequence q) { return !(s > q); }$/;"	f	class:tcp_state::tcp_option::option_kind
operator <=	async/dpdk/circular_buffer.h	/^    bool operator<=(const cbiterator<CB, ValueType>& rhs) const {$/;"	f	struct:circular_buffer::cbiterator
operator <=	msg_types.h	/^inline bool operator<=(const entity_addr_t& a, const entity_addr_t& b) { return memcmp(&a, &b, sizeof(a)) <= 0; }$/;"	f
operator <=	msg_types.h	/^inline bool operator<=(const entity_inst_t& a, const entity_inst_t& b) {$/;"	f
operator =	async/dpdk/Packet.h	/^  Packet& operator=(Packet&& x) {$/;"	f	class:Packet
operator =	async/dpdk/TCP.h	/^    connection& operator=(connection&& x) {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::connection
operator ==	async/dpdk/IP.h	/^  bool operator==(const ipv4_frag_id& x) const {$/;"	f	struct:ipv4_frag_id
operator ==	async/dpdk/IP.h	/^  bool operator==(const l4connid& x) const {$/;"	f	struct:l4connid
operator ==	async/dpdk/TCP.h	/^inline bool operator==(tcp_sequence s, tcp_sequence q)  { return s.raw == q.raw; }$/;"	f	class:tcp_state::tcp_option::option_kind
operator ==	async/dpdk/circular_buffer.h	/^    bool operator==(const cbiterator<CB, ValueType>& rhs) const {$/;"	f	struct:circular_buffer::cbiterator
operator ==	async/dpdk/ethernet.h	/^inline bool operator==(const ethernet_address& a, const ethernet_address& b) {$/;"	f
operator ==	async/dpdk/ip_types.h	/^  friend bool operator==(ipv4_address x, ipv4_address y) {$/;"	f	struct:ipv4_address
operator ==	async/dpdk/shared_ptr.h	/^  bool operator==(const lw_shared_ptr<const T>& x) const {$/;"	f	class:lw_shared_ptr
operator ==	async/dpdk/shared_ptr.h	/^  bool operator==(const lw_shared_ptr<remove_const_t<T>>& x) const {$/;"	f	class:lw_shared_ptr
operator ==	msg_types.h	/^inline bool operator== (const entity_name_t& l, const entity_name_t& r) { $/;"	f
operator ==	msg_types.h	/^inline bool operator==(const entity_addr_t& a, const entity_addr_t& b) { return memcmp(&a, &b, sizeof(a)) == 0; }$/;"	f
operator ==	msg_types.h	/^inline bool operator==(const entity_inst_t& a, const entity_inst_t& b) { $/;"	f
operator >	async/dpdk/TCP.h	/^inline bool operator>(tcp_sequence s, tcp_sequence q) { return q < s; }$/;"	f	class:tcp_state::tcp_option::option_kind
operator >	async/dpdk/circular_buffer.h	/^    bool operator>(const cbiterator<CB, ValueType>& rhs) const {$/;"	f	struct:circular_buffer::cbiterator
operator >	msg_types.h	/^inline bool operator>(const entity_addr_t& a, const entity_addr_t& b) { return memcmp(&a, &b, sizeof(a)) > 0; }$/;"	f
operator >	msg_types.h	/^inline bool operator>(const entity_inst_t& a, const entity_inst_t& b) { return b < a; }$/;"	f
operator >=	async/dpdk/TCP.h	/^inline bool operator>=(tcp_sequence s, tcp_sequence q) { return !(s < q); }$/;"	f	class:tcp_state::tcp_option::option_kind
operator >=	async/dpdk/circular_buffer.h	/^    bool operator>=(const cbiterator<CB, ValueType>& rhs) const {$/;"	f	struct:circular_buffer::cbiterator
operator >=	msg_types.h	/^inline bool operator>=(const entity_addr_t& a, const entity_addr_t& b) { return memcmp(&a, &b, sizeof(a)) >= 0; }$/;"	f
operator >=	msg_types.h	/^inline bool operator>=(const entity_inst_t& a, const entity_inst_t& b) { return b <= a; }$/;"	f
operator []	async/dpdk/Packet.h	/^    fragment& operator[](size_t idx) { return _start[idx]; }$/;"	f	struct:Packet::pseudo_vector
operator []	async/dpdk/array_map.h	/^  Value& operator[](size_t key) { return _a[key]; }$/;"	f	class:array_map
operator []	async/dpdk/array_map.h	/^  const Value& operator[](size_t key) const { return _a[key]; }$/;"	f	class:array_map
operator []	async/dpdk/circular_buffer.h	/^inline T& circular_buffer<T, Alloc>::operator[](size_t idx) {$/;"	f	class:circular_buffer
operator []	async/dpdk/net.h	/^  const uint8_t& operator[](size_t idx) const {$/;"	f	class:forward_hash
operator bool	async/Stack.h	/^  explicit operator bool() const {$/;"	f	class:ConnectedSocket
operator bool	async/Stack.h	/^  explicit operator bool() const {$/;"	f	class:ServerSocket
operator ceph_entity_addr	msg_types.h	/^  operator ceph_entity_addr() const {$/;"	f	struct:entity_addr_t
operator ceph_entity_inst	msg_types.h	/^  operator ceph_entity_inst() {$/;"	f	struct:entity_inst_t
operator ceph_entity_name	msg_types.h	/^  operator ceph_entity_name() const {$/;"	f	class:entity_name_t
operator delete	async/dpdk/Packet.h	/^    void operator delete(void* ptr) {$/;"	f	struct:Packet::impl
operator delete	async/dpdk/Packet.h	/^    void operator delete(void* ptr, size_t nr_frags) {$/;"	f	struct:Packet::impl
operator new	async/dpdk/Packet.h	/^    void* operator new(size_t size, size_t nr_frags = default_nr_frags) {$/;"	f	struct:Packet::impl
operator |	async/dpdk/TCP.h	/^inline tcp_state operator|(tcp_state s1, tcp_state s2) {$/;"	f	class:tcp_state
option_kind	async/dpdk/TCP.h	/^  enum class option_kind: uint8_t { mss = 2, win_scale = 3, sack = 4, timestamps = 8,  nop = 1, eol = 0 };$/;"	c	struct:tcp_state::tcp_option
option_len	async/dpdk/TCP.h	/^  enum class option_len:  uint8_t { mss = 4, win_scale = 3, sack = 2, timestamps = 10, nop = 1, eol = 1 };$/;"	c	class:tcp_state::tcp_option::option_kind
options	async/dpdk/IP.h	/^  uint8_t options[0];$/;"	m	class:ip_hdr::frag_bits
out_of_order	async/dpdk/TCP.h	/^      tcp_packet_merger out_of_order;$/;"	m	struct:tcp_state::tcp_option::option_kind::tcp::tcb::receive
out_q	async/AsyncConnection.h	/^  map<int, list<pair<bufferlist, Message*> > > out_q;  \/\/ priority queue for outbound msgs$/;"	m	class:AsyncConnection
out_q	simple/Pipe.h	/^    map<int, list<Message*> > out_q;  \/\/ priority queue for outbound msgs$/;"	m	class:Pipe
out_seq	simple/Pipe.h	/^    uint64_t out_seq;$/;"	m	class:Pipe
out_seq	xio/XioConnection.h	/^    std::atomic<int64_t> out_seq = { 0 }; $/;"	m	struct:XioConnection::lifecycle
out_seq	xio/XioConnection.h	/^    std::atomic<uint64_t> out_seq = { 0 }; $/;"	m	class:XioConnection::CState
out_seq_acked	xio/XioConnection.h	/^    uint64_t in_seq, out_seq_acked; \/\/ atomic<uint64_t>, got receipt$/;"	m	class:XioConnection::CState
out_seq_acked	xio/XioConnection.h	/^    uint64_t in_seq, out_seq_acked; \/\/ atomic<uint64_t>, got receipt$/;"	m	struct:XioConnection::lifecycle
outcoming_bl	async/AsyncConnection.h	/^  bufferlist outcoming_bl;$/;"	m	class:AsyncConnection
outgoing	xio/XioConnection.h	/^  } outgoing;$/;"	m	class:XioConnection	typeref:struct:XioConnection::SendQ
output	async/dpdk/TCP.h	/^    void output() {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::tcb
output_one	async/dpdk/TCP.h	/^void tcp<InetTraits>::tcb::output_one(bool data_retransmit) {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::tcb
over	async/rdma/Infiniband.cc	/^bool Infiniband::MemoryManager::Chunk::over()$/;"	f	class:Infiniband::MemoryManager::Chunk
override	QueueStrategy.h	/^  void ds_dispatch(Message *m) override;$/;"	m	class:QueueStrategy
override	QueueStrategy.h	/^  void shutdown() override;$/;"	m	class:QueueStrategy
override	QueueStrategy.h	/^  void start() override;$/;"	m	class:QueueStrategy
override	QueueStrategy.h	/^  void wait() override;$/;"	m	class:QueueStrategy
override	async/AsyncConnection.h	/^    void do_request(int id) override;$/;"	m	class:AsyncConnection::DelayedDelivery
override	async/AsyncConnection.h	/^  int send_message(Message *m) override;$/;"	m	class:AsyncConnection
override	async/AsyncConnection.h	/^  void mark_down() override;$/;"	m	class:AsyncConnection
override	async/AsyncConnection.h	/^  void send_keepalive() override;$/;"	m	class:AsyncConnection
override	async/AsyncConnection.h	/^  ~AsyncConnection() override;$/;"	m	class:AsyncConnection
override	async/AsyncMessenger.h	/^  ConnectionRef get_connection(const entity_inst_t& dest) override;$/;"	m	class:AsyncMessenger
override	async/AsyncMessenger.h	/^  ConnectionRef get_loopback_connection() override;$/;"	m	class:AsyncMessenger
override	async/AsyncMessenger.h	/^  int bind(const entity_addr_t& bind_addr) override;$/;"	m	class:AsyncMessenger
override	async/AsyncMessenger.h	/^  int client_bind(const entity_addr_t& bind_addr) override;$/;"	m	class:AsyncMessenger
override	async/AsyncMessenger.h	/^  int rebind(const set<int>& avoid_ports) override;$/;"	m	class:AsyncMessenger
override	async/AsyncMessenger.h	/^  int shutdown() override;$/;"	m	class:AsyncMessenger
override	async/AsyncMessenger.h	/^  int start() override;$/;"	m	class:AsyncMessenger
override	async/AsyncMessenger.h	/^  void mark_down(const entity_addr_t& addr) override;$/;"	m	class:AsyncMessenger
override	async/AsyncMessenger.h	/^  void ready() override;$/;"	m	class:AsyncMessenger
override	async/AsyncMessenger.h	/^  void set_addr(const entity_addr_t &addr) override;$/;"	m	class:AsyncMessenger
override	async/AsyncMessenger.h	/^  void set_addr_unknowns(const entity_addr_t &addr) override;$/;"	m	class:AsyncMessenger
override	async/AsyncMessenger.h	/^  void wait() override;$/;"	m	class:AsyncMessenger
override	async/AsyncMessenger.h	/^  ~AsyncMessenger() override;$/;"	m	class:AsyncMessenger
override	async/EventEpoll.h	/^		 struct timeval *tp) override;$/;"	m	class:EpollDriver
override	async/EventEpoll.h	/^  int add_event(int fd, int cur_mask, int add_mask) override;$/;"	m	class:EpollDriver
override	async/EventEpoll.h	/^  int del_event(int fd, int cur_mask, int del_mask) override;$/;"	m	class:EpollDriver
override	async/EventEpoll.h	/^  int init(EventCenter *c, int nevent) override;$/;"	m	class:EpollDriver
override	async/EventEpoll.h	/^  int resize_events(int newsize) override;$/;"	m	class:EpollDriver
override	async/EventKqueue.h	/^		 struct timeval *tp) override;$/;"	m	class:KqueueDriver
override	async/EventKqueue.h	/^  int add_event(int fd, int cur_mask, int add_mask) override;$/;"	m	class:KqueueDriver
override	async/EventKqueue.h	/^  int del_event(int fd, int cur_mask, int del_mask) override;$/;"	m	class:KqueueDriver
override	async/EventKqueue.h	/^  int init(EventCenter *c, int nevent) override;$/;"	m	class:KqueueDriver
override	async/EventKqueue.h	/^  int resize_events(int newsize) override;$/;"	m	class:KqueueDriver
override	async/EventSelect.h	/^		 struct timeval *tp) override;$/;"	m	class:SelectDriver
override	async/EventSelect.h	/^  int add_event(int fd, int cur_mask, int add_mask) override;$/;"	m	class:SelectDriver
override	async/EventSelect.h	/^  int del_event(int fd, int cur_mask, int del_mask) override;$/;"	m	class:SelectDriver
override	async/EventSelect.h	/^  int init(EventCenter *c, int nevent) override;$/;"	m	class:SelectDriver
override	async/EventSelect.h	/^  int resize_events(int newsize) override;$/;"	m	class:SelectDriver
override	async/PosixStack.cc	/^  int accept(ConnectedSocket *sock, const SocketOptions &opts, entity_addr_t *out, Worker *w) override;$/;"	m	class:PosixServerSocketImpl	file:
override	async/PosixStack.h	/^                     ServerSocket *socks) override;$/;"	m	class:PosixWorker
override	async/PosixStack.h	/^  int connect(const entity_addr_t &addr, const SocketOptions &opts, ConnectedSocket *socket) override;$/;"	m	class:PosixWorker
override	async/PosixStack.h	/^  void initialize() override;$/;"	m	class:PosixWorker
override	async/dpdk/ARP.h	/^  virtual int received(Packet p) override;$/;"	m	class:arp_for
override	async/dpdk/DPDKStack.h	/^  virtual int accept(ConnectedSocket *s, const SocketOptions &opts, entity_addr_t *out, Worker *w) override;$/;"	m	class:DPDKServerSocketImpl
override	async/dpdk/DPDKStack.h	/^  virtual int connect(const entity_addr_t &addr, const SocketOptions &opts, ConnectedSocket *socket) override;$/;"	m	class:DPDKWorker
override	async/dpdk/DPDKStack.h	/^  virtual int listen(entity_addr_t &addr, const SocketOptions &opts, ServerSocket *) override;$/;"	m	class:DPDKWorker
override	async/dpdk/DPDKStack.h	/^  virtual void abort_accept() override;$/;"	m	class:DPDKServerSocketImpl
override	async/dpdk/DPDKStack.h	/^  virtual void spawn_worker(unsigned i, std::function<void ()> &&func) override;$/;"	m	class:DPDKStack
override	async/dpdk/EventDPDK.h	/^  int add_event(int fd, int cur_mask, int add_mask) override;$/;"	m	class:DPDKDriver
override	async/dpdk/EventDPDK.h	/^  int del_event(int fd, int cur_mask, int del_mask) override;$/;"	m	class:DPDKDriver
override	async/dpdk/EventDPDK.h	/^  int event_wait(vector<FiredFileEvent> &fired_events, struct timeval *tp) override;$/;"	m	class:DPDKDriver
override	async/dpdk/EventDPDK.h	/^  int init(EventCenter *c, int nevent) override;$/;"	m	class:DPDKDriver
override	async/dpdk/EventDPDK.h	/^  int resize_events(int newsize) override;$/;"	m	class:DPDKDriver
override	async/dpdk/IP.h	/^  virtual bool forward(forward_hash& out_hash_data, Packet& p, size_t off) override;$/;"	m	class:final
override	async/rdma/RDMAStack.h	/^  virtual int accept(ConnectedSocket *s, const SocketOptions &opts, entity_addr_t *out, Worker *w) override;$/;"	m	class:RDMAServerSocketImpl
override	async/rdma/RDMAStack.h	/^  virtual int connect(const entity_addr_t &addr, const SocketOptions &opts, ConnectedSocket *socket) override;$/;"	m	class:RDMAWorker
override	async/rdma/RDMAStack.h	/^  virtual int listen(entity_addr_t &addr, const SocketOptions &opts, ServerSocket *) override;$/;"	m	class:RDMAWorker
override	async/rdma/RDMAStack.h	/^  virtual ssize_t read(char* buf, size_t len) override;$/;"	m	class:RDMAConnectedSocketImpl
override	async/rdma/RDMAStack.h	/^  virtual ssize_t send(bufferlist &bl, bool more) override;$/;"	m	class:RDMAConnectedSocketImpl
override	async/rdma/RDMAStack.h	/^  virtual ssize_t zero_copy_read(bufferptr &data) override;$/;"	m	class:RDMAConnectedSocketImpl
override	async/rdma/RDMAStack.h	/^  virtual void abort_accept() override;$/;"	m	class:RDMAServerSocketImpl
override	async/rdma/RDMAStack.h	/^  virtual void close() override;$/;"	m	class:RDMAConnectedSocketImpl
override	async/rdma/RDMAStack.h	/^  virtual void initialize() override;$/;"	m	class:RDMAWorker
override	async/rdma/RDMAStack.h	/^  virtual void join_worker(unsigned i) override;$/;"	m	class:RDMAStack
override	async/rdma/RDMAStack.h	/^  virtual void shutdown() override;$/;"	m	class:RDMAConnectedSocketImpl
override	async/rdma/RDMAStack.h	/^  virtual void spawn_worker(unsigned i, std::function<void ()> &&func) override;$/;"	m	class:RDMAStack
override	simple/Accepter.h	/^  void *entry() override;$/;"	m	class:Accepter
override	simple/Pipe.cc	/^  void *entry() override;$/;"	m	class:Pipe::DelayedDelivery	file:
override	simple/Pipe.h	/^    ~Pipe() override;$/;"	m	class:Pipe
override	simple/PipeConnection.h	/^  bool is_connected() override;$/;"	m	class:PipeConnection
override	simple/PipeConnection.h	/^  int send_message(Message *m) override;$/;"	m	class:PipeConnection
override	simple/PipeConnection.h	/^  void mark_disposable() override;$/;"	m	class:PipeConnection
override	simple/PipeConnection.h	/^  void mark_down() override;$/;"	m	class:PipeConnection
override	simple/PipeConnection.h	/^  void send_keepalive() override;$/;"	m	class:PipeConnection
override	simple/PipeConnection.h	/^  ~PipeConnection() override;$/;"	m	class:PipeConnection
override	simple/SimpleMessenger.h	/^  ConnectionRef get_connection(const entity_inst_t& dest) override;$/;"	m	class:SimpleMessenger
override	simple/SimpleMessenger.h	/^  ConnectionRef get_loopback_connection() override;$/;"	m	class:SimpleMessenger
override	simple/SimpleMessenger.h	/^  int bind(const entity_addr_t& bind_addr) override;$/;"	m	class:SimpleMessenger
override	simple/SimpleMessenger.h	/^  int client_bind(const entity_addr_t& bind_addr) override;$/;"	m	class:SimpleMessenger
override	simple/SimpleMessenger.h	/^  int rebind(const set<int>& avoid_ports) override;$/;"	m	class:SimpleMessenger
override	simple/SimpleMessenger.h	/^  int shutdown() override;$/;"	m	class:SimpleMessenger
override	simple/SimpleMessenger.h	/^  int start() override;$/;"	m	class:SimpleMessenger
override	simple/SimpleMessenger.h	/^  void mark_down(const entity_addr_t& addr) override;$/;"	m	class:SimpleMessenger
override	simple/SimpleMessenger.h	/^  void mark_down_all() override;$/;"	m	class:SimpleMessenger
override	simple/SimpleMessenger.h	/^  void ready() override;$/;"	m	class:SimpleMessenger
override	simple/SimpleMessenger.h	/^  void set_addr(const entity_addr_t &addr) override;$/;"	m	class:SimpleMessenger
override	simple/SimpleMessenger.h	/^  void set_addr_unknowns(const entity_addr_t& addr) override;$/;"	m	class:SimpleMessenger
override	simple/SimpleMessenger.h	/^  void wait() override;$/;"	m	class:SimpleMessenger
override	simple/SimpleMessenger.h	/^  ~SimpleMessenger() override;$/;"	m	class:SimpleMessenger
override	xio/XioConnection.h	/^  int send_message(Message *m) override;$/;"	m	class:XioConnection
override	xio/XioConnection.h	/^  int send_message(Message *m) override;$/;"	m	class:XioLoopbackConnection
override	xio/XioConnection.h	/^  void mark_disposable() override;$/;"	m	class:XioConnection
override	xio/XioConnection.h	/^  void mark_down() override;$/;"	m	class:XioConnection
override	xio/XioConnection.h	/^  void send_keepalive() override;$/;"	m	class:XioLoopbackConnection
override	xio/XioMsg.h	/^  void print_debug(CephContext *cct, const char *tag) const override;$/;"	m	struct:XioMsg
owner	async/Event.h	/^    EventCenter* owner;$/;"	m	class:EventCenter::Poller
owner	async/Event.h	/^  pthread_t owner;$/;"	m	class:EventCenter
p	async/dpdk/IP.h	/^    Packet p;$/;"	m	struct:ipv4_traits::l4packet
p	async/dpdk/TCP.h	/^      Packet p;$/;"	m	struct:tcp_state::tcp_option::option_kind::tcp::tcb::unacked_segment
p	async/dpdk/net.cc	/^  Packet p;$/;"	m	class:C_handle_l2forward	file:
p	async/dpdk/net.h	/^    Packet p;$/;"	m	struct:l3_protocol::l3packet
p	xio/XioInSeq.h	/^  bool p() { return !!head; }$/;"	f	class:XioInSeq
p_vec	xio/XioPortal.h	/^  char **p_vec;$/;"	m	class:XioPortals
package_init	xio/XioMessenger.cc	/^void XioInit::package_init(CephContext *cct) {$/;"	f	class:XioInit
packet_filter	async/dpdk/IP.h	/^  ip_packet_filter * packet_filter() const {$/;"	f	class:ipv4
packet_merger	async/dpdk/PacketUtil.h	/^class packet_merger {$/;"	c
packet_read_size	async/dpdk/DPDK.cc	/^static constexpr uint8_t packet_read_size        = 32;$/;"	v	file:
packet_stream	async/dpdk/net.h	/^    stream<Packet, ethernet_address> packet_stream;$/;"	m	struct:interface::l3_rx_stream
paddr	async/dpdk/ARP.h	/^    l3addr paddr;$/;"	m	class:arp_for::C_handle_arp_timeout
parse	async/dpdk/TCP.cc	/^void tcp_option::parse(uint8_t* beg, uint8_t* end)$/;"	f	class:tcp_option
parse	msg_types.cc	/^bool entity_addr_t::parse(const char *s, const char **end)$/;"	f	class:entity_addr_t
parse	msg_types.h	/^  bool parse(const char *start, char **end) {$/;"	f	class:entity_name_t
parse	msg_types.h	/^  bool parse(const string& s) {$/;"	f	class:entity_name_t
parse_available_address	async/dpdk/DPDKStack.cc	/^static bool parse_available_address($/;"	f	file:
partial_ack	async/dpdk/TCP.h	/^      uint32_t partial_ack = 0;$/;"	m	struct:tcp_state::tcp_option::option_kind::tcp::tcb::send
pass_wc	async/rdma/RDMAConnectedSocketImpl.cc	/^void RDMAConnectedSocketImpl::pass_wc(std::vector<ibv_wc> &&v)$/;"	f	class:RDMAConnectedSocketImpl
passive_setup	xio/XioConnection.cc	/^int XioConnection::passive_setup()$/;"	f	class:XioConnection
payload	Message.h	/^  bufferlist       payload;          \/\/ "front" unaligned blob$/;"	m	class:Message
payload	xio/XioPool.h	/^    char payload[MB];$/;"	m	struct:XioPool::xio_piece
pd	async/rdma/Infiniband.h	/^    ProtectionDomain *pd;$/;"	m	class:Infiniband::MemoryManager
pd	async/rdma/Infiniband.h	/^    ibv_pd*      pd;             \/\/ protection domain$/;"	m	class:Infiniband::QueuePair
pd	async/rdma/Infiniband.h	/^    ibv_pd* const pd;$/;"	m	class:Infiniband::ProtectionDomain
pd	async/rdma/Infiniband.h	/^  ProtectionDomain *pd = NULL;$/;"	m	class:Infiniband
peek_sent_available	async/dpdk/TCP.h	/^    uint64_t peek_sent_available() {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::connection
peek_sent_available	async/dpdk/TCP.h	/^    uint64_t peek_sent_available() {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::tcb
peer	xio/XioConnection.h	/^  entity_inst_t peer;$/;"	m	class:XioConnection
peer_addr	Connection.h	/^  entity_addr_t peer_addr;$/;"	m	struct:Connection
peer_addr	simple/Pipe.h	/^    entity_addr_t peer_addr;$/;"	m	class:Pipe
peer_global_seq	async/AsyncConnection.h	/^  __u32 connect_seq, peer_global_seq;$/;"	m	class:AsyncConnection
peer_global_seq	simple/Pipe.h	/^    __u32 connect_seq, peer_global_seq;$/;"	m	class:Pipe
peer_global_seq	xio/XioConnection.h	/^    uint32_t connect_seq, global_seq, peer_global_seq;$/;"	m	class:XioConnection::CState
peer_global_seq	xio/XioConnection.h	/^    uint32_t connect_seq, peer_global_seq;$/;"	m	struct:XioConnection::lifecycle
peer_is_client	Connection.h	/^  bool peer_is_client() const { return peer_type == CEPH_ENTITY_TYPE_CLIENT; }$/;"	f	struct:Connection
peer_is_mds	Connection.h	/^  bool peer_is_mds() const { return peer_type == CEPH_ENTITY_TYPE_MDS; }$/;"	f	struct:Connection
peer_is_mgr	Connection.h	/^  bool peer_is_mgr() const { return peer_type == CEPH_ENTITY_TYPE_MGR; }$/;"	f	struct:Connection
peer_is_mon	Connection.h	/^  bool peer_is_mon() const { return peer_type == CEPH_ENTITY_TYPE_MON; }$/;"	f	struct:Connection
peer_is_osd	Connection.h	/^  bool peer_is_osd() const { return peer_type == CEPH_ENTITY_TYPE_OSD; }$/;"	f	struct:Connection
peer_msg	async/rdma/RDMAStack.h	/^  IBSYNMsg peer_msg;$/;"	m	class:RDMAConnectedSocketImpl
peer_qpn	async/rdma/Infiniband.h	/^  uint32_t peer_qpn;$/;"	m	struct:IBSYNMsg
peer_type	Connection.h	/^  int peer_type;$/;"	m	struct:Connection
peer_type	simple/Pipe.h	/^    int peer_type;$/;"	m	class:Pipe
peer_type	xio/XioMsg.h	/^  __le32 peer_type;$/;"	m	class:XioMsgHdr
pending	async/rdma/RDMAStack.h	/^  bool pending;$/;"	m	class:RDMAConnectedSocketImpl
pending_bind	async/AsyncMessenger.h	/^  bool pending_bind = false;$/;"	m	class:AsyncMessenger
pending_bind_addr	async/AsyncMessenger.h	/^  entity_addr_t pending_bind_addr;$/;"	m	class:AsyncMessenger
pending_bl	async/rdma/RDMAStack.h	/^  bufferlist pending_bl;$/;"	m	class:RDMAConnectedSocketImpl
pending_sent_conns	async/rdma/RDMAStack.h	/^  std::list<RDMAConnectedSocketImpl*> pending_sent_conns;$/;"	m	class:RDMAWorker
pending_workers	async/rdma/RDMAStack.h	/^  std::list<RDMAWorker*> pending_workers;$/;"	m	class:RDMADispatcher
perf_logger	async/Stack.h	/^  PerfCounters *perf_logger;$/;"	m	class:Worker
perf_logger	async/dpdk/DPDK.h	/^  PerfCounters *perf_logger;$/;"	m	class:DPDKDevice
perf_logger	async/dpdk/DPDK.h	/^  PerfCounters *perf_logger;$/;"	m	class:DPDKQueuePair
perf_logger	async/dpdk/IP.h	/^  PerfCounters *perf_logger;$/;"	m	class:ipv4
perf_logger	async/rdma/RDMAStack.h	/^  PerfCounters *perf_logger;$/;"	m	class:RDMADispatcher
perf_logger	async/rdma/RDMAStack.h	/^  PerfCounters *perf_logger;$/;"	m	class:RDMAWorker
persist	async/dpdk/TCP.cc	/^void tcp<InetTraits>::tcb::persist() {$/;"	f	class:tcp::tcb
persist_event	async/dpdk/TCP.h	/^    EventCallbackRef persist_event;$/;"	m	class:tcp_state::tcp_option::option_kind::tcp::tcb
persist_fd	async/dpdk/TCP.h	/^    Tub<uint64_t> persist_fd;$/;"	m	class:tcp_state::tcp_option::option_kind::tcp::tcb
pipe	simple/Pipe.cc	/^  Pipe *pipe;$/;"	m	class:Pipe::DelayedDelivery	file:
pipe	simple/Pipe.h	/^      Pipe *pipe;$/;"	m	class:Pipe::Reader
pipe	simple/Pipe.h	/^      Pipe *pipe;$/;"	m	class:Pipe::Writer
pipe	simple/PipeConnection.h	/^  Pipe* pipe;$/;"	m	class:PipeConnection
pipe_lock	simple/Pipe.h	/^    Mutex pipe_lock;$/;"	m	class:Pipe
pipe_mask	Messenger.h	/^    sigset_t pipe_mask;$/;"	m	struct:Messenger::sigpipe_stopper
pipe_reap_queue	simple/SimpleMessenger.h	/^  list<Pipe*>     pipe_reap_queue;$/;"	m	class:SimpleMessenger
pipes	simple/SimpleMessenger.h	/^  set<Pipe*>      pipes;$/;"	m	class:SimpleMessenger
pktmbuf_pool_name	async/dpdk/DPDK.cc	/^static constexpr const char* pktmbuf_pool_name   = "dpdk_net_pktmbuf_pool";$/;"	v	file:
plen	async/dpdk/ARP.h	/^    uint8_t plen;$/;"	m	struct:arp_for::arp_hdr
policy	async/AsyncConnection.h	/^  Messenger::Policy policy;$/;"	m	class:AsyncConnection
policy	simple/Pipe.h	/^    Messenger::Policy policy;$/;"	m	class:Pipe
policy	xio/XioConnection.h	/^    Messenger::Policy policy;$/;"	m	class:XioConnection::CState
policy_lock	SimplePolicyMessenger.h	/^  Mutex policy_lock;$/;"	m	class:SimplePolicyMessenger
policy_map	SimplePolicyMessenger.h	/^  map<int, Policy> policy_map; \/\/ entity_name_t::type -> Policy$/;"	m	class:SimplePolicyMessenger
poll	async/dpdk/DPDK.h	/^    virtual int poll() {$/;"	f	class:DPDKQueuePair::DPDKRXGCPoller
poll	async/dpdk/DPDK.h	/^    virtual int poll() {$/;"	f	class:DPDKQueuePair::DPDKRXPoller
poll	async/dpdk/DPDK.h	/^    virtual int poll() {$/;"	f	class:DPDKQueuePair::DPDKTXGCPoller
poll	async/dpdk/DPDK.h	/^    virtual int poll() {$/;"	f	class:DPDKQueuePair::DPDKTXPoller
poll	async/dpdk/UserspaceEvent.cc	/^int UserspaceEventManager::poll(int *events, int *masks, int num_events, struct timeval *tp)$/;"	f	class:UserspaceEventManager
poll_cq	async/rdma/Infiniband.cc	/^int Infiniband::CompletionQueue::poll_cq(int num_entries, ibv_wc *ret_wc_array) {$/;"	f	class:Infiniband::CompletionQueue
poll_rx_once	async/dpdk/DPDK.cc	/^bool DPDKQueuePair::poll_rx_once()$/;"	f	class:DPDKQueuePair
poll_tcb	async/dpdk/TCP.h	/^  void poll_tcb(const ethernet_address &dst, lw_shared_ptr<tcb> tcb) {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp
poll_tx	async/dpdk/DPDK.cc	/^bool DPDKQueuePair::poll_tx() {$/;"	f	class:DPDKQueuePair
poller_name	async/Event.h	/^    string poller_name;$/;"	m	class:EventCenter::Poller
pollers	async/Event.h	/^  std::vector<Poller*> pollers;$/;"	m	class:EventCenter
polling	async/rdma/RDMAStack.cc	/^void RDMADispatcher::polling()$/;"	f	class:RDMADispatcher
polling_start	async/rdma/RDMAStack.cc	/^void RDMADispatcher::polling_start()$/;"	f	class:RDMADispatcher
polling_stop	async/rdma/RDMAStack.cc	/^void RDMADispatcher::polling_stop()$/;"	f	class:RDMADispatcher
pool_alloc_markdown_hook	xio/XioMessenger.cc	/^static inline XioMarkDownHook* pool_alloc_markdown_hook($/;"	f	file:
pool_alloc_xio_command	xio/XioMessenger.cc	/^XioCommand* pool_alloc_xio_command(XioConnection *xcon)$/;"	f
pool_alloc_xio_dispatch_hook	xio/XioConnection.cc	/^static inline XioDispatchHook* pool_alloc_xio_dispatch_hook($/;"	f	file:
pool_alloc_xio_msg	xio/XioMessenger.cc	/^static inline XioMsg* pool_alloc_xio_msg(Message *m, XioConnection *xcon,$/;"	f	file:
pool_hint	xio/XioMessenger.cc	/^int XioMessenger::pool_hint(uint32_t dsize) {$/;"	f	class:XioMessenger
pool_sizes	xio/XioPool.h	/^  enum pool_sizes {$/;"	g	class:XioPoolStats
pool_spin	async/Stack.h	/^  Spinlock pool_spin;$/;"	m	class:NetworkStack
pop	async/dpdk/queue.h	/^inline T queue<T>::pop() {$/;"	f	class:queue
pop_back	async/dpdk/circular_buffer.h	/^inline void circular_buffer<T, Alloc>::pop_back() {$/;"	f	class:circular_buffer
pop_front	async/dpdk/circular_buffer.h	/^inline void circular_buffer<T, Alloc>::pop_front() {$/;"	f	class:circular_buffer
port	async/AsyncConnection.h	/^  int port;$/;"	m	class:AsyncConnection
port	async/dpdk/DPDK.h	/^  DPDKDevice& port() const { return *_dev; }$/;"	f	class:DPDKQueuePair
port	async/dpdk/ip_types.h	/^  uint16_t port;$/;"	m	struct:ipv4_addr
port	simple/Pipe.h	/^    int port;$/;"	m	class:Pipe
port_attr	async/rdma/Infiniband.h	/^  struct ibv_port_attr* port_attr;$/;"	m	class:Port	typeref:struct:Port::ibv_port_attr
port_cnt	async/rdma/Infiniband.h	/^  uint8_t  port_cnt;$/;"	m	class:Device
port_idx	async/dpdk/DPDK.h	/^  uint8_t port_idx() { return _port_idx; }$/;"	f	class:DPDKDevice
port_num	async/rdma/Infiniband.h	/^  int port_num;$/;"	m	class:Port
port_num	async/rdma/Infiniband.h	/^  uint8_t port_num;$/;"	m	class:Infiniband
portal	xio/XioConnection.h	/^  XioPortal *portal;$/;"	m	class:XioConnection
portal_id	xio/XioPortal.h	/^  char *portal_id;$/;"	m	class:XioPortal
portals	xio/XioMessenger.h	/^  XioPortals portals;$/;"	m	class:XioMessenger
portals	xio/XioPortal.h	/^  vector<XioPortal*> portals;$/;"	m	class:XioPortals
post_channel_cluster	async/rdma/Infiniband.cc	/^int Infiniband::post_channel_cluster()$/;"	f	class:Infiniband
post_chunk	async/rdma/Infiniband.cc	/^int Infiniband::post_chunk(Chunk* chunk)$/;"	f	class:Infiniband
post_dispatch	DispatchQueue.cc	/^void DispatchQueue::post_dispatch(Message *m, uint64_t msize)$/;"	f	class:DispatchQueue
post_rx_buffer	Connection.h	/^  void post_rx_buffer(ceph_tid_t tid, bufferlist& bl) {$/;"	f	struct:Connection
post_srq	async/rdma/Infiniband.cc	/^void Infiniband::MemoryManager::Chunk::post_srq(Infiniband *ib)$/;"	f	class:Infiniband::MemoryManager::Chunk
post_tx_buffer	async/rdma/RDMAStack.cc	/^void RDMADispatcher::post_tx_buffer(std::vector<Chunk*> &chunks)$/;"	f	class:RDMADispatcher
post_work_request	async/rdma/RDMAConnectedSocketImpl.cc	/^int RDMAConnectedSocketImpl::post_work_request(std::vector<Chunk*> &tx_buffers)$/;"	f	class:RDMAConnectedSocketImpl
pre_dispatch	DispatchQueue.cc	/^uint64_t DispatchQueue::pre_dispatch(Message *m)$/;"	f	class:DispatchQueue
prepare_read	async/rdma/Infiniband.cc	/^void Infiniband::MemoryManager::Chunk::prepare_read(uint32_t b)$/;"	f	class:Infiniband::MemoryManager::Chunk
prepare_send_message	async/AsyncConnection.cc	/^void AsyncConnection::prepare_send_message(uint64_t features, Message *m, bufferlist &bl)$/;"	f	class:AsyncConnection
prepend_header	async/dpdk/Packet.h	/^Header* Packet::prepend_header(size_t extra_size) {$/;"	f	class:Packet
prepend_uninitialized_header	async/dpdk/Packet.h	/^inline char* Packet::prepend_uninitialized_header(size_t size) {$/;"	f	class:Packet
print	Message.h	/^  virtual void print(ostream& out) const {$/;"	f	class:Message
print_ceph_msg	xio/XioConnection.cc	/^void print_ceph_msg(CephContext *cct, const char *tag, Message *m)$/;"	f
print_debug	xio/XioMsg.cc	/^void XioMsg::print_debug(CephContext *cct, const char *tag) const {$/;"	f	class:XioMsg
print_debug	xio/XioMsg.h	/^  virtual void print_debug(CephContext *cct, const char *tag) const {};$/;"	f	class:XioSend
print_xio_msg_hdr	xio/XioConnection.cc	/^void print_xio_msg_hdr(CephContext *cct, const char *tag,$/;"	f
priority	async/Stack.h	/^  int priority = -1;$/;"	m	struct:SocketOptions
priv	Connection.h	/^  RefCountedObject *priv;$/;"	m	struct:Connection
private_end	async/dpdk/DPDK.h	/^    MARKER private_end;$/;"	m	class:DPDKQueuePair::tx_buf
private_start	async/dpdk/DPDK.h	/^    MARKER private_start;$/;"	m	class:DPDKQueuePair::tx_buf
pro	async/AsyncMessenger.cc	/^  Processor *pro;$/;"	m	class:Processor::C_processor_accept	file:
probably_equals	msg_types.h	/^  bool probably_equals(const entity_addr_t &o) const {$/;"	f	struct:entity_addr_t
process	async/AsyncConnection.cc	/^void AsyncConnection::process()$/;"	f	class:AsyncConnection
process_events	async/Event.cc	/^int EventCenter::process_events(int timeout_microseconds,  ceph::timespan *working_dur)$/;"	f	class:EventCenter
process_packet	async/dpdk/ARP.cc	/^int arp::process_packet(Packet p, ethernet_address from)$/;"	f	class:arp
process_packets	async/dpdk/DPDK.cc	/^void DPDKQueuePair::process_packets($/;"	f	class:DPDKQueuePair
process_time_events	async/Event.cc	/^int EventCenter::process_time_events()$/;"	f	class:EventCenter
processors	async/AsyncMessenger.h	/^  std::vector<Processor*> processors;$/;"	m	class:AsyncMessenger
produce	async/dpdk/stream.h	/^  int produce(T... data) {$/;"	f	class:stream
proto_num	async/dpdk/IP.h	/^    ip_protocol_num proto_num;$/;"	m	struct:ipv4_traits::l4packet
proto_num	async/dpdk/net.h	/^    eth_protocol_num proto_num;$/;"	m	struct:l3_protocol::l3packet
protocol	async/dpdk/IP.h	/^  uint8_t protocol;$/;"	m	struct:ipv4_frag_id
protocol	async/dpdk/Packet.h	/^  ip_protocol_num protocol = ip_protocol_num::unused;$/;"	m	struct:offload_info
protocol_version	xio/XioConnection.h	/^    uint32_t protocol_version;$/;"	m	class:XioConnection::CState
proxy_send	async/dpdk/DPDK.h	/^  void proxy_send(Packet p) {$/;"	f	class:DPDKQueuePair
pseudo_vector	async/dpdk/Packet.h	/^    pseudo_vector(fragment* start, size_t nr)$/;"	f	struct:Packet::pseudo_vector
pseudo_vector	async/dpdk/Packet.h	/^  struct pseudo_vector {$/;"	s	class:Packet
psn	async/rdma/Infiniband.h	/^  uint32_t psn;$/;"	m	struct:IBSYNMsg
ptype	async/dpdk/ARP.h	/^    uint16_t ptype;$/;"	m	struct:arp::arp_hdr
ptype	async/dpdk/ARP.h	/^    uint16_t ptype;$/;"	m	struct:arp_for::arp_hdr
push	async/dpdk/queue.h	/^inline bool queue<T>::push(T&& data) {$/;"	f	class:queue
push_back	async/dpdk/circular_buffer.h	/^inline void circular_buffer<T, Alloc>::push_back(T&& data) {$/;"	f	class:circular_buffer
push_back	async/dpdk/circular_buffer.h	/^inline void circular_buffer<T, Alloc>::push_back(const T& data) {$/;"	f	class:circular_buffer
push_back	async/dpdk/net.h	/^  void push_back(uint16_t b) {$/;"	f	class:forward_hash
push_back	async/dpdk/net.h	/^  void push_back(uint32_t b) {$/;"	f	class:forward_hash
push_back	async/dpdk/net.h	/^  void push_back(uint8_t b) {$/;"	f	class:forward_hash
push_front	async/dpdk/circular_buffer.h	/^inline void circular_buffer<T, Alloc>::push_front(T&& data) {$/;"	f	class:circular_buffer
push_front	async/dpdk/circular_buffer.h	/^inline void circular_buffer<T, Alloc>::push_front(const T& data) {$/;"	f	class:circular_buffer
push_listen_queue	async/dpdk/TCP.h	/^  bool push_listen_queue(uint16_t port, tcb *t) {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp
put	async/dpdk/DPDK.h	/^    void put(tx_buf* buf) {$/;"	f	class:DPDKQueuePair::tx_buf_factory
put	xio/XioConnection.h	/^  void put() {$/;"	f	class:XioConnection
put	xio/XioMsg.h	/^  void put() {$/;"	f	class:XioSend
put	xio/XioMsg.h	/^  void put(int n = 1) {$/;"	f	class:XioDispatchHook
put	xio/XioMsg.h	/^  void put(int n) {$/;"	f	class:XioSend
put_msg_refs	xio/XioMsg.h	/^  void put_msg_refs() {$/;"	f	class:XioSend
q	xio/XioPortal.h	/^      XioSubmit::Queue q;$/;"	m	struct:XioPortal::SubmitQueue::Lane
q_high_mark	xio/XioConnection.h	/^  int q_high_mark;$/;"	m	class:XioConnection
q_key	async/rdma/Infiniband.h	/^    uint32_t     q_key;$/;"	m	class:Infiniband::QueuePair
q_low_mark	xio/XioConnection.h	/^  int q_low_mark;$/;"	m	class:XioConnection
qlane	xio/XioPortal.h	/^    Lane qlane[nlanes];$/;"	m	struct:XioPortal::SubmitQueue
qp	async/dpdk/DPDK.h	/^    DPDKQueuePair *qp;$/;"	m	class:DPDKQueuePair::DPDKRXGCPoller
qp	async/dpdk/DPDK.h	/^    DPDKQueuePair *qp;$/;"	m	class:DPDKQueuePair::DPDKRXPoller
qp	async/dpdk/DPDK.h	/^    DPDKQueuePair *qp;$/;"	m	class:DPDKQueuePair::DPDKTXGCPoller
qp	async/dpdk/DPDK.h	/^    DPDKQueuePair *qp;$/;"	m	class:DPDKQueuePair::DPDKTXPoller
qp	async/rdma/Infiniband.h	/^    ibv_qp*      qp;             \/\/ infiniband verbs QP handle$/;"	m	class:Infiniband::QueuePair
qp	async/rdma/RDMAStack.h	/^  Infiniband::QueuePair *qp;$/;"	m	class:RDMAConnectedSocketImpl
qp_conns	async/rdma/RDMAStack.h	/^  ceph::unordered_map<uint32_t, std::pair<QueuePair*, RDMAConnectedSocketImpl*> > qp_conns;$/;"	m	class:RDMADispatcher
qp_mempool_obj_size	async/dpdk/DPDK.cc	/^uint32_t qp_mempool_obj_size()$/;"	f
qp_state_string	async/rdma/Infiniband.cc	/^const char* Infiniband::qp_state_string(int status) {$/;"	f	class:Infiniband
qpn	async/rdma/Infiniband.h	/^  uint32_t qpn;$/;"	m	struct:IBSYNMsg
queue	async/AsyncConnection.h	/^    void queue(double delay_period, utime_t release, Message *m) {$/;"	f	class:AsyncConnection::DelayedDelivery
queue	async/dpdk/queue.h	/^  explicit queue(size_t size): _max(size) {}$/;"	f	class:queue
queue	async/dpdk/queue.h	/^class queue {$/;"	c
queue	simple/Pipe.cc	/^  void queue(utime_t release, Message *m) {$/;"	f	class:Pipe::DelayedDelivery
queue_accept	DispatchQueue.h	/^  void queue_accept(Connection *con) {$/;"	f	class:DispatchQueue
queue_connect	DispatchQueue.h	/^  void queue_connect(Connection *con) {$/;"	f	class:DispatchQueue
queue_depth	async/dpdk/net.cc	/^  unsigned &queue_depth;$/;"	m	class:C_handle_l2forward	file:
queue_depth	async/rdma/Infiniband.h	/^    uint32_t queue_depth;$/;"	m	class:Infiniband::CompletionQueue
queue_for_cpu	async/dpdk/DPDK.h	/^  DPDKQueuePair& queue_for_cpu(unsigned cpu) { return *_queues[cpu]; }$/;"	f	class:DPDKDevice
queue_packet	async/dpdk/TCP.h	/^    void queue_packet(Packet p) {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::tcb
queue_reap	simple/SimpleMessenger.cc	/^void SimpleMessenger::queue_reap(Pipe *pipe)$/;"	f	class:SimpleMessenger
queue_refused	DispatchQueue.h	/^  void queue_refused(Connection *con) {$/;"	f	class:DispatchQueue
queue_remote_reset	DispatchQueue.h	/^  void queue_remote_reset(Connection *con) {$/;"	f	class:DispatchQueue
queue_reset	DispatchQueue.h	/^  void queue_reset(Connection *con) {$/;"	f	class:DispatchQueue
queued_len	async/dpdk/TCP.h	/^      uint32_t queued_len = 0;$/;"	m	struct:tcp_state::tcp_option::option_kind::tcp::tcb::send
randomize_out_seq	async/AsyncConnection.cc	/^int AsyncConnection::randomize_out_seq()$/;"	f	class:AsyncConnection
randomize_out_seq	simple/Pipe.cc	/^int Pipe::randomize_out_seq()$/;"	f	class:Pipe
rank_pipe	simple/SimpleMessenger.h	/^  ceph::unordered_map<entity_addr_t, Pipe*> rank_pipe;$/;"	m	class:SimpleMessenger
raw	async/dpdk/TCP.h	/^  uint32_t raw;$/;"	m	struct:tcp_state::tcp_option::option_kind::tcp_sequence
rcbuf_size	async/Stack.h	/^  int rcbuf_size = 0;$/;"	m	struct:SocketOptions
read	async/Stack.h	/^  ssize_t read(char* buf, size_t len) {$/;"	f	class:ConnectedSocket
read	async/dpdk/TCP.h	/^    Tub<Packet> read() {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::connection
read	async/dpdk/TCP.h	/^Tub<Packet> tcp<InetTraits>::tcb::read() {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::tcb
read	async/rdma/Infiniband.cc	/^uint32_t Infiniband::MemoryManager::Chunk::read(char* buf, uint32_t len)$/;"	f	class:Infiniband::MemoryManager::Chunk
read	async/rdma/RDMAConnectedSocketImpl.cc	/^ssize_t RDMAConnectedSocketImpl::read(char* buf, size_t len)$/;"	f	class:RDMAConnectedSocketImpl
read_buffers	async/rdma/RDMAConnectedSocketImpl.cc	/^ssize_t RDMAConnectedSocketImpl::read_buffers(char* buf, size_t len)$/;"	f	class:RDMAConnectedSocketImpl
read_bulk	async/AsyncConnection.cc	/^ssize_t AsyncConnection::read_bulk(char *buf, unsigned len)$/;"	f	class:AsyncConnection
read_cb	async/Event.h	/^    EventCallbackRef read_cb;$/;"	m	struct:EventCenter::FileEvent
read_errno	async/dpdk/UserspaceEvent.h	/^    int16_t read_errno = 0;$/;"	m	struct:UserspaceEventManager::UserspaceFDImpl
read_handler	async/AsyncConnection.h	/^  EventCallbackRef read_handler;$/;"	m	class:AsyncConnection
read_message	simple/Pipe.cc	/^int Pipe::read_message(Message **pm, AuthSessionHandler* auth_handler)$/;"	f	class:Pipe
read_until	async/AsyncConnection.cc	/^ssize_t AsyncConnection::read_until(unsigned len, char *p)$/;"	f	class:AsyncConnection
reader	simple/Pipe.cc	/^void Pipe::reader()$/;"	f	class:Pipe
reader_dispatching	simple/Pipe.h	/^    bool reader_dispatching; \/\/\/ reader thread is dispatching without pipe_lock$/;"	m	class:Pipe
reader_needs_join	simple/Pipe.h	/^    bool reader_running, reader_needs_join;$/;"	m	class:Pipe
reader_running	simple/Pipe.h	/^    bool reader_running, reader_needs_join;$/;"	m	class:Pipe
reader_thread	simple/Pipe.h	/^    } reader_thread;$/;"	m	class:Pipe	typeref:class:Pipe::Reader
ready	Messenger.h	/^  virtual void ready() { }$/;"	f	class:Messenger
ready	async/AsyncConnection.h	/^    bool ready() const { return !stop_dispatch && delay_queue.empty() && register_time_events.empty(); }$/;"	f	class:AsyncConnection::DelayedDelivery
ready	async/AsyncMessenger.cc	/^  void ready(std::string &type) {$/;"	f	struct:StackSingleton
ready	async/AsyncMessenger.cc	/^void AsyncMessenger::ready()$/;"	f	class:AsyncMessenger
ready	async/Stack.h	/^  virtual void ready() { };$/;"	f	class:NetworkStack
ready	async/dpdk/net.h	/^    bool ready() { return packet_stream.started(); }$/;"	f	struct:interface::l3_rx_stream
ready	async/dpdk/stream.h	/^  bool ready;$/;"	m	class:stream
ready	simple/SimpleMessenger.cc	/^void SimpleMessenger::ready()$/;"	f	class:SimpleMessenger
ready	xio/XioMessenger.h	/^  virtual void ready()$/;"	f	class:XioMessenger
reap_dead	async/AsyncMessenger.cc	/^int AsyncMessenger::reap_dead()$/;"	f	class:AsyncMessenger
reap_handler	async/AsyncMessenger.h	/^  EventCallbackRef reap_handler;$/;"	m	class:AsyncMessenger
reaper	simple/SimpleMessenger.cc	/^void SimpleMessenger::reaper()$/;"	f	class:SimpleMessenger
reaper_cond	simple/SimpleMessenger.h	/^  Cond reaper_cond;$/;"	m	class:SimpleMessenger
reaper_entry	simple/SimpleMessenger.cc	/^void SimpleMessenger::reaper_entry()$/;"	f	class:SimpleMessenger
reaper_started	simple/SimpleMessenger.h	/^  bool reaper_started, reaper_stop;$/;"	m	class:SimpleMessenger
reaper_stop	simple/SimpleMessenger.h	/^  bool reaper_started, reaper_stop;$/;"	m	class:SimpleMessenger
reaper_thread	simple/SimpleMessenger.h	/^  } reaper_thread;$/;"	m	class:SimpleMessenger	typeref:class:SimpleMessenger::ReaperThread
rearm_notify	async/rdma/Infiniband.cc	/^int Infiniband::CompletionQueue::rearm_notify(bool solicite_only)$/;"	f	class:Infiniband::CompletionQueue
reassembled	async/dpdk/Packet.h	/^  bool reassembled = false;$/;"	m	struct:offload_info
rebind	Messenger.h	/^  virtual int rebind(const set<int>& avoid_ports) { return -EOPNOTSUPP; }$/;"	f	class:Messenger
rebind	async/AsyncMessenger.cc	/^int AsyncMessenger::rebind(const set<int>& avoid_ports)$/;"	f	class:AsyncMessenger
rebind	simple/Accepter.cc	/^int Accepter::rebind(const set<int>& avoid_ports)$/;"	f	class:Accepter
rebind	simple/SimpleMessenger.cc	/^int SimpleMessenger::rebind(const set<int>& avoid_ports)$/;"	f	class:SimpleMessenger
rebind	xio/XioMessenger.cc	/^int XioMessenger::rebind(const set<int>& avoid_ports)$/;"	f	class:XioMessenger
receive	async/dpdk/DPDK.h	/^  subscription<Packet> receive(unsigned cpuid, std::function<int (Packet)> next_packet) {$/;"	f	class:DPDKDevice
receive	async/dpdk/TCP.h	/^    struct receive {$/;"	s	class:tcp_state::tcp_option::option_kind::tcp::tcb
receive	async/dpdk/net.cc	/^subscription<Packet, ethernet_address> l3_protocol::receive($/;"	f	class:l3_protocol
received	async/dpdk/ARP.h	/^int arp_for<L3>::received(Packet p) {$/;"	f	class:arp_for
received	async/dpdk/IP.cc	/^void icmp::received(Packet p, ipaddr from, ipaddr to) {$/;"	f	class:icmp
received	async/dpdk/IP.h	/^  virtual void received(Packet p, ipv4_address from, ipv4_address to) {$/;"	f	class:final
received	async/dpdk/TCP.cc	/^void ipv4_tcp::received(Packet p, ipv4_address from, ipv4_address to)$/;"	f	class:ipv4_tcp
received	async/dpdk/TCP.h	/^void tcp<InetTraits>::received(Packet p, ipaddr from, ipaddr to) {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp
reconnect	async/net_handler.cc	/^int NetHandler::reconnect(const entity_addr_t &addr, int sd)$/;"	f	class:ceph::NetHandler
reconnects	xio/XioConnection.h	/^    uint32_t reconnects;$/;"	m	class:XioConnection::CState
reconnects	xio/XioConnection.h	/^    uint32_t reconnects;$/;"	m	struct:XioConnection::lifecycle
recover	async/dpdk/TCP.h	/^      tcp_sequence recover;$/;"	m	struct:tcp_state::tcp_option::option_kind::tcp::tcb::send
recv	xio/XioConnection.h	/^  std::atomic<int64_t> recv = { 0 };$/;"	m	class:XioConnection
recv_buf	async/AsyncConnection.h	/^  char *recv_buf;$/;"	m	class:AsyncConnection
recv_buf	simple/Pipe.h	/^    char *recv_buf;$/;"	m	class:Pipe
recv_complete_stamp	Message.h	/^  utime_t recv_complete_stamp;       \/\/ 接收完成的时间戳$/;"	m	class:Message
recv_end	async/AsyncConnection.h	/^  uint32_t recv_end;$/;"	m	class:AsyncConnection
recv_len	simple/Pipe.h	/^    size_t recv_len;$/;"	m	class:Pipe
recv_max_prefetch	async/AsyncConnection.h	/^  uint32_t recv_max_prefetch;$/;"	m	class:AsyncConnection
recv_max_prefetch	simple/Pipe.h	/^    size_t recv_max_prefetch;$/;"	m	class:Pipe
recv_msg	async/rdma/Infiniband.cc	/^int Infiniband::recv_msg(CephContext *cct, int sd, IBSYNMsg& im)$/;"	f	class:Infiniband
recv_ofs	simple/Pipe.h	/^    size_t recv_ofs;$/;"	m	class:Pipe
recv_reset	simple/Pipe.h	/^    void recv_reset() {$/;"	f	class:Pipe
recv_stamp	Message.h	/^  utime_t recv_stamp;                \/\/ 开始接收数据的时间戳$/;"	m	class:Message
recv_stamp	async/AsyncConnection.h	/^  utime_t recv_stamp;$/;"	m	class:AsyncConnection
recv_start	async/AsyncConnection.h	/^  uint32_t recv_start;$/;"	m	class:AsyncConnection
recycle	async/dpdk/DPDK.h	/^    void recycle() {$/;"	f	class:DPDKQueuePair::tx_buf
references	async/Stack.h	/^  std::atomic_uint references;$/;"	m	class:Worker
refill_one_cluster	async/dpdk/DPDK.cc	/^inline bool DPDKQueuePair::refill_one_cluster(rte_mbuf* head)$/;"	f	class:DPDKQueuePair
refill_rx_mbuf	async/dpdk/DPDK.h	/^  static bool refill_rx_mbuf(rte_mbuf* m, size_t size,$/;"	f	class:DPDKQueuePair
register_l3	async/dpdk/net.cc	/^subscription<Packet, ethernet_address> interface::register_l3($/;"	f	class:interface
register_packet_provider	async/dpdk/DPDK.h	/^  void register_packet_provider(packet_provider_type func) {$/;"	f	class:DPDKQueuePair
register_packet_provider	async/dpdk/IP.h	/^  void register_packet_provider(ipv4_traits::packet_provider_type&& func) {$/;"	f	class:ipv4
register_packet_provider	async/dpdk/IP.h	/^inline void ipv4_l4<ProtoNum>::register_packet_provider($/;"	f	class:ipv4_l4
register_packet_provider	async/dpdk/net.h	/^  void register_packet_provider(l3_protocol::packet_provider_type func) {$/;"	f	class:interface
register_pipe	simple/Pipe.cc	/^void Pipe::register_pipe()$/;"	f	class:Pipe
register_qp	async/rdma/RDMAStack.cc	/^int RDMADispatcher::register_qp(QueuePair *qp, RDMAConnectedSocketImpl* csi)$/;"	f	class:RDMADispatcher
register_rx_tx	async/rdma/Infiniband.cc	/^void Infiniband::MemoryManager::register_rx_tx(uint32_t size, uint32_t rx_num, uint32_t tx_num)$/;"	f	class:Infiniband::MemoryManager
register_time_events	async/AsyncConnection.h	/^    std::set<uint64_t> register_time_events; \/\/ need to delete it if stop$/;"	m	class:AsyncConnection::DelayedDelivery
register_time_events	async/AsyncConnection.h	/^  set<uint64_t> register_time_events; \/\/ need to delete it if stop$/;"	m	class:AsyncConnection
release_message_throttle	Message.h	/^  void release_message_throttle() {$/;"	f	class:Message
release_msgs	xio/XioMsg.cc	/^int XioDispatchHook::release_msgs()$/;"	f	class:XioDispatchHook
release_worker	async/Stack.h	/^  void release_worker() {$/;"	f	class:Worker
release_xio_msg	xio/XioPortal.h	/^  inline void release_xio_msg(XioCompletion* xcmp) {$/;"	f	class:XioPortal
remote_addr	async/dpdk/TCP.h	/^    entity_addr_t remote_addr() const {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::connection
remove_arrival	DispatchQueue.h	/^  void remove_arrival(Message *m) {$/;"	f	class:DispatchQueue
remove_from_tcbs	async/dpdk/TCP.h	/^    void remove_from_tcbs() {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::tcb
remove_pending_conn	async/rdma/RDMAStack.h	/^  void remove_pending_conn(RDMAConnectedSocketImpl *o) {$/;"	f	class:RDMAWorker
replacing	async/AsyncConnection.h	/^  bool replacing;    \/\/ when replacing process happened, we will reply connect$/;"	m	class:AsyncConnection
req_0	xio/XioMsg.h	/^  xio_msg_ex req_0;$/;"	m	class:XioSend
req_arr	xio/XioMsg.h	/^  xio_msg_ex* req_arr;$/;"	m	struct:XioMsg
requeue	xio/XioConnection.h	/^    XioSubmit::Queue requeue;$/;"	m	struct:XioConnection::SendQ
requeue	xio/XioPortal.h	/^  void requeue(XioConnection* xcon, XioSubmit::Queue& send_q) {$/;"	f	class:XioPortal
requeue_all_xcon	xio/XioPortal.h	/^  void requeue_all_xcon(XioConnection* xcon,$/;"	f	class:XioPortal
requeue_sent	async/AsyncConnection.cc	/^void AsyncConnection::requeue_sent()$/;"	f	class:AsyncConnection
requeue_sent	simple/Pipe.cc	/^void Pipe::requeue_sent()$/;"	f	class:Pipe
res_events	async/EventKqueue.h	/^  struct kevent *res_events;$/;"	m	class:KqueueDriver	typeref:struct:KqueueDriver::kevent
reserve	async/dpdk/Packet.h	/^  void reserve(int n_frags) {$/;"	f	class:Packet
reserved	async/dpdk/IP.h	/^  enum class frag_bits : uint8_t { mf = 13, df = 14, reserved = 15, offset_shift = 3 };$/;"	m	class:ip_hdr::frag_bits
reset	async/Stack.h	/^  void reset() {$/;"	f	class:Worker
reset	async/dpdk/Packet.h	/^  void reset() { _impl.reset(); }$/;"	f	class:Packet
reset_pipe	simple/PipeConnection.cc	/^void PipeConnection::reset_pipe(Pipe *p)$/;"	f	class:PipeConnection
reset_recv_state	async/AsyncConnection.cc	/^void AsyncConnection::reset_recv_state()$/;"	f	class:AsyncConnection
reset_zc	async/dpdk/DPDK.h	/^    void reset_zc() {$/;"	f	class:DPDKQueuePair::tx_buf
resetcheck	Messenger.h	/^    bool resetcheck;$/;"	m	struct:Messenger::Policy
resize_events	async/EventEpoll.cc	/^int EpollDriver::resize_events(int newsize)$/;"	f	class:EpollDriver
resize_events	async/EventKqueue.cc	/^int KqueueDriver::resize_events(int newsize)$/;"	f	class:KqueueDriver
resize_events	async/EventSelect.cc	/^int SelectDriver::resize_events(int newsize)$/;"	f	class:SelectDriver
resize_events	async/dpdk/EventDPDK.cc	/^int DPDKDriver::resize_events(int newsize)$/;"	f	class:DPDKDriver
resolution	async/dpdk/ARP.h	/^  struct resolution {$/;"	s	class:arp_for
respond_with_reset	async/dpdk/TCP.cc	/^void tcp<InetTraits>::respond_with_reset(tcp_hdr* rth, ipaddr local_ip, ipaddr foreign_ip)$/;"	f	class:tcp
respond_with_reset	async/dpdk/TCP.h	/^void tcp<InetTraits>::tcb::respond_with_reset(tcp_hdr* rth)$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::tcb
rest	async/dpdk/IP.h	/^  uint32_t rest;$/;"	m	struct:icmp_hdr
restore_events	async/EventKqueue.cc	/^int KqueueDriver::restore_events() {$/;"	f	class:KqueueDriver
retransmit	async/dpdk/TCP.cc	/^void tcp<InetTraits>::tcb::retransmit()$/;"	f	class:tcp::tcb
retransmit_event	async/dpdk/TCP.h	/^    EventCallbackRef retransmit_event;$/;"	m	class:tcp_state::tcp_option::option_kind::tcp::tcb
retransmit_fd	async/dpdk/TCP.h	/^    Tub<uint64_t> retransmit_fd;$/;"	m	class:tcp_state::tcp_option::option_kind::tcp::tcb
retransmit_one	async/dpdk/TCP.h	/^    void retransmit_one() {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::tcb
return_tx	async/rdma/Infiniband.cc	/^void Infiniband::MemoryManager::return_tx(std::vector<Chunk*> &chunks)$/;"	f	class:Infiniband::MemoryManager
revoke_rx_buffer	Connection.h	/^  void revoke_rx_buffer(ceph_tid_t tid) {$/;"	f	struct:Connection
rfds	async/EventSelect.h	/^  fd_set rfds, wfds;$/;"	m	class:SelectDriver
rsp_pool	xio/XioMsg.h	/^  XioPool rsp_pool;$/;"	m	class:XioDispatchHook
rss_hash	async/dpdk/Packet.h	/^    Tub<uint32_t> rss_hash;$/;"	m	struct:Packet::impl
rss_hash	async/dpdk/Packet.h	/^  Tub<uint32_t> rss_hash() {$/;"	f	class:Packet
rss_key	async/dpdk/DPDK.h	/^  const rss_key_type& rss_key() const { return _rss_key; }$/;"	f	class:DPDKDevice
rss_key	async/dpdk/net.cc	/^const rss_key_type& interface::rss_key() const {$/;"	f	class:interface
rsvd1	async/dpdk/TCP.h	/^  uint8_t rsvd1 : 4;$/;"	m	struct:tcp_state::tcp_option::option_kind::tcp_hdr
rsvd2	async/dpdk/TCP.h	/^  uint8_t rsvd2 : 2;$/;"	m	struct:tcp_state::tcp_option::option_kind::tcp_hdr
rte_mbuf_p	async/dpdk/DPDK.h	/^    rte_mbuf* rte_mbuf_p() { return &_mbuf; }$/;"	f	class:DPDKQueuePair::tx_buf
rttvar	async/dpdk/TCP.h	/^      std::chrono::microseconds rttvar;$/;"	m	struct:tcp_state::tcp_option::option_kind::tcp::tcb::send
run_local_delivery	DispatchQueue.cc	/^void DispatchQueue::run_local_delivery()$/;"	f	class:DispatchQueue
rx_buffers	Connection.h	/^  map<ceph_tid_t,pair<bufferlist,int> > rx_buffers;$/;"	m	struct:Connection
rx_buffers_version	Connection.h	/^  int rx_buffers_version;$/;"	m	struct:Connection
rx_cc	async/rdma/RDMAStack.h	/^  Infiniband::CompletionChannel *tx_cc, *rx_cc;$/;"	m	class:RDMADispatcher
rx_count	async/dpdk/DPDK.h	/^  uint64_t rx_count = 0;$/;"	m	class:DPDKQueuePair
rx_cq	async/rdma/RDMAStack.h	/^  Infiniband::CompletionQueue* rx_cq;$/;"	m	class:RDMADispatcher
rx_csum_offload	async/dpdk/net.h	/^  bool rx_csum_offload = false;$/;"	m	struct:hw_features
rx_cycles	async/dpdk/DPDK.h	/^  uint64_t rx_cycles = 0;$/;"	m	class:DPDKQueuePair
rx_gc	async/dpdk/DPDK.cc	/^bool DPDKQueuePair::rx_gc(bool force)$/;"	f	class:DPDKQueuePair
rx_gc_thresh	async/dpdk/DPDK.cc	/^static constexpr uint16_t rx_gc_thresh           = 64;$/;"	v	file:
rx_lro	async/dpdk/net.h	/^  bool rx_lro = false;$/;"	m	struct:hw_features
rx_start	async/dpdk/DPDK.h	/^  void rx_start() {$/;"	f	class:DPDKQueuePair
rx_time	async/dpdk/IP.h	/^    utime_t rx_time;$/;"	m	struct:ipv4::frag
rxcq	async/rdma/Infiniband.h	/^    Infiniband::CompletionQueue* rxcq;$/;"	m	class:Infiniband::QueuePair
s	xio/XioPool.h	/^    int s;$/;"	m	struct:XioPool::xio_piece
sa	async/PosixStack.cc	/^  entity_addr_t sa;$/;"	m	class:final	file:
sa	async/rdma/RDMAStack.h	/^  entity_addr_t sa;$/;"	m	class:RDMAServerSocketImpl
sa	msg_types.h	/^    sockaddr sa;$/;"	m	union:entity_addr_t::__anon11
sack	async/dpdk/TCP.h	/^  enum class option_kind: uint8_t { mss = 2, win_scale = 3, sack = 4, timestamps = 8,  nop = 1, eol = 0 };$/;"	m	class:tcp_state::tcp_option::option_kind
sack	async/dpdk/TCP.h	/^  enum class option_len:  uint8_t { mss = 4, win_scale = 3, sack = 2, timestamps = 10, nop = 1, eol = 1 };$/;"	m	class:tcp_state::tcp_option::option_kind::option_len
sack	async/dpdk/TCP.h	/^  struct sack {$/;"	s	class:tcp_state::tcp_option::option_kind::option_len
sav_events	async/EventKqueue.h	/^  struct SaveEvent *sav_events;$/;"	m	class:KqueueDriver	typeref:struct:KqueueDriver::SaveEvent
sav_max	async/EventKqueue.h	/^  int sav_max;$/;"	m	class:KqueueDriver
scount	xio/XioConnection.h	/^  uint64_t scount;$/;"	m	class:XioConnection
sd	simple/Pipe.h	/^    int sd;$/;"	m	class:Pipe
sdev	async/dpdk/net.cc	/^  std::shared_ptr<DPDKDevice> sdev;$/;"	m	class:C_handle_l2forward	file:
segment_acceptable	async/dpdk/TCP.h	/^bool tcp<InetTraits>::tcb::segment_acceptable(tcp_sequence seg_seq, unsigned seg_len) {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::tcb
send	async/Stack.h	/^  ssize_t send(bufferlist &bl, bool more) {$/;"	f	class:ConnectedSocket
send	async/dpdk/ARP.h	/^void arp_for<L3>::send(l2addr to, Packet &&p) {$/;"	f	class:arp_for
send	async/dpdk/DPDK.h	/^  uint32_t send(circular_buffer<Packet>& pb) {$/;"	f	class:DPDKQueuePair
send	async/dpdk/IP.cc	/^void ipv4::send(ipv4_address to, ip_protocol_num proto_num,$/;"	f	class:ipv4
send	async/dpdk/TCP.h	/^      send(CephContext *c): user_queue_space(c, "DPDK::tcp::tcb::user_queue_space", 81920) {}$/;"	f	struct:tcp_state::tcp_option::option_kind::tcp::tcb::send
send	async/dpdk/TCP.h	/^    int send(Packet p) {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::connection
send	async/dpdk/TCP.h	/^    struct send {$/;"	s	class:tcp_state::tcp_option::option_kind::tcp::tcb
send	async/dpdk/TCP.h	/^int tcp<InetTraits>::tcb::send(Packet p) {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::tcb
send	async/rdma/Infiniband.h	/^    Cluster* send;\/\/ SEND$/;"	m	class:Infiniband::MemoryManager
send	async/rdma/RDMAConnectedSocketImpl.cc	/^ssize_t RDMAConnectedSocketImpl::send(bufferlist &bl, bool more)$/;"	f	class:RDMAConnectedSocketImpl
send	xio/XioConnection.h	/^  std::atomic<int64_t> send = { 0 };$/;"	m	class:XioConnection
send_ctr	xio/XioConnection.h	/^  uint32_t send_ctr;$/;"	m	class:XioConnection
send_keepalive	async/AsyncConnection.cc	/^void AsyncConnection::send_keepalive()$/;"	f	class:AsyncConnection
send_keepalive	simple/Pipe.h	/^    bool send_keepalive;$/;"	m	class:Pipe
send_keepalive	simple/PipeConnection.cc	/^void PipeConnection::send_keepalive()$/;"	f	class:PipeConnection
send_keepalive	simple/SimpleMessenger.cc	/^int SimpleMessenger::send_keepalive(Connection *con)$/;"	f	class:SimpleMessenger
send_keepalive	xio/XioConnection.cc	/^void XioLoopbackConnection::send_keepalive()$/;"	f	class:XioLoopbackConnection
send_keepalive_ack	simple/Pipe.h	/^    bool send_keepalive_ack;$/;"	m	class:Pipe
send_keepalive_or_ack	xio/XioConnection.cc	/^void XioConnection::send_keepalive_or_ack(bool ack, const utime_t *tp)$/;"	f	class:XioConnection
send_keepalive_or_ack_internal	xio/XioConnection.cc	/^void XioConnection::send_keepalive_or_ack_internal(bool ack, const utime_t *tp)$/;"	f	class:XioConnection
send_message	async/AsyncConnection.cc	/^int AsyncConnection::send_message(Message *m)$/;"	f	class:AsyncConnection
send_message	simple/PipeConnection.cc	/^int PipeConnection::send_message(Message *m)$/;"	f	class:PipeConnection
send_message	simple/SimpleMessenger.h	/^  int send_message(Message *m, Connection *con) {$/;"	f	class:SimpleMessenger
send_message	xio/XioConnection.cc	/^int XioConnection::send_message(Message *m)$/;"	f	class:XioConnection
send_message	xio/XioConnection.cc	/^int XioLoopbackConnection::send_message(Message *m)$/;"	f	class:XioLoopbackConnection
send_message	xio/XioMessenger.h	/^  virtual int send_message(Message *m, const entity_inst_t &dest) {$/;"	f	class:XioMessenger
send_msg	async/rdma/Infiniband.cc	/^int Infiniband::send_msg(CephContext *cct, int sd, IBSYNMsg& im)$/;"	f	class:Infiniband
send_packet_without_tcb	async/dpdk/TCP.h	/^void tcp<InetTraits>::send_packet_without_tcb(ipaddr from, ipaddr to, Packet p) {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp
send_query	async/dpdk/ARP.h	/^void arp_for<L3>::send_query(const l3addr& paddr) {$/;"	f	class:arp_for
sender_hwaddr	async/dpdk/ARP.h	/^    l2addr sender_hwaddr;$/;"	m	struct:arp_for::arp_hdr
sender_paddr	async/dpdk/ARP.h	/^    l3addr sender_paddr;$/;"	m	struct:arp_for::arp_hdr
sent	async/AsyncConnection.h	/^  list<Message*> sent; \/\/ the first bufferlist need to inject seq$/;"	m	class:AsyncConnection
sent	simple/Pipe.h	/^    list<Message*> sent;$/;"	m	class:Pipe
seq	async/dpdk/TCP.h	/^  tcp_sequence seq;$/;"	m	struct:tcp_state::tcp_option::option_kind::tcp_hdr
seq	xio/XioConnection.h	/^  std::atomic<uint64_t> seq = { 0 };$/;"	m	class:XioLoopbackConnection
server	Messenger.h	/^    bool server;$/;"	m	struct:Messenger::Policy
server	xio/XioPortal.h	/^  struct xio_server *server;$/;"	m	class:XioPortal	typeref:struct:XioPortal::xio_server
server_setup_socket	async/rdma/RDMAStack.h	/^  int server_setup_socket;$/;"	m	class:RDMAServerSocketImpl
session	xio/XioConnection.h	/^  struct xio_session *session;$/;"	m	class:XioConnection	typeref:struct:XioConnection::xio_session
session_event	xio/XioMessenger.cc	/^int XioMessenger::session_event(struct xio_session *session,$/;"	f	class:XioMessenger
session_key	async/AsyncConnection.h	/^  CryptoKey session_key;$/;"	m	class:AsyncConnection
session_key	xio/XioConnection.h	/^    CryptoKey session_key;$/;"	m	class:XioConnection::CState
session_security	async/AsyncConnection.h	/^  ceph::shared_ptr<AuthSessionHandler> session_security;$/;"	m	class:AsyncConnection
session_security	simple/Pipe.h	/^    ceph::shared_ptr<AuthSessionHandler> session_security;$/;"	m	class:Pipe
session_security	xio/XioConnection.h	/^    ceph::shared_ptr<AuthSessionHandler> session_security;$/;"	m	class:XioConnection::CState
session_startup_states	xio/XioConnection.h	/^  enum class session_startup_states : unsigned {$/;"	c	class:XioConnection
session_state	xio/XioConnection.h	/^    std::atomic<session_states> session_state = { 0 };$/;"	m	class:XioConnection::CState
session_states	xio/XioConnection.h	/^  enum class session_states : unsigned {$/;"	c	class:XioConnection
set_accept_fd	async/rdma/RDMAConnectedSocketImpl.cc	/^void RDMAConnectedSocketImpl::set_accept_fd(int sd)$/;"	f	class:RDMAConnectedSocketImpl
set_addr	async/AsyncMessenger.cc	/^void AsyncMessenger::set_addr(const entity_addr_t &addr)$/;"	f	class:AsyncMessenger
set_addr	simple/SimpleMessenger.cc	/^void SimpleMessenger::set_addr(const entity_addr_t &addr)$/;"	f	class:SimpleMessenger
set_addr_unknowns	async/AsyncMessenger.cc	/^void AsyncMessenger::set_addr_unknowns(const entity_addr_t &addr)$/;"	f	class:AsyncMessenger
set_addr_unknowns	simple/SimpleMessenger.cc	/^void SimpleMessenger::set_addr_unknowns(const entity_addr_t &addr)$/;"	f	class:SimpleMessenger
set_bound	async/rdma/Infiniband.cc	/^void Infiniband::MemoryManager::Chunk::set_bound(uint32_t b)$/;"	f	class:Infiniband::MemoryManager::Chunk
set_byte_throttler	Message.h	/^  void set_byte_throttler(Throttle *t) { byte_throttler = t; }$/;"	f	class:Message
set_center	async/AsyncConnection.h	/^    void set_center(EventCenter *c) { center = c; }$/;"	f	class:AsyncConnection::DelayedDelivery
set_cluster_offload_info	async/dpdk/DPDK.cc	/^void DPDKQueuePair::tx_buf::set_cluster_offload_info(const Packet& p, const DPDKQueuePair& qp, rte_mbuf* head)$/;"	f	class:DPDKQueuePair::tx_buf
set_cluster_protocol	xio/XioMessenger.h	/^  virtual void set_cluster_protocol(int p)$/;"	f	class:XioMessenger
set_completion_hook	Message.h	/^  void set_completion_hook(CompletionHook *hook) { completion_hook = hook; }$/;"	f	class:Message
set_connection	Message.h	/^  void set_connection(const ConnectionRef& c) {$/;"	f	class:Message
set_count	xio/XioInSeq.h	/^  void set_count(int _cnt) { cnt = _cnt; }$/;"	f	class:XioInSeq
set_data	Message.h	/^  void set_data(const bufferlist &bl) {$/;"	f	class:Message
set_default_send_priority	Messenger.h	/^  void set_default_send_priority(int p) {$/;"	f	class:Messenger
set_dispatch_stamp	Message.h	/^  void set_dispatch_stamp(utime_t t) { dispatch_stamp = t; }$/;"	f	class:Message
set_dispatch_throttle_size	Message.h	/^  void set_dispatch_throttle_size(uint64_t s) { dispatch_throttle_size = s; }$/;"	f	class:Message
set_dispatcher	async/rdma/Infiniband.cc	/^void Infiniband::set_dispatcher(RDMADispatcher *d)$/;"	f	class:Infiniband
set_endpoint_addr	Messenger.cc	/^void Messenger::set_endpoint_addr(const entity_addr_t& a,$/;"	f	class:Messenger
set_exception	async/dpdk/stream.h	/^  void set_exception(int error) {$/;"	f	class:stream
set_family	msg_types.h	/^  void set_family(int f) {$/;"	f	struct:entity_addr_t
set_feature	Connection.h	/^  void set_feature(uint64_t f) { features |= f; }$/;"	f	struct:Connection
set_features	Connection.h	/^  void set_features(uint64_t f) { features = f; }$/;"	f	struct:Connection
set_footer	Message.h	/^  void set_footer(const ceph_msg_footer &e) { footer = e; }$/;"	f	class:Message
set_gw_address	async/dpdk/IP.h	/^  void set_gw_address(ipv4_address ip) {$/;"	f	class:ipv4
set_header	Message.h	/^  void set_header(const ceph_msg_header &e) { header = e; }$/;"	f	class:Message
set_host_address	async/dpdk/IP.h	/^  void set_host_address(ipv4_address ip) {$/;"	f	class:ipv4
set_hw_flow_control	async/dpdk/DPDK.cc	/^void DPDKDevice::set_hw_flow_control()$/;"	f	class:DPDKDevice
set_in4_quad	msg_types.h	/^  void set_in4_quad(int pos, int val) {$/;"	f	struct:entity_addr_t
set_in_seq	xio/XioConnection.h	/^    void set_in_seq(uint64_t seq) {$/;"	f	class:XioConnection::CState
set_in_seq	xio/XioConnection.h	/^    void set_in_seq(uint64_t seq) {$/;"	f	struct:XioConnection::lifecycle
set_ipv4_packet_filter	async/dpdk/DPDKStack.h	/^  void set_ipv4_packet_filter(ip_packet_filter* filter) {$/;"	f	class:DPDKWorker
set_last_keepalive	Connection.h	/^  void set_last_keepalive(utime_t t) {$/;"	f	struct:Connection
set_last_keepalive_ack	Connection.h	/^  void set_last_keepalive_ack(utime_t t) {$/;"	f	struct:Connection
set_local_queue	async/dpdk/DPDK.h	/^  void set_local_queue(unsigned i, std::unique_ptr<DPDKQueuePair> qp) {$/;"	f	class:DPDKDevice
set_magic	Message.h	/^  void set_magic(int _magic) { magic = _magic; }$/;"	f	class:Message
set_magic	Messenger.h	/^  void set_magic(int _magic) { magic = _magic; }$/;"	f	class:Messenger
set_magic	xio/XioConnection.h	/^  void set_magic(int _magic) { magic = _magic; }$/;"	f	class:XioConnection
set_message	Message.h	/^    virtual void set_message(Message *_m) { m = _m; }$/;"	f	class:Message::CompletionHook
set_message_throttler	Message.h	/^  void set_message_throttler(Throttle *t) { msg_throttler = t; }$/;"	f	class:Message
set_messenger	DispatchStrategy.h	/^  void set_messenger(Messenger *_msgr) { msgr = _msgr; }$/;"	f	class:DispatchStrategy
set_middle	Message.h	/^  void set_middle(bufferlist& bl) {$/;"	f	class:Message
set_myaddr	Messenger.h	/^  virtual void set_myaddr(const entity_addr_t& a) {$/;"	f	class:Messenger
set_myaddr	xio/XioMessenger.h	/^  virtual void set_myaddr(const entity_addr_t& a) {$/;"	f	class:XioMessenger
set_myinst	Messenger.h	/^  void set_myinst(entity_inst_t i) { my_inst = i; }$/;"	f	class:Messenger
set_myname	Messenger.h	/^  void set_myname(const entity_name_t& m) { my_inst.name = m; }$/;"	f	class:Messenger
set_netmask_address	async/dpdk/IP.h	/^  void set_netmask_address(ipv4_address ip) {$/;"	f	class:ipv4
set_nonblock	async/net_handler.cc	/^int NetHandler::set_nonblock(int sd)$/;"	f	class:ceph::NetHandler
set_nonce	msg_types.h	/^  void set_nonce(__u32 n) { nonce = n; }$/;"	f	struct:entity_addr_t
set_offload_info	async/dpdk/Packet.h	/^  void set_offload_info(class offload_info oi) { _impl->_offload_info = oi; }$/;"	f	class:Packet
set_offset	async/rdma/Infiniband.cc	/^void Infiniband::MemoryManager::Chunk::set_offset(uint32_t o)$/;"	f	class:Infiniband::MemoryManager::Chunk
set_one_data_buf	async/dpdk/DPDK.h	/^    static size_t set_one_data_buf($/;"	f	class:DPDKQueuePair::tx_buf
set_owner	async/Event.cc	/^void EventCenter::set_owner()$/;"	f	class:EventCenter
set_packet	async/dpdk/DPDK.h	/^    void set_packet(Packet&& p) {$/;"	f	class:DPDKQueuePair::tx_buf
set_packet_filter	async/dpdk/IP.h	/^  void set_packet_filter(ip_packet_filter *f) {$/;"	f	class:ipv4
set_payload	Message.h	/^  void set_payload(bufferlist& bl) {$/;"	f	class:Message
set_peer_addr	Connection.h	/^  void set_peer_addr(const entity_addr_t& a) { peer_addr = a; }$/;"	f	struct:Connection
set_peer_addr	simple/Pipe.h	/^    void set_peer_addr(const entity_addr_t& a) {$/;"	f	class:Pipe
set_peer_type	Connection.h	/^  void set_peer_type(int t) { peer_type = t; }$/;"	f	struct:Connection
set_peer_type	simple/Pipe.h	/^    void set_peer_type(int t) {$/;"	f	class:Pipe
set_pending	async/rdma/RDMAStack.h	/^  void set_pending(bool val) {pending = val;}$/;"	f	class:RDMAConnectedSocketImpl
set_port	msg_types.h	/^  void set_port(int port) {$/;"	f	struct:entity_addr_t
set_priority	Message.h	/^  void set_priority(__s16 p) { header.priority = p; }$/;"	f	class:Message
set_priority	async/net_handler.cc	/^void NetHandler::set_priority(int sd, int prio, int domain)$/;"	f	class:ceph::NetHandler
set_priv	Connection.h	/^  void set_priv(RefCountedObject *o) {$/;"	f	struct:Connection
set_recv_complete_stamp	Message.h	/^  void set_recv_complete_stamp(utime_t t) { recv_complete_stamp = t; }$/;"	f	class:Message
set_recv_stamp	Message.h	/^  void set_recv_stamp(utime_t t) { recv_stamp = t; }$/;"	f	class:Message
set_rss_hash	async/dpdk/Packet.h	/^  void set_rss_hash(uint32_t hash) {$/;"	f	class:Packet
set_rss_table	async/dpdk/DPDK.cc	/^void DPDKDevice::set_rss_table()$/;"	f	class:DPDKDevice
set_self_addr	async/dpdk/ARP.h	/^  void set_self_addr(l3addr addr) {$/;"	f	class:arp_for
set_seq	Message.h	/^  void set_seq(uint64_t s) { header.seq = s; }$/;"	f	class:Message
set_sockaddr	msg_types.h	/^  bool set_sockaddr(const struct sockaddr *sa)$/;"	f	struct:entity_addr_t
set_socket_options	async/net_handler.cc	/^int NetHandler::set_socket_options(int sd, bool nodelay, int size)$/;"	f	class:ceph::NetHandler
set_socket_options	simple/Pipe.cc	/^void Pipe::set_socket_options()$/;"	f	class:Pipe
set_socket_priority	Messenger.h	/^  void set_socket_priority(int prio) {$/;"	f	class:Messenger
set_special_handling	xio/XioConnection.h	/^  void set_special_handling(int n) { special_handling = n; }$/;"	f	class:XioConnection
set_special_handling	xio/XioMessenger.h	/^  void set_special_handling(int n) { special_handling = n; }$/;"	f	class:XioMessenger
set_src	Message.h	/^  void set_src(const entity_name_t& src) { header.src = src; }$/;"	f	class:Message
set_stack	async/rdma/RDMAStack.h	/^  void set_stack(RDMAStack *s) { stack = s; }$/;"	f	class:RDMAWorker
set_throttle_stamp	Message.h	/^  void set_throttle_stamp(utime_t t) { throttle_stamp = t; }$/;"	f	class:Message
set_tid	Message.h	/^  void set_tid(uint64_t t) { header.tid = t; }$/;"	f	class:Message
set_type	Message.h	/^  void set_type(int t) { header.type = t; }$/;"	f	class:Message
set_type	msg_types.h	/^  void set_type(uint32_t t) { type = t; }$/;"	f	struct:entity_addr_t
set_zc_info	async/dpdk/DPDK.h	/^    void set_zc_info(void* va, phys_addr_t pa, size_t len) {$/;"	f	class:DPDKQueuePair::tx_buf
sh_cond	xio/XioMessenger.h	/^  Cond sh_cond;$/;"	m	class:XioMessenger
sh_mtx	xio/XioMessenger.h	/^  Mutex sh_mtx;$/;"	m	class:XioMessenger
share	async/dpdk/Packet.h	/^inline Packet Packet::share() {$/;"	f	class:Packet
share	async/dpdk/Packet.h	/^inline Packet Packet::share(size_t offset, size_t len) {$/;"	f	class:Packet
shared_from_this	async/dpdk/shared_ptr.h	/^enable_lw_shared_from_this<T>::shared_from_this() const {$/;"	f	class:enable_lw_shared_from_this
shared_from_this	async/dpdk/shared_ptr.h	/^enable_lw_shared_from_this<T>::shared_from_this() {$/;"	f	class:enable_lw_shared_from_this
shared_ptr_no_esft	async/dpdk/shared_ptr.h	/^  shared_ptr_no_esft(A&&... a) : _value(std::forward<A>(a)...) {}$/;"	f	struct:shared_ptr_no_esft
shared_ptr_no_esft	async/dpdk/shared_ptr.h	/^  shared_ptr_no_esft(T&& x) : _value(std::move(x)) {}$/;"	f	struct:shared_ptr_no_esft
shared_ptr_no_esft	async/dpdk/shared_ptr.h	/^  shared_ptr_no_esft(const T& x) : _value(x) {}$/;"	f	struct:shared_ptr_no_esft
shared_ptr_no_esft	async/dpdk/shared_ptr.h	/^struct shared_ptr_no_esft {$/;"	s
shift	async/dpdk/TCP.h	/^    uint8_t shift;$/;"	m	struct:tcp_state::tcp_option::option_kind::option_len::win_scale
should_send_ack	async/dpdk/TCP.h	/^bool tcp<InetTraits>::tcb::should_send_ack(uint16_t seg_len) {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::tcb
shutdown	DispatchQueue.cc	/^void DispatchQueue::shutdown()$/;"	f	class:DispatchQueue
shutdown	Messenger.h	/^  virtual int shutdown() { started = false; return 0; }$/;"	f	class:Messenger
shutdown	QueueStrategy.cc	/^void QueueStrategy::shutdown()$/;"	f	class:QueueStrategy
shutdown	async/AsyncMessenger.cc	/^int AsyncMessenger::shutdown()$/;"	f	class:AsyncMessenger
shutdown	async/Stack.h	/^  void shutdown() {$/;"	f	class:ConnectedSocket
shutdown	async/rdma/RDMAConnectedSocketImpl.cc	/^void RDMAConnectedSocketImpl::shutdown()$/;"	f	class:RDMAConnectedSocketImpl
shutdown	simple/SimpleMessenger.cc	/^int SimpleMessenger::shutdown()$/;"	f	class:SimpleMessenger
shutdown	xio/XioMessenger.cc	/^int XioMessenger::shutdown()$/;"	f	class:XioMessenger
shutdown	xio/XioPortal.h	/^  void shutdown()$/;"	f	class:XioPortal
shutdown	xio/XioPortal.h	/^  void shutdown()$/;"	f	class:XioPortals
shutdown_called	xio/XioMessenger.h	/^  std::atomic<bool> shutdown_called = { false };$/;"	m	class:XioMessenger
shutdown_connections	async/AsyncMessenger.cc	/^void AsyncMessenger::shutdown_connections(bool queue_reset)$/;"	f	class:AsyncMessenger
shutdown_rd_fd	simple/Accepter.h	/^  int shutdown_rd_fd;$/;"	m	class:Accepter
shutdown_socket	async/AsyncConnection.h	/^  void shutdown_socket() {$/;"	f	class:AsyncConnection
shutdown_socket	simple/Pipe.h	/^    void shutdown_socket() {$/;"	f	class:Pipe
shutdown_wr_fd	simple/Accepter.h	/^  int shutdown_wr_fd;$/;"	m	class:Accepter
signal_all_data_acked	async/dpdk/TCP.h	/^    void signal_all_data_acked() {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::tcb
signal_data_received	async/dpdk/TCP.h	/^    void signal_data_received() {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::tcb
sigpipe_stopper	Messenger.h	/^    sigpipe_stopper() {$/;"	f	struct:Messenger::sigpipe_stopper
sigpipe_stopper	Messenger.h	/^  struct sigpipe_stopper {$/;"	s	class:Messenger
sin	msg_types.h	/^    sockaddr_in sin;$/;"	m	union:entity_addr_t::__anon11
sin6	msg_types.h	/^    sockaddr_in6 sin6;$/;"	m	union:entity_addr_t::__anon11
size	async/EventEpoll.h	/^  int size;$/;"	m	class:EpollDriver
size	async/EventKqueue.h	/^  int size;$/;"	m	class:KqueueDriver
size	async/dpdk/Packet.h	/^    size_t size;$/;"	m	struct:fragment
size	async/dpdk/circular_buffer.h	/^inline size_t circular_buffer<T, Alloc>::size() const {$/;"	f	class:circular_buffer
size	async/dpdk/net.h	/^  size_t size() const {$/;"	f	class:forward_hash
size	async/dpdk/queue.h	/^  size_t size() const { return _q.size(); }$/;"	f	class:queue
size	msg_types.h	/^  unsigned size() const { return v.size(); }$/;"	f	struct:entity_addrvec_t
size	xio/XioInSeq.h	/^  int size() { return sz; }$/;"	f	class:XioInSeq
size	xio/XioPortal.h	/^      uint32_t size;$/;"	m	struct:XioPortal::SubmitQueue::Lane
slot	async/Event.h	/^    int slot;$/;"	m	class:EventCenter::Poller
socket_addr	async/AsyncConnection.h	/^  entity_addr_t socket_addr;$/;"	m	class:AsyncConnection
socket_priority	Messenger.h	/^  int socket_priority;$/;"	m	class:Messenger
sp	xio/XioConnection.h	/^  pthread_spinlock_t sp;$/;"	m	class:XioConnection
sp	xio/XioPortal.h	/^      pthread_spinlock_t sp;$/;"	m	struct:XioPortal::SubmitQueue::Lane
sp	xio/XioPortal.h	/^  pthread_spinlock_t sp;$/;"	m	class:XioPortal
spawn_worker	async/dpdk/DPDKStack.cc	/^void DPDKStack::spawn_worker(unsigned i, std::function<void ()> &&func)$/;"	f	class:DPDKStack
spawn_worker	async/rdma/RDMAStack.cc	/^void RDMAStack::spawn_worker(unsigned i, std::function<void ()> &&func)$/;"	f	class:RDMAStack
special_handling	xio/XioConnection.h	/^  uint32_t special_handling;$/;"	m	class:XioConnection
special_handling	xio/XioMessenger.h	/^  uint32_t special_handling;$/;"	m	class:XioMessenger
special_handling	xio/XioPortal.h	/^  uint32_t special_handling;$/;"	m	class:XioPortal
src_ip	async/dpdk/IP.h	/^  ipv4_address src_ip;$/;"	m	class:ip_hdr::frag_bits
src_ip	async/dpdk/IP.h	/^  ipv4_address src_ip;$/;"	m	struct:ipv4_frag_id
src_mac	async/dpdk/ethernet.h	/^  ethernet_address src_mac;$/;"	m	struct:eth_hdr
src_port	async/dpdk/TCP.h	/^  uint16_t src_port;$/;"	m	struct:tcp_state::tcp_option::option_kind::tcp_hdr
srq	async/rdma/Infiniband.h	/^    ibv_srq*     srq;            \/\/ shared receive queue$/;"	m	class:Infiniband::QueuePair
srq	async/rdma/Infiniband.h	/^  ibv_srq* srq = nullptr;             \/\/ shared receive work queue$/;"	m	class:Infiniband
srtt	async/dpdk/TCP.h	/^      std::chrono::microseconds srtt;$/;"	m	struct:tcp_state::tcp_option::option_kind::tcp::tcb::send
ss	async/Stack.h	/^  ServerSocket(ServerSocket&& ss) = default;$/;"	m	class:ServerSocket
ss_family	msg_types.h	/^  __le16 ss_family;$/;"	m	struct:ceph_sockaddr_storage
ssthresh	async/dpdk/TCP.h	/^      uint32_t ssthresh;$/;"	m	struct:tcp_state::tcp_option::option_kind::tcp::tcb::send
stack	async/AsyncMessenger.cc	/^  std::shared_ptr<NetworkStack> stack;$/;"	m	struct:StackSingleton	file:
stack	async/AsyncMessenger.h	/^  NetworkStack *stack;$/;"	m	class:AsyncMessenger
stack	async/rdma/RDMAStack.h	/^  RDMAStack *stack;$/;"	m	class:RDMAWorker
stack	async/rdma/RDMAStack.h	/^  RDMAStack* stack;$/;"	m	class:RDMADispatcher
standby	Messenger.h	/^    bool standby;$/;"	m	struct:Messenger::Policy
start	DispatchQueue.cc	/^void DispatchQueue::start()$/;"	f	class:DispatchQueue
start	Messenger.h	/^  virtual int start() { started = true; return 0; }$/;"	f	class:Messenger
start	QueueStrategy.cc	/^void QueueStrategy::start()$/;"	f	class:QueueStrategy
start	async/AsyncMessenger.cc	/^int AsyncMessenger::start()$/;"	f	class:AsyncMessenger
start	async/AsyncMessenger.cc	/^void Processor::start()$/;"	f	class:Processor
start	async/Stack.cc	/^void NetworkStack::start()$/;"	f	class:NetworkStack
start	async/dpdk/stream.h	/^  void start(std::function<int (T...)> next) {$/;"	f	class:subscription
start	simple/Accepter.cc	/^int Accepter::start()$/;"	f	class:Accepter
start	simple/SimpleMessenger.cc	/^int SimpleMessenger::start()$/;"	f	class:SimpleMessenger
start	xio/XioMessenger.cc	/^int XioMessenger::start()$/;"	f	class:XioMessenger
start	xio/XioPortal.h	/^  void start()$/;"	f	class:XioPortals
start_persist_timer	async/dpdk/TCP.h	/^    void start_persist_timer() {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::tcb
start_reader	simple/Pipe.cc	/^void Pipe::start_reader()$/;"	f	class:Pipe
start_retransmit_timer	async/dpdk/TCP.h	/^    void start_retransmit_timer() {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::tcb
start_writer	simple/Pipe.cc	/^void Pipe::start_writer()$/;"	f	class:Pipe
started	Messenger.h	/^  bool started;$/;"	m	class:Messenger
started	async/Stack.h	/^  bool started = false;$/;"	m	class:NetworkStack
started	async/dpdk/stream.h	/^  bool started() {$/;"	f	class:stream
startup_state	xio/XioConnection.h	/^    std::atomic<session_startup_state> startup_state = { 0 };$/;"	m	class:XioConnection::CState
state	async/AsyncConnection.h	/^  int state;$/;"	m	class:AsyncConnection
state	async/dpdk/TCP.h	/^    tcp_state& state() {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::tcb
state	simple/Pipe.h	/^    int state;$/;"	m	class:Pipe
state	xio/XioConnection.h	/^      DEAD } state;$/;"	m	struct:XioConnection::lifecycle	typeref:enum:XioConnection::lifecycle::lf_state
state	xio/XioConnection.h	/^  } state;$/;"	m	class:XioConnection	typeref:struct:XioConnection::lifecycle
state_after_send	async/AsyncConnection.h	/^  int state_after_send;$/;"	m	class:AsyncConnection
state_buffer	async/AsyncConnection.h	/^  char *state_buffer;$/;"	m	class:AsyncConnection
state_closed	simple/Pipe.h	/^    std::atomic<bool> state_closed = { false }; \/\/ true iff state = STATE_CLOSED$/;"	m	class:Pipe
state_discon	xio/XioConnection.cc	/^int XioConnection::CState::state_discon()$/;"	f	class:XioConnection::CState
state_fail	xio/XioConnection.cc	/^int XioConnection::CState::state_fail(Message* m, uint32_t flags)$/;"	f	class:XioConnection::CState
state_flow_controlled	xio/XioConnection.cc	/^int XioConnection::CState::state_flow_controlled(uint32_t flags)$/;"	f	class:XioConnection::CState
state_offset	async/AsyncConnection.h	/^  uint64_t state_offset;$/;"	m	class:AsyncConnection
state_up_ready	xio/XioConnection.cc	/^int XioConnection::CState::state_up_ready(uint32_t flags)$/;"	f	class:XioConnection::CState
stateful_server	Messenger.h	/^    static Policy stateful_server(uint64_t req) {$/;"	f	struct:Messenger::Policy
stateless_server	Messenger.h	/^    static Policy stateless_server(uint64_t req) {$/;"	f	struct:Messenger::Policy
std	async/dpdk/ip_types.h	/^namespace std {$/;"	n
std	async/dpdk/shared_ptr.h	/^namespace std {$/;"	n
std	msg_types.h	/^namespace std {$/;"	n
steal_for_pipe	simple/Pipe.cc	/^  void steal_for_pipe(Pipe *new_owner) {$/;"	f	class:Pipe::DelayedDelivery
stop	DispatchQueue.h	/^  bool stop;$/;"	m	class:DispatchQueue
stop	QueueStrategy.h	/^  bool stop;$/;"	m	class:QueueStrategy
stop	async/AsyncConnection.h	/^  void stop(bool queue_reset) {$/;"	f	class:AsyncConnection
stop	async/AsyncMessenger.cc	/^void Processor::stop()$/;"	f	class:Processor
stop	async/Stack.cc	/^void NetworkStack::stop()$/;"	f	class:NetworkStack
stop	simple/Accepter.cc	/^void Accepter::stop()$/;"	f	class:Accepter
stop	simple/Pipe.cc	/^  void stop() {$/;"	f	class:Pipe::DelayedDelivery
stop	simple/Pipe.cc	/^void Pipe::stop()$/;"	f	class:Pipe
stop_and_wait	simple/Pipe.cc	/^void Pipe::stop_and_wait()$/;"	f	class:Pipe
stop_cond	async/AsyncMessenger.h	/^  Cond  stop_cond;$/;"	m	class:AsyncMessenger
stop_cond	simple/SimpleMessenger.h	/^  Cond  stop_cond;$/;"	m	class:SimpleMessenger
stop_delayed_delivery	simple/Pipe.cc	/^  bool stop_delayed_delivery;$/;"	m	class:Pipe::DelayedDelivery	file:
stop_dispatch	async/AsyncConnection.h	/^    std::atomic_bool stop_dispatch;$/;"	m	class:AsyncConnection::DelayedDelivery
stop_fast_dispatching	simple/Pipe.cc	/^void Pipe::DelayedDelivery::stop_fast_dispatching() {$/;"	f	class:Pipe::DelayedDelivery
stop_fast_dispatching_flag	simple/Pipe.cc	/^  bool stop_fast_dispatching_flag; \/\/ we need to stop fast dispatching$/;"	m	class:Pipe::DelayedDelivery	file:
stop_local_delivery	DispatchQueue.h	/^  bool stop_local_delivery;$/;"	m	class:DispatchQueue
stop_persist_timer	async/dpdk/TCP.h	/^    void stop_persist_timer() {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::tcb
stop_retransmit_timer	async/dpdk/TCP.h	/^    void stop_retransmit_timer() {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::tcb
stopped	async/AsyncMessenger.h	/^  bool stopped;$/;"	m	class:AsyncMessenger
stopped	simple/SimpleMessenger.h	/^  bool stopped = true;$/;"	m	class:SimpleMessenger
storage	async/dpdk/circular_buffer.h	/^    T* storage = nullptr;$/;"	m	struct:circular_buffer::impl
stream	async/dpdk/stream.h	/^class stream {$/;"	c
string2vector	async/dpdk/dpdk_rte.cc	/^  static inline std::vector<char> string2vector(std::string str) {$/;"	f	namespace:dpdk
submit	async/rdma/RDMAConnectedSocketImpl.cc	/^ssize_t RDMAConnectedSocketImpl::submit(bool more)$/;"	f	class:RDMAConnectedSocketImpl
submit_list	xio/XioSubmit.h	/^  bi::list_member_hook<> submit_list;$/;"	m	struct:XioSubmit
submit_message	async/AsyncMessenger.cc	/^void AsyncMessenger::submit_message(Message *m, AsyncConnectionRef con,$/;"	f	class:AsyncMessenger
submit_message	simple/SimpleMessenger.cc	/^void SimpleMessenger::submit_message(Message *m, PipeConnection *con,$/;"	f	class:SimpleMessenger
submit_q	xio/XioPortal.h	/^  SubmitQueue submit_q;$/;"	m	class:XioPortal
submit_to	async/Event.h	/^  void submit_to(int i, func &&f, bool nowait = false) {$/;"	f	class:EventCenter
submit_type	xio/XioSubmit.h	/^  enum submit_type$/;"	g	struct:XioSubmit
subscription	async/dpdk/stream.h	/^  explicit subscription(stream<T...>* s): _stream(s) {$/;"	f	class:subscription
subscription	async/dpdk/stream.h	/^  subscription(subscription&& x)$/;"	f	class:subscription
subscription	async/dpdk/stream.h	/^class subscription {$/;"	c
sum	async/dpdk/IPChecksum.cc	/^void checksummer::sum(const Packet& p) {$/;"	f	class:checksummer
sum	async/dpdk/IPChecksum.cc	/^void checksummer::sum(const char* data, size_t len) {$/;"	f	class:checksummer
sum	async/dpdk/IPChecksum.h	/^  void sum(uint16_t data) {$/;"	f	struct:checksummer
sum	async/dpdk/IPChecksum.h	/^  void sum(uint32_t data) {$/;"	f	struct:checksummer
sum	async/dpdk/IPChecksum.h	/^  void sum(uint8_t data) {$/;"	f	struct:checksummer
sum_many	async/dpdk/IPChecksum.h	/^  void sum_many() {}$/;"	f	struct:checksummer
sum_many	async/dpdk/IPChecksum.h	/^  void sum_many(T0 data, T... rest) {$/;"	f	struct:checksummer
super_t	async/dpdk/circular_buffer.h	/^    typedef std::iterator<std::random_access_iterator_tag, ValueType> super_t;$/;"	t	struct:circular_buffer::cbiterator
support_local_listen_table	async/Stack.h	/^  virtual bool support_local_listen_table() const { return false; }$/;"	f	class:NetworkStack
support_local_listen_table	async/dpdk/DPDKStack.h	/^  virtual bool support_local_listen_table() const { return true; }$/;"	f	class:DPDKStack
support_zero_copy_read	async/Stack.h	/^  virtual bool support_zero_copy_read() const { return false; }$/;"	f	class:NetworkStack
syn_needs_on	async/dpdk/TCP.h	/^    bool syn_needs_on() {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::tcb
syn_retransmit	async/dpdk/TCP.h	/^      unsigned syn_retransmit = 0;$/;"	m	struct:tcp_state::tcp_option::option_kind::tcp::tcb::send
syn_tx_time	async/dpdk/TCP.h	/^      clock_type::time_point syn_tx_time;$/;"	m	struct:tcp_state::tcp_option::option_kind::tcp::tcb::send
sz	xio/XioInSeq.h	/^  int sz;$/;"	m	class:XioInSeq
t	async/dpdk/dpdk_rte.cc	/^  std::thread eal::t;$/;"	m	class:dpdk::eal	file:
t	async/dpdk/dpdk_rte.h	/^  static std::thread t;$/;"	m	class:dpdk::eal
t	async/rdma/RDMAStack.h	/^  std::thread t;$/;"	m	class:RDMADispatcher
t1	async/dpdk/TCP.h	/^    uint32_t t1;$/;"	m	struct:tcp_state::tcp_option::option_kind::option_len::timestamps
t2	async/dpdk/TCP.h	/^    uint32_t t2;$/;"	m	struct:tcp_state::tcp_option::option_kind::option_len::timestamps
tag	xio/XioMsg.h	/^  char tag;$/;"	m	class:XioMsgHdr
tail	xio/XioInSeq.h	/^  struct xio_msg* tail;$/;"	m	class:XioInSeq	typeref:struct:XioInSeq::xio_msg
take_back	async/rdma/Infiniband.cc	/^void Infiniband::MemoryManager::Cluster::take_back(std::vector<Chunk*> &ck)$/;"	f	class:Infiniband::MemoryManager::Cluster
target_hwaddr	async/dpdk/ARP.h	/^    l2addr target_hwaddr;$/;"	m	struct:arp_for::arp_hdr
target_paddr	async/dpdk/ARP.h	/^    l3addr target_paddr;$/;"	m	struct:arp_for::arp_hdr
tc	async/dpdk/TCP.h	/^    lw_shared_ptr<tcb> tc;$/;"	m	class:tcp_state::tcp_option::option_kind::tcp::C_actual_remove_tcb
tc	async/dpdk/TCP.h	/^    tcb *tc;$/;"	m	class:tcp_state::tcp_option::option_kind::tcp::C_all_data_acked
tc	async/dpdk/TCP.h	/^    tcb *tc;$/;"	m	class:tcp_state::tcp_option::option_kind::tcp::C_handle_delayed_ack
tc	async/dpdk/TCP.h	/^    tcb *tc;$/;"	m	class:tcp_state::tcp_option::option_kind::tcp::C_handle_persist
tc	async/dpdk/TCP.h	/^    tcb *tc;$/;"	m	class:tcp_state::tcp_option::option_kind::tcp::C_handle_retransmit
tcb	async/dpdk/TCP.h	/^  class tcb : public enable_lw_shared_from_this<tcb> {$/;"	c	class:tcp_state::tcp_option::option_kind::tcp
tcb	async/dpdk/TCP.h	/^tcp<InetTraits>::tcb::tcb(tcp& t, connid id)$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::tcb
tcp	async/dpdk/TCP.h	/^class tcp {$/;"	c	class:tcp_state::tcp_option::option_kind
tcp	async/dpdk/TCP.h	/^tcp<InetTraits>::tcp(CephContext *c, inet_type& inet, EventCenter *cen)$/;"	f	class:tcp_state::tcp_option::option_kind::tcp
tcp	async/dpdk/const.h	/^  icmp = 1, tcp = 6, unused = 255$/;"	m	class:ip_protocol_num
tcp_fd	async/rdma/RDMAStack.h	/^  int tcp_fd = -1;$/;"	m	class:RDMAConnectedSocketImpl
tcp_hdr	async/dpdk/TCP.h	/^struct tcp_hdr {$/;"	s	class:tcp_state::tcp_option::option_kind
tcp_hdr_len	async/dpdk/Packet.h	/^  uint8_t tcp_hdr_len = 20;$/;"	m	struct:offload_info
tcp_hdr_len_min	async/dpdk/const.h	/^const uint8_t tcp_hdr_len_min = 20;$/;"	m	class:ip_protocol_num::eth_protocol_num
tcp_option	async/dpdk/TCP.h	/^struct tcp_option {$/;"	s	class:tcp_state
tcp_pseudo_header_checksum	async/dpdk/IP.h	/^  static void tcp_pseudo_header_checksum(checksummer& csum, ipv4_address src, ipv4_address dst, uint16_t len) {$/;"	f	struct:ipv4_traits
tcp_read	simple/Pipe.cc	/^int Pipe::tcp_read(char *buf, unsigned len)$/;"	f	class:Pipe
tcp_read_nonblocking	simple/Pipe.cc	/^ssize_t Pipe::tcp_read_nonblocking(char *buf, unsigned len)$/;"	f	class:Pipe
tcp_read_wait	simple/Pipe.cc	/^int Pipe::tcp_read_wait()$/;"	f	class:Pipe
tcp_sequence	async/dpdk/TCP.h	/^struct tcp_sequence {$/;"	s	class:tcp_state::tcp_option::option_kind
tcp_state	async/dpdk/TCP.h	/^enum class tcp_state : uint16_t {$/;"	c
tcp_tag	async/dpdk/TCP.h	/^struct tcp_tag {};$/;"	s	class:tcp_state::tcp_option::option_kind
tcp_write	simple/Pipe.cc	/^int Pipe::tcp_write(const char *buf, unsigned len)$/;"	f	class:Pipe
tcpv4_connect	async/dpdk/TCP.cc	/^int tcpv4_connect(tcp<ipv4_traits>& tcpv4, const entity_addr_t &addr,$/;"	f
tcpv4_listen	async/dpdk/TCP.cc	/^int tcpv4_listen(tcp<ipv4_traits>& tcpv4, uint16_t port, const SocketOptions &opts,$/;"	f
test_kqfd	async/EventKqueue.cc	/^int KqueueDriver::test_kqfd() {$/;"	f	class:KqueueDriver
test_thread_change	async/EventKqueue.cc	/^int KqueueDriver::test_thread_change(const char* funcname) {$/;"	f	class:KqueueDriver
thread_q	QueueStrategy.h	/^    bi::list_member_hook<> thread_q;$/;"	m	class:QueueStrategy::QSThread
threads	QueueStrategy.h	/^  std::vector<std::unique_ptr<QSThread>> threads; \/\/< all threads$/;"	m	class:QueueStrategy
threads	async/PosixStack.h	/^  vector<std::thread> threads;$/;"	m	class:PosixNetworkStack
threads	async/rdma/RDMAStack.h	/^  vector<std::thread> threads;$/;"	m	class:RDMAStack
throttle_stamp	Message.h	/^  utime_t throttle_stamp;            \/\/ 获取throttle的slot的时间戳$/;"	m	class:Message
throttle_stamp	async/AsyncConnection.h	/^  utime_t throttle_stamp;$/;"	m	class:AsyncConnection
throttler_bytes	Messenger.h	/^    Throttle *throttler_bytes;$/;"	m	struct:Messenger::Policy
throttler_messages	Messenger.h	/^    Throttle *throttler_messages;$/;"	m	struct:Messenger::Policy
tick	async/AsyncConnection.cc	/^void AsyncConnection::tick(uint64_t id)$/;"	f	class:AsyncConnection
tick_handler	async/AsyncConnection.h	/^  EventCallbackRef tick_handler;$/;"	m	class:AsyncConnection
time_cb	async/Event.h	/^    EventCallbackRef time_cb;$/;"	m	struct:EventCenter::TimeEvent
time_event_next_id	async/Event.h	/^  uint64_t time_event_next_id;$/;"	m	class:EventCenter
time_events	async/Event.h	/^  std::multimap<clock_type::time_point, TimeEvent> time_events;$/;"	m	class:EventCenter
timeout	simple/SimpleMessenger.h	/^  int timeout;$/;"	m	class:SimpleMessenger
timeout_fd	async/dpdk/ARP.h	/^    uint64_t timeout_fd;$/;"	m	struct:arp_for::resolution
timestamps	async/dpdk/TCP.h	/^  enum class option_kind: uint8_t { mss = 2, win_scale = 3, sack = 4, timestamps = 8,  nop = 1, eol = 0 };$/;"	m	class:tcp_state::tcp_option::option_kind
timestamps	async/dpdk/TCP.h	/^  enum class option_len:  uint8_t { mss = 4, win_scale = 3, sack = 2, timestamps = 10, nop = 1, eol = 1 };$/;"	m	class:tcp_state::tcp_option::option_kind::option_len
timestamps	async/dpdk/TCP.h	/^  struct timestamps {$/;"	s	class:tcp_state::tcp_option::option_kind::option_len
to	async/dpdk/IP.h	/^    ipv4_address to;$/;"	m	struct:ipv4_traits::l4packet
to	async/dpdk/net.h	/^    ethernet_address to;$/;"	m	struct:l3_protocol::l3packet
to_dead	async/rdma/Infiniband.cc	/^int Infiniband::QueuePair::to_dead()$/;"	f	class:Infiniband::QueuePair
to_internal_object	async/dpdk/shared_ptr.h	/^  T* to_internal_object() { return static_cast<T*>(this); }$/;"	f	class:enable_lw_shared_from_this
to_internal_object	async/dpdk/shared_ptr.h	/^  shared_ptr_no_esft* to_internal_object() { return this; }$/;"	f	struct:shared_ptr_no_esft
to_value	async/dpdk/shared_ptr.h	/^  T* to_value() { return &_value; }$/;"	f	struct:shared_ptr_no_esft
to_value	async/dpdk/shared_ptr.h	/^  T* to_value() { return static_cast<T*>(this); }$/;"	f	class:enable_lw_shared_from_this
toeplitz_hash	async/dpdk/toeplitz.h	/^static inline uint32_t toeplitz_hash(const rss_key_type& key, const T& data)$/;"	f
trace	Message.h	/^  ZTracer::Trace trace;$/;"	m	class:Message
trace	xio/XioSubmit.h	/^  ZTracer::Trace trace;$/;"	m	struct:XioSubmit
trace_endpoint	Messenger.h	/^  ZTracer::Endpoint trace_endpoint;$/;"	m	class:Messenger
trace_mempool	xio/XioPool.cc	/^bool XioPool::trace_mempool = 0;$/;"	m	class:XioPool	file:
trace_mempool	xio/XioPool.h	/^  static bool trace_mempool;$/;"	m	class:XioPool
trace_msgcnt	xio/XioPool.cc	/^bool XioPool::trace_msgcnt = 0;$/;"	m	class:XioPool	file:
trace_msgcnt	xio/XioPool.h	/^  static bool trace_msgcnt;$/;"	m	class:XioPool
transfer_pass1	async/dpdk/transfer.h	/^inline void transfer_pass1(Alloc& a, T* from, T* to,$/;"	f
transfer_pass2	async/dpdk/transfer.h	/^inline void transfer_pass2(Alloc& a, T* from, T* to,$/;"	f
translate_one_frag	async/dpdk/DPDK.h	/^    static bool translate_one_frag(DPDKQueuePair& qp, fragment& frag,$/;"	f	class:DPDKQueuePair::tx_buf
trim_back	async/dpdk/Packet.h	/^inline void Packet::trim_back(size_t how_much) {$/;"	f	class:Packet
trim_front	async/dpdk/Packet.h	/^inline void Packet::trim_front(size_t how_much) {$/;"	f	class:Packet
trim_receive_data_after_window	async/dpdk/TCP.h	/^void tcp<InetTraits>::tcb::trim_receive_data_after_window() {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::tcb
try_connect	async/rdma/RDMAConnectedSocketImpl.cc	/^int RDMAConnectedSocketImpl::try_connect(const entity_addr_t& peer_addr, const SocketOptions &opts) {$/;"	f	class:RDMAConnectedSocketImpl
try_get_pipe	simple/PipeConnection.cc	/^bool PipeConnection::try_get_pipe(Pipe **p)$/;"	f	class:PipeConnection
try_insert	xio/XioMessenger.cc	/^void XioMessenger::try_insert(XioConnection *xcon)$/;"	f	class:XioMessenger
try_send	async/AsyncConnection.h	/^  ssize_t try_send(bufferlist &bl, bool more=false) {$/;"	f	class:AsyncConnection
tso_seg_size	async/dpdk/Packet.h	/^  uint16_t tso_seg_size = 0;$/;"	m	struct:offload_info
ttl	async/dpdk/IP.h	/^  uint8_t ttl;$/;"	m	class:ip_hdr::frag_bits
tx_buf	async/dpdk/DPDK.h	/^    tx_buf(tx_buf_factory& fc) : _fc(fc) {$/;"	f	class:DPDKQueuePair::tx_buf
tx_buf	async/dpdk/DPDK.h	/^  class tx_buf {$/;"	c	class:DPDKQueuePair
tx_buf_factory	async/dpdk/DPDK.cc	/^DPDKQueuePair::tx_buf_factory::tx_buf_factory(CephContext *c,$/;"	f	class:DPDKQueuePair::tx_buf_factory
tx_buf_factory	async/dpdk/DPDK.h	/^  class tx_buf_factory {$/;"	c	class:DPDKQueuePair
tx_cc	async/rdma/RDMAStack.h	/^  Infiniband::CompletionChannel *tx_cc, *rx_cc;$/;"	m	class:RDMADispatcher
tx_count	async/dpdk/DPDK.h	/^  uint64_t tx_count = 0;$/;"	m	class:DPDKQueuePair
tx_cq	async/rdma/RDMAStack.h	/^  Infiniband::CompletionQueue* tx_cq;$/;"	m	class:RDMADispatcher
tx_csum_ip_offload	async/dpdk/net.h	/^  bool tx_csum_ip_offload = false;$/;"	m	struct:hw_features
tx_csum_l4_offload	async/dpdk/net.h	/^  bool tx_csum_l4_offload = false;$/;"	m	struct:hw_features
tx_cycles	async/dpdk/DPDK.h	/^  uint64_t tx_cycles = 0;$/;"	m	class:DPDKQueuePair
tx_handler	async/rdma/RDMAStack.h	/^  EventCallbackRef tx_handler;$/;"	m	class:RDMAWorker
tx_time	async/dpdk/TCP.h	/^      clock_type::time_point tx_time;$/;"	m	struct:tcp_state::tcp_option::option_kind::tcp::tcb::unacked_segment
tx_tso	async/dpdk/net.h	/^  bool tx_tso = false;$/;"	m	struct:hw_features
tx_ufo	async/dpdk/net.h	/^  bool tx_ufo = false;$/;"	m	struct:hw_features
txcq	async/rdma/Infiniband.h	/^    Infiniband::CompletionQueue* txcq;$/;"	m	class:Infiniband::QueuePair
type	DispatchQueue.h	/^    int type;$/;"	m	class:DispatchQueue::QueueItem
type	async/Event.h	/^  std::string type;$/;"	m	class:EventCenter
type	async/Stack.h	/^  std::string type;$/;"	m	class:NetworkStack
type	async/dpdk/IP.h	/^  msg_type type;$/;"	m	struct:icmp_hdr
type	async/rdma/Infiniband.h	/^    ibv_qp_type  type;           \/\/ QP type (IBV_QPT_RC, etc.)$/;"	m	class:Infiniband::QueuePair
type	msg_types.h	/^  __u32 type;$/;"	m	struct:entity_addr_t
type	msg_types.h	/^  int type() const { return _type; }$/;"	f	class:entity_name_t
type	xio/XioConnection.h	/^  enum type { ACTIVE, PASSIVE };$/;"	g	class:XioConnection
type	xio/XioSubmit.h	/^  enum submit_type type;$/;"	m	struct:XioSubmit	typeref:enum:XioSubmit::submit_type
type_str	msg_types.h	/^  const char *type_str() const {$/;"	f	class:entity_name_t
type_t	msg_types.h	/^  } type_t;$/;"	t	struct:entity_addr_t	typeref:enum:entity_addr_t::__anon10
u	msg_types.h	/^  } u;$/;"	m	struct:entity_addr_t	typeref:union:entity_addr_t::__anon11
udp_hdr_len	async/dpdk/Packet.h	/^  uint8_t udp_hdr_len = 8;$/;"	m	struct:offload_info
unacked_segment	async/dpdk/TCP.h	/^    struct unacked_segment {$/;"	s	class:tcp_state::tcp_option::option_kind::tcp::tcb
unacknowledged	async/dpdk/TCP.h	/^      tcp_sequence unacknowledged;$/;"	m	struct:tcp_state::tcp_option::option_kind::tcp::tcb::send
unlisten	async/dpdk/UserspaceEvent.h	/^  int unlisten(int fd, int mask) {$/;"	f	class:UserspaceEventManager
unlock_maybe_reap	simple/Pipe.cc	/^void Pipe::unlock_maybe_reap()$/;"	f	class:Pipe
unregister_conn	async/AsyncMessenger.h	/^  void unregister_conn(AsyncConnectionRef conn) {$/;"	f	class:AsyncMessenger
unregister_pipe	simple/Pipe.cc	/^void Pipe::unregister_pipe()$/;"	f	class:Pipe
unregister_xcon	xio/XioMessenger.cc	/^void XioMessenger::unregister_xcon(XioConnection *xcon)$/;"	f	class:XioMessenger
unsent	async/dpdk/TCP.h	/^      std::deque<Packet> unsent;$/;"	m	struct:tcp_state::tcp_option::option_kind::tcp::tcb::send
unsent_len	async/dpdk/TCP.h	/^      uint32_t unsent_len = 0;$/;"	m	struct:tcp_state::tcp_option::option_kind::tcp::tcb::send
unset_local_queue	async/dpdk/DPDK.h	/^  void unset_local_queue(unsigned i) {$/;"	f	class:DPDKDevice
unuse_internal_data	async/dpdk/Packet.h	/^    void unuse_internal_data() {$/;"	f	struct:Packet::impl
unused	async/dpdk/const.h	/^  icmp = 1, tcp = 6, unused = 255$/;"	m	class:ip_protocol_num
unused_fds	async/dpdk/UserspaceEvent.h	/^  std::list<uint32_t> unused_fds;$/;"	m	class:UserspaceEventManager
update_cwnd	async/dpdk/TCP.h	/^void tcp<InetTraits>::tcb::update_cwnd(uint32_t acked_bytes) {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::tcb
update_rto	async/dpdk/TCP.h	/^void tcp<InetTraits>::tcb::update_rto(clock_type::time_point tx_time) {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::tcb
urgent	async/dpdk/TCP.h	/^      tcp_sequence urgent;$/;"	m	struct:tcp_state::tcp_option::option_kind::tcp::tcb::receive
urgent	async/dpdk/TCP.h	/^      tcp_sequence urgent;$/;"	m	struct:tcp_state::tcp_option::option_kind::tcp::tcb::send
urgent	async/dpdk/TCP.h	/^  uint16_t urgent;$/;"	m	struct:tcp_state::tcp_option::option_kind::tcp_hdr
user_queue_space	async/dpdk/TCP.h	/^      Throttle user_queue_space;$/;"	m	struct:tcp_state::tcp_option::option_kind::tcp::tcb::send
using_internal_data	async/dpdk/Packet.h	/^    bool using_internal_data() const {$/;"	f	struct:Packet::impl
v	msg_types.h	/^  vector<entity_addr_t> v;$/;"	m	struct:entity_addrvec_t
ver	async/dpdk/IP.h	/^  uint8_t ver : 4;$/;"	m	struct:ip_hdr
verify_authorizer	async/AsyncMessenger.h	/^  bool verify_authorizer(Connection *con, int peer_type, int protocol, bufferlist& auth, bufferlist& auth_reply,$/;"	f	class:AsyncMessenger
verify_authorizer	simple/SimpleMessenger.cc	/^bool SimpleMessenger::verify_authorizer(Connection *con, int peer_type,$/;"	f	class:SimpleMessenger
vlan_tci	async/dpdk/Packet.h	/^  Tub<uint16_t> vlan_tci;$/;"	m	struct:offload_info
vmxnet3_max_xmit_segment_frags	async/dpdk/DPDK.cc	/^static constexpr uint8_t vmxnet3_max_xmit_segment_frags = 16;$/;"	v	file:
w_lock	async/rdma/RDMAStack.h	/^  Mutex w_lock; \/\/ protect pending workers$/;"	m	class:RDMADispatcher
wait	DispatchQueue.cc	/^void DispatchQueue::wait()$/;"	f	class:DispatchQueue
wait	QueueStrategy.cc	/^void QueueStrategy::wait()$/;"	f	class:QueueStrategy
wait	async/AsyncMessenger.cc	/^void AsyncMessenger::wait()$/;"	f	class:AsyncMessenger
wait	async/Event.h	/^    void wait() {$/;"	f	class:EventCenter::C_submit_event
wait	async/Stack.cc	/^  void wait() {$/;"	f	class:C_drain
wait	async/dpdk/ARP.h	/^void arp_for<L3>::wait(const l3addr& paddr, Packet p, resolution_cb cb) {$/;"	f	class:arp_for
wait	simple/SimpleMessenger.cc	/^void SimpleMessenger::wait()$/;"	f	class:SimpleMessenger
wait	xio/XioMessenger.cc	/^void XioMessenger::wait()$/;"	f	class:XioMessenger
wait_cond	simple/SimpleMessenger.h	/^  Cond  wait_cond;$/;"	m	class:SimpleMessenger
wait_for_flush	simple/Pipe.cc	/^  void wait_for_flush() {$/;"	f	class:Pipe::DelayedDelivery
wait_for_init	async/Stack.h	/^  void wait_for_init() {$/;"	f	class:Worker
wait_l2_dst_address	async/dpdk/IP.cc	/^void ipv4::wait_l2_dst_address(ipv4_address to, Packet p, resolution_cb cb) {$/;"	f	class:ipv4
wait_l2_dst_address	async/dpdk/IP.h	/^inline void ipv4_l4<ProtoNum>::wait_l2_dst_address(ipv4_address to, Packet p, resolution_cb cb) {$/;"	f	class:ipv4_l4
waiting_fds	async/dpdk/UserspaceEvent.h	/^  std::vector<int> waiting_fds;$/;"	m	class:UserspaceEventManager
waiting_idx	async/dpdk/UserspaceEvent.h	/^    uint32_t waiting_idx = 0;$/;"	m	struct:UserspaceEventManager::UserspaceFDImpl
wakeup	async/Event.cc	/^void EventCenter::wakeup()$/;"	f	class:EventCenter
wakeup_from	async/AsyncConnection.cc	/^void AsyncConnection::wakeup_from(uint64_t id)$/;"	f	class:AsyncConnection
wakeup_handler	async/AsyncConnection.h	/^  EventCallbackRef wakeup_handler;$/;"	m	class:AsyncConnection
was_session_reset	async/AsyncConnection.cc	/^void AsyncConnection::was_session_reset()$/;"	f	class:AsyncConnection
was_session_reset	simple/Pipe.cc	/^void Pipe::was_session_reset()$/;"	f	class:Pipe
wc	async/rdma/RDMAStack.h	/^  std::vector<ibv_wc> wc;$/;"	m	class:RDMAConnectedSocketImpl
wc_status_to_string	async/rdma/Infiniband.cc	/^const char* Infiniband::wc_status_to_string(int status)$/;"	f	class:Infiniband
wfds	async/EventSelect.h	/^  fd_set rfds, wfds;$/;"	m	class:SelectDriver
win_scale	async/dpdk/TCP.h	/^  enum class option_kind: uint8_t { mss = 2, win_scale = 3, sack = 4, timestamps = 8,  nop = 1, eol = 0 };$/;"	m	class:tcp_state::tcp_option::option_kind
win_scale	async/dpdk/TCP.h	/^  enum class option_len:  uint8_t { mss = 4, win_scale = 3, sack = 2, timestamps = 10, nop = 1, eol = 1 };$/;"	m	class:tcp_state::tcp_option::option_kind::option_len
win_scale	async/dpdk/TCP.h	/^  struct win_scale {$/;"	s	class:tcp_state::tcp_option::option_kind::option_len
window	async/dpdk/TCP.h	/^      uint32_t window;$/;"	m	struct:tcp_state::tcp_option::option_kind::tcp::tcb::receive
window	async/dpdk/TCP.h	/^      uint32_t window;$/;"	m	struct:tcp_state::tcp_option::option_kind::tcp::tcb::send
window	async/dpdk/TCP.h	/^  uint16_t window;$/;"	m	struct:tcp_state::tcp_option::option_kind::tcp_hdr
window_probe	async/dpdk/TCP.h	/^      bool window_probe = false;$/;"	m	struct:tcp_state::tcp_option::option_kind::tcp::tcb::send
window_scale	async/dpdk/TCP.h	/^      uint8_t window_scale;$/;"	m	struct:tcp_state::tcp_option::option_kind::tcp::tcb::receive
window_scale	async/dpdk/TCP.h	/^      uint8_t window_scale;$/;"	m	struct:tcp_state::tcp_option::option_kind::tcp::tcb::send
wire_gid_to_gid	async/rdma/Infiniband.cc	/^void Infiniband::wire_gid_to_gid(const char *wgid, union ibv_gid *gid)$/;"	f	class:Infiniband
wl1	async/dpdk/TCP.h	/^      tcp_sequence wl1;$/;"	m	struct:tcp_state::tcp_option::option_kind::tcp::tcb::send
wl2	async/dpdk/TCP.h	/^      tcp_sequence wl2;$/;"	m	struct:tcp_state::tcp_option::option_kind::tcp::tcb::send
worker	async/AsyncConnection.h	/^  Worker *worker;$/;"	m	class:AsyncConnection
worker	async/AsyncMessenger.h	/^  Worker *worker;$/;"	m	class:Processor
worker	async/dpdk/net.cc	/^  DPDKWorker *worker;$/;"	m	class:C_arp_learn	file:
worker	async/rdma/RDMAStack.h	/^    RDMAWorker *worker;$/;"	m	class:RDMAWorker::C_handle_cq_tx
worker	async/rdma/RDMAStack.h	/^  RDMAWorker *worker;$/;"	m	class:RDMAServerSocketImpl
worker	async/rdma/RDMAStack.h	/^  RDMAWorker* worker;$/;"	m	class:RDMAConnectedSocketImpl
workers	async/Stack.h	/^  vector<Worker*> workers;$/;"	m	class:NetworkStack
workers	async/dpdk/DPDK.h	/^  std::vector<DPDKWorker*> workers;$/;"	m	class:DPDKDevice
write	async/rdma/Infiniband.cc	/^uint32_t Infiniband::MemoryManager::Chunk::write(char* buf, uint32_t len)$/;"	f	class:Infiniband::MemoryManager::Chunk
write_ack	simple/Pipe.cc	/^int Pipe::write_ack(uint64_t seq)$/;"	f	class:Pipe
write_cb	async/Event.h	/^    EventCallbackRef write_cb;$/;"	m	struct:EventCenter::FileEvent
write_errno	async/dpdk/UserspaceEvent.h	/^    int16_t write_errno = 0;$/;"	m	struct:UserspaceEventManager::UserspaceFDImpl
write_handler	async/AsyncConnection.h	/^  EventCallbackRef write_handler;$/;"	m	class:AsyncConnection
write_keepalive	simple/Pipe.cc	/^int Pipe::write_keepalive()$/;"	f	class:Pipe
write_keepalive2	simple/Pipe.cc	/^int Pipe::write_keepalive2(char tag, const utime_t& t)$/;"	f	class:Pipe
write_lock	async/AsyncConnection.h	/^  std::mutex write_lock;$/;"	m	class:AsyncConnection
write_message	async/AsyncConnection.cc	/^ssize_t AsyncConnection::write_message(Message *m, bufferlist& bl, bool more)$/;"	f	class:AsyncConnection
write_message	simple/Pipe.cc	/^int Pipe::write_message(const ceph_msg_header& header, const ceph_msg_footer& footer, bufferlist& blist)$/;"	f	class:Pipe
writer	simple/Pipe.cc	/^void Pipe::writer()$/;"	f	class:Pipe
writer_running	simple/Pipe.h	/^    bool writer_running;$/;"	m	class:Pipe
writer_thread	simple/Pipe.h	/^    } writer_thread;$/;"	m	class:Pipe	typeref:class:Pipe::Writer
x	async/dpdk/capture.h	/^  T x;$/;"	m	class:capture_impl
xcon	xio/XioConnection.h	/^    XioConnection *xcon;$/;"	m	class:XioConnection::CState
xcon	xio/XioMsg.h	/^  XioConnection *xcon;$/;"	m	class:XioDispatchHook
xcon	xio/XioMsg.h	/^  XioConnection* xcon;$/;"	m	class:XioMarkDownHook
xcon	xio/XioSubmit.h	/^  XioConnection *xcon;$/;"	m	struct:XioSubmit
xhook	xio/XioMsg.h	/^  XioDispatchHook *xhook;$/;"	m	struct:XioCompletion
xio_conn_type	xio/XioConnection.h	/^  XioConnection::type xio_conn_type;$/;"	m	class:XioConnection
xio_count_buffers	xio/XioMessenger.cc	/^xio_count_buffers(const buffer::list& bl, int& req_size, int& msg_off, int& req_off)$/;"	f	file:
xio_log	xio/XioMessenger.cc	/^namespace xio_log$/;"	n	file:
xio_msg_ex	xio/XioMsg.h	/^  explicit xio_msg_ex(void* user_context) {$/;"	f	struct:xio_msg_ex
xio_msg_ex	xio/XioMsg.h	/^struct xio_msg_ex$/;"	s
xio_msgr_noreg_mpool	xio/XioMessenger.cc	/^struct xio_mempool *xio_msgr_noreg_mpool;$/;"	v	typeref:struct:xio_mempool
xio_msgr_ops	xio/XioMessenger.cc	/^static struct xio_session_ops xio_msgr_ops;$/;"	v	typeref:struct:xio_session_ops	file:
xio_piece	xio/XioPool.h	/^  struct xio_piece {$/;"	s	class:XioPool
xio_place_buffers	xio/XioMessenger.cc	/^xio_place_buffers(const buffer::list& bl, XioMsg *xmsg, struct xio_msg*& req,$/;"	f	file:
xio_qdepth_high_mark	xio/XioConnection.h	/^  int xio_qdepth_high_mark() {$/;"	f	class:XioConnection
xio_qdepth_low_mark	xio/XioConnection.h	/^  int xio_qdepth_low_mark() {$/;"	f	class:XioConnection
xio_uri	xio/XioPortal.h	/^  string xio_uri;$/;"	m	class:XioPortal
xio_uri_from_entity	xio/XioMessenger.cc	/^static string xio_uri_from_entity(const string &type,$/;"	f	file:
xp_stats	xio/XioPool.cc	/^XioPoolStats xp_stats;$/;"	v
xpool_alloc	xio/XioPool.h	/^static inline int xpool_alloc(struct xio_mempool *pool, uint64_t size,$/;"	f
xpool_dec_hookcnt	xio/XioPool.h	215;"	d
xpool_dec_msgcnt	xio/XioPool.h	209;"	d
xpool_free	xio/XioPool.h	/^static inline void xpool_free(uint64_t size, struct xio_reg_mem* mp)$/;"	f
xpool_inc_hookcnt	xio/XioPool.h	212;"	d
xpool_inc_msgcnt	xio/XioPool.h	206;"	d
zero_copy_read	async/Stack.h	/^  ssize_t zero_copy_read(bufferptr &data) {$/;"	f	class:ConnectedSocket
zero_copy_read	async/rdma/RDMAConnectedSocketImpl.cc	/^ssize_t RDMAConnectedSocketImpl::zero_copy_read(bufferptr &data)$/;"	f	class:RDMAConnectedSocketImpl
~AsyncConnection	async/AsyncConnection.cc	/^AsyncConnection::~AsyncConnection()$/;"	f	class:AsyncConnection
~AsyncMessenger	async/AsyncMessenger.cc	/^AsyncMessenger::~AsyncMessenger()$/;"	f	class:AsyncMessenger
~Chunk	async/rdma/Infiniband.cc	/^Infiniband::MemoryManager::Chunk::~Chunk()$/;"	f	class:Infiniband::MemoryManager::Chunk
~Cluster	async/rdma/Infiniband.cc	/^Infiniband::MemoryManager::Cluster::~Cluster()$/;"	f	class:Infiniband::MemoryManager::Cluster
~CompletionChannel	async/rdma/Infiniband.cc	/^Infiniband::CompletionChannel::~CompletionChannel()$/;"	f	class:Infiniband::CompletionChannel
~CompletionQueue	async/rdma/Infiniband.cc	/^Infiniband::CompletionQueue::~CompletionQueue()$/;"	f	class:Infiniband::CompletionQueue
~ConnectedSocket	async/Stack.h	/^   ~ConnectedSocket() {$/;"	f	class:ConnectedSocket
~ConnectedSocketImpl	async/Stack.h	/^  virtual ~ConnectedSocketImpl() {}$/;"	f	class:ConnectedSocketImpl
~DPDKDevice	async/dpdk/DPDK.h	/^  ~DPDKDevice() {$/;"	f	class:DPDKDevice
~DPDKDriver	async/dpdk/EventDPDK.h	/^  virtual ~DPDKDriver() { }$/;"	f	class:DPDKDriver
~DPDKQueuePair	async/dpdk/DPDK.h	/^  ~DPDKQueuePair() {$/;"	f	class:DPDKQueuePair
~Device	async/rdma/Infiniband.h	/^  ~Device() {$/;"	f	class:Device
~DeviceList	async/rdma/Infiniband.h	/^  ~DeviceList() {$/;"	f	class:DeviceList
~DispatchQueue	DispatchQueue.h	/^  ~DispatchQueue() {$/;"	f	class:DispatchQueue
~DispatchStrategy	DispatchStrategy.h	/^  virtual ~DispatchStrategy() {}$/;"	f	class:DispatchStrategy
~Dispatcher	Dispatcher.h	/^  virtual ~Dispatcher() { }$/;"	f	class:Dispatcher
~EventCallback	async/Event.h	/^  virtual ~EventCallback() {}       \/\/ we want a virtual destructor!!!$/;"	f	class:EventCallback
~EventCenter	async/Event.cc	/^EventCenter::~EventCenter()$/;"	f	class:EventCenter
~EventDriver	async/Event.h	/^  virtual ~EventDriver() {}       \/\/ we want a virtual destructor!!!$/;"	f	class:EventDriver
~FastStrategy	FastStrategy.h	/^  virtual ~FastStrategy() {}$/;"	f	class:FastStrategy
~Impl	async/dpdk/DPDKStack.h	/^    ~Impl() {$/;"	f	struct:DPDKWorker::Impl
~Infiniband	async/rdma/Infiniband.cc	/^Infiniband::~Infiniband()$/;"	f	class:Infiniband
~KqueueDriver	async/EventKqueue.h	/^  virtual ~KqueueDriver() {$/;"	f	class:KqueueDriver
~MemoryManager	async/rdma/Infiniband.cc	/^Infiniband::MemoryManager::~MemoryManager()$/;"	f	class:Infiniband::MemoryManager
~Messenger	Messenger.h	/^  virtual ~Messenger() {}$/;"	f	class:Messenger
~Pipe	simple/Pipe.cc	/^Pipe::~Pipe()$/;"	f	class:Pipe
~PipeConnection	simple/PipeConnection.cc	/^PipeConnection::~PipeConnection()$/;"	f	class:PipeConnection
~Poller	async/Event.cc	/^EventCenter::Poller::~Poller()$/;"	f	class:EventCenter::Poller
~Processor	async/AsyncMessenger.h	/^  ~Processor() { delete listen_handler; };$/;"	f	class:Processor
~ProtectionDomain	async/rdma/Infiniband.cc	/^Infiniband::ProtectionDomain::~ProtectionDomain()$/;"	f	class:Infiniband::ProtectionDomain
~QueuePair	async/rdma/Infiniband.cc	/^Infiniband::QueuePair::~QueuePair()$/;"	f	class:Infiniband::QueuePair
~QueueStrategy	QueueStrategy.h	/^  virtual ~QueueStrategy() {}$/;"	f	class:QueueStrategy
~RDMAConnectedSocketImpl	async/rdma/RDMAConnectedSocketImpl.cc	/^RDMAConnectedSocketImpl::~RDMAConnectedSocketImpl()$/;"	f	class:RDMAConnectedSocketImpl
~RDMADispatcher	async/rdma/RDMAStack.cc	/^RDMADispatcher::~RDMADispatcher()$/;"	f	class:RDMADispatcher
~RDMAStack	async/rdma/RDMAStack.cc	/^RDMAStack::~RDMAStack()$/;"	f	class:RDMAStack
~RDMAWorker	async/rdma/RDMAStack.cc	/^RDMAWorker::~RDMAWorker()$/;"	f	class:RDMAWorker
~ServerSocket	async/Stack.h	/^  ~ServerSocket() {$/;"	f	class:ServerSocket
~ServerSocketImpl	async/Stack.h	/^  virtual ~ServerSocketImpl() {}$/;"	f	class:ServerSocketImpl
~SimpleMessenger	simple/SimpleMessenger.cc	/^SimpleMessenger::~SimpleMessenger()$/;"	f	class:SimpleMessenger
~StackSingleton	async/AsyncMessenger.cc	/^  ~StackSingleton() {$/;"	f	struct:StackSingleton
~Worker	async/Stack.h	/^  virtual ~Worker() {$/;"	f	class:Worker
~XioConnection	xio/XioConnection.h	/^  ~XioConnection() {$/;"	f	class:XioConnection
~XioDispatchHook	xio/XioMsg.h	/^  ~XioDispatchHook() {$/;"	f	class:XioDispatchHook
~XioMessenger	xio/XioMessenger.cc	/^XioMessenger::~XioMessenger()$/;"	f	class:XioMessenger
~XioMsg	xio/XioMsg.h	/^  ~XioMsg()$/;"	f	struct:XioMsg
~XioMsgHdr	xio/XioMsg.h	/^  virtual ~XioMsgHdr()$/;"	f	class:XioMsgHdr
~XioPool	xio/XioPool.h	/^  ~XioPool()$/;"	f	class:XioPool
~XioPortals	xio/XioPortal.h	/^  ~XioPortals()$/;"	f	class:XioPortals
~XioSend	xio/XioMsg.h	/^  virtual ~XioSend() {$/;"	f	class:XioSend
~XioSubmit	xio/XioSubmit.h	/^  virtual ~XioSubmit(){$/;"	f	struct:XioSubmit
~arp_for	async/dpdk/ARP.h	/^  ~arp_for() {$/;"	f	class:arp_for
~arp_for_protocol	async/dpdk/ARP.cc	/^arp_for_protocol::~arp_for_protocol()$/;"	f	class:arp_for_protocol
~circular_buffer	async/dpdk/circular_buffer.h	/^inline circular_buffer<T, Alloc>::~circular_buffer() {$/;"	f	class:circular_buffer
~connection	async/dpdk/TCP.h	/^tcp<InetTraits>::connection::~connection() {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::connection
~ip_packet_filter	async/dpdk/IP.h	/^  virtual ~ip_packet_filter() {};$/;"	f	struct:ip_packet_filter
~ip_protocol	async/dpdk/IP.h	/^  virtual ~ip_protocol() {}$/;"	f	class:ip_protocol
~ipv4	async/dpdk/IP.h	/^  ~ipv4() {$/;"	f	class:ipv4
~ipv4_tcp	async/dpdk/TCP.cc	/^ipv4_tcp::~ipv4_tcp() { }$/;"	f	class:ipv4_tcp
~listener	async/dpdk/TCP.h	/^    ~listener() {$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::listener
~lw_shared_ptr	async/dpdk/shared_ptr.h	/^  ~lw_shared_ptr() {$/;"	f	class:lw_shared_ptr
~sigpipe_stopper	Messenger.h	/^    ~sigpipe_stopper() {$/;"	f	struct:Messenger::sigpipe_stopper
~stream	async/dpdk/stream.h	/^  ~stream() {$/;"	f	class:stream
~subscription	async/dpdk/stream.h	/^  ~subscription() {$/;"	f	class:subscription
~tcb	async/dpdk/TCP.h	/^tcp<InetTraits>::tcb::~tcb()$/;"	f	class:tcp_state::tcp_option::option_kind::tcp::tcb
~tx_buf_factory	async/dpdk/DPDK.h	/^    ~tx_buf_factory() {$/;"	f	class:DPDKQueuePair::tx_buf_factory
